ID,hash,author,date,commit_message,is_merge,lines_changed,insertions,deletions,dmm_unit_size,dmm_unit_complexity,dmm_unit_interfacing,radon_LOC,radon_LLOC,radon_SLOC,radon_comments,radon_avg_cc,radon_avg_MI,radon_avg_vocabulary,radon_avg_length,radon_avg_volume,radon_avg_difficulty,radon_avg_effort,radon_avg_time,radon_avg_bugs
0,87f8870e06979e4d440ccbfc88ad0673ce7465ff,Lindsey Simon,2012-04-05 00:27:34+00:00,Adds python implementation,False,585,585,0,0.4126506024096386,0.6295180722891566,0.7259036144578314,585,333,379,47,3.7142857142857144,67.24994716872581,51.0,91.33333333333333,580.4873279101357,3.2970664087685364,3291.371231526958,182.8539573070532,0.19349577597004522
1,91800a976d3fa90e571ca1836c6b7e304085c85d,Lindsey Simon,2012-05-04 04:43:37+00:00,"Update with dmolsen's regexes.yaml, test_resources, etc..",False,7,1,6,,,,580,333,379,47,3.7142857142857144,66.73705034748409,51.0,91.33333333333333,580.4873279101357,3.2970664087685364,3291.371231526958,182.8539573070532,0.19349577597004522
2,05d7ebf1d51c26be7feede580da3b41d339f406e,Lindsey Simon,2012-05-04 05:25:08+00:00,Chrome Frame UA,False,4,2,2,,,,585,333,379,47,3.7142857142857144,67.24994716872581,51.0,91.33333333333333,580.4873279101357,3.2970664087685364,3291.371231526958,182.8539573070532,0.19349577597004522
3,fa71c60529d3e814c61a246f7e1d42dd36cb79cd,Lindsey Simon,2012-05-04 05:49:34+00:00,Adds a device test resource,False,29,28,1,0.15789473684210525,1.0,1.0,615,349,398,49,3.6216216216216215,66.32067459259825,51.666666666666664,92.33333333333333,587.8335026899396,3.285538082022818,3309.6947950463014,183.87193305812787,0.19594450089664653
4,346fcf56d5cee78bfdcfd12a3fb3fa5b2c16bda6,Lindsey Simon,2012-05-25 19:16:26+00:00,"Updates python to use major/minor/patch, regexes w spiders, tests",False,257,175,82,0.03278688524590164,0.5573770491803278,0.639344262295082,678,350,442,50,3.7027027027027026,65.91764947315389,54.333333333333336,97.33333333333333,628.5346583443569,3.76695652173913,4240.140835363184,235.56337974239912,0.20951155278145228
5,3fdbd6c409c95c46d33107da9b734a17ca4d3b37,Lindsey Simon,2012-05-29 21:23:11+00:00,Really apply them,False,2,1,1,,,,702,364,458,52,3.6842105263157894,65.2393521285928,54.333333333333336,98.33333333333333,634.2070836863282,3.8031884057971013,4277.7514816523435,237.65286009179684,0.2114023612287761
6,d29580219e350b1a4552afce75ae563df37e17e0,Lindsey Simon,2012-05-29 22:03:44+00:00,lint fixes,False,78,31,47,1.0,0.0,0.0,686,354,448,50,3.7027027027027026,65.78745646035556,55.0,97.33333333333333,630.2540212129041,3.7144075021312872,4181.434055217125,232.30189195650698,0.21008467373763473
7,1ef47432741e6904ffe32d8548a16b6bbb7c38e5,Matt Norton,2012-06-07 19:51:16+00:00,Implemented proper python packaging,False,0,0,0,,,,686,354,448,50,3.7027027027027026,65.78745646035556,55.0,97.33333333333333,630.2540212129041,3.7144075021312872,4181.434055217125,232.30189195650698,0.21008467373763473
8,3ff42d2c93d21ae3884b8191fd832618e8fa5127,Lindsey Simon,2012-06-21 20:11:59+00:00,"Adds pingdom, updates paths in py files",False,4,2,2,,,,686,354,448,50,3.7027027027027026,65.78745646035556,55.0,97.33333333333333,630.2540212129041,3.7144075021312872,4181.434055217125,232.30189195650698,0.21008467373763473
9,5770aa92baa28c85913a67325020c88fec1c6d32,Ernest French,2012-08-02 04:40:23+00:00,fix import of yaml from python,False,2,1,1,,,,686,354,448,50,3.7027027027027026,65.78745646035556,55.0,97.33333333333333,630.2540212129041,3.7144075021312872,4181.434055217125,232.30189195650698,0.21008467373763473
10,89882625b430e1e255851142210c59fdb021227b,Tobie Langel,2012-11-08 09:49:54+00:00,Fix the reference to regexes.yaml in the py implementation.,False,2,1,1,,,,686,354,448,50,3.7027027027027026,65.78745646035556,55.0,97.33333333333333,630.2540212129041,3.7144075021312872,4181.434055217125,232.30189195650698,0.21008467373763473
11,d0b91343711b669938b7a48c6e84c1ecdf8f638f,Jason Carver,2012-11-11 01:24:43+00:00,bugfix an error during python test (cannot compare None to int) & ignore compiled python files,False,4,2,2,,,,686,354,448,50,3.7837837837837838,65.66440268299355,55.666666666666664,99.33333333333333,645.6594425879899,3.740802675585284,4340.516684068501,241.1398157815834,0.21521981419599664
12,b08d06681a3b58d2cbec189651083e57b1ee4b4f,Lindsey Simon,2012-11-14 19:55:59+00:00,Fix unreachable code in py implementation,False,2,0,2,1.0,1.0,1.0,684,353,447,50,3.7567567567567566,65.74661008545417,55.333333333333336,98.33333333333333,637.9479137403439,3.7277332207682563,4260.780351851851,236.71001954732512,0.21264930458011463
13,ca75c0aefc65661ba0a48b3513bfdb6d97389fa2,James Wann,2012-11-28 01:36:26+00:00,Allow the yaml files to be specified in the environment. Useful for other environments such as hadoop.,False,8,7,1,,,,690,358,452,50,3.7567567567567566,65.5848228951544,56.0,99.0,644.2279259103999,3.941123188405797,4614.008530646952,256.333807258164,0.21474264197013326
14,d73337523a5b71a54276d58c439d9f84a64d6288,Selwin Ong,2012-12-03 15:05:37+00:00,Fixed regexes.yaml import path in Python version.,False,2,1,1,,,,690,358,452,50,3.7567567567567566,65.5848228951544,56.0,99.0,644.2279259103999,3.941123188405797,4614.008530646952,256.333807258164,0.21474264197013326
15,f7262223fcb51fd571a83c9ec305f80da1cd3edd,Lindsey Simon,2012-12-04 22:28:46+00:00,"Remove is_ bools from tests + python. Also reindent python
Bonus: Adds Tesla Model S to regexes",False,691,331,360,1.0,1.0,1.0,661,345,429,49,3.6486486486486487,66.27464476252378,53.0,94.0,602.485560397607,3.4873001643508146,3668.0090190541196,203.77827883633998,0.20082852013253563
16,3fe78c0bac59eebad4de61474ee786ce4758f9c5,Selwin Ong,2012-12-28 03:19:34+00:00,Prepare Python port for PyPI release.,False,1,1,0,,,,662,346,430,49,3.6486486486486487,66.27464476252378,53.0,94.0,602.485560397607,3.4873001643508146,3668.0090190541196,203.77827883633998,0.20082852013253563
17,41321b2e30d233f3f170711f9bdcc777b8b8c06f,Selwin Ong,2012-12-28 04:45:50+00:00,First stab at automated yaml to json build step for python installation.,False,28,21,7,,,,675,356,440,51,3.6486486486486487,65.9864901072156,54.0,95.0,611.8097915719018,3.6930171277997363,4007.709783203271,222.65054351129285,0.20393659719063392
18,b53dffa777c99ef883290c51254e04cbdd828903,Selwin Ong,2012-12-28 07:27:59+00:00,Move regexes.yaml to python installation dir and convert it to json after installation.,False,5,3,2,,,,676,356,440,51,3.6486486486486487,65.9864901072156,54.0,95.0,611.8097915719018,3.6930171277997363,4007.709783203271,222.65054351129285,0.20393659719063392
19,6bc73bac844abc9b323a635dd65e2984c7de2c62,Selwin Ong,2012-12-30 10:46:30+00:00,Bumped up Python port's version number.,False,2,1,1,,,,677,357,441,51,3.6486486486486487,65.9864901072156,54.0,95.0,611.8097915719018,3.6930171277997363,4007.709783203271,222.65054351129285,0.20393659719063392
20,3a3dd8446dc4ed3221b2dd0ebf806d78fd9657c4,Selwin Ong,2013-01-11 01:26:09+00:00,Bump python port to version 0.3.2.,False,2,1,1,,,,677,357,441,51,3.6486486486486487,65.9864901072156,54.0,95.0,611.8097915719018,3.6930171277997363,4007.709783203271,222.65054351129285,0.20393659719063392
21,aa293806c7bbb02d446461161a95c134b835a5bb,Selwin Ong,2013-03-14 12:06:44+00:00,Python version of ua_parser should also check for regexes.yaml in data dir.,False,12,9,3,,,,683,359,443,55,3.6486486486486487,66.0030723873953,54.0,95.0,611.8097915719018,3.6930171277997363,4007.709783203271,222.65054351129285,0.20393659719063392
22,a540485d61ad1fea59d0b725c44ceac2b52c9d25,Selwin Ong,2013-03-14 13:25:11+00:00,Bumped version to 0.3.3.,False,2,1,1,,,,683,359,443,55,3.6486486486486487,66.0030723873953,54.0,95.0,611.8097915719018,3.6930171277997363,4007.709783203271,222.65054351129285,0.20393659719063392
23,782a88fcae5f120fc284b5de86242ffa8b6e4b10,Dave Bonner,2013-03-15 14:54:50+00:00,"use pkg_resources to find regexes.{yaml,json}",False,8,3,5,,,,675,357,441,51,3.6486486486486487,65.9864901072156,54.0,95.0,611.8097915719018,3.6930171277997363,4007.709783203271,222.65054351129285,0.20393659719063392
24,28d8538fd6eeeff562dc474543b6e3073b51c279,Andrew Selder,2013-04-22 20:37:32+00:00,"Make python tests pass.

Have python client support v2_replacement and os_v1 and os_v2 replacement.

Python client uses the None value instead of 'Other' when the device isn't found. Make the test reflect that.

The probable correct fix is to make the parse return 'Other' in that case, but this would be a change to the behavior that others are probably depending on.",False,55,41,14,0.25,0.5,0.75,702,372,457,53,3.7837837837837838,65.47042109082561,55.333333333333336,98.0,634.5175245732768,3.710052255225522,4183.761856356711,232.43121424203954,0.21150584152442561
25,8d56aa8b85a28bf7f2f9cab89fe6269f121c22d1,Andrew Selder,2013-04-22 21:11:19+00:00,"Update Python client to return 'Other' rather than None for the device.

Fixes #214
Similar to #212 for Java.",False,13,5,8,1.0,0.0,0.0,699,371,456,51,3.7837837837837838,65.4522045171093,55.666666666666664,98.0,636.5154679278198,3.926762346981849,4527.879388148977,251.5488548971654,0.2121718226426066
26,6c8f7dedb6e96ce93b48865241fc820e108fce2f,George V. Reilly,2013-07-27 07:49:23+00:00,"No longer require pyyaml for 'setup.py install' or subsequently at runtime.

'setup.py sdist' and 'setup.py develop' *do* require pyyaml,
but these are ua-parser developer scenarios.
Normal users who install ua-parser with Pip or Easy_Install
no longer need to install pyyaml.

Tested with:

- Sdist:
  * Fresh virtualenv
  * cd ~/src/ua-parser; git clean -dxf
  * pip install pyyaml
  * python setup.py sdist
  * cp -fprv ~/src/ua-parser/dist/ua-parser-*.tar.gz ~/.pip2pi
  * dir2pi ~/.pip2pi/

- Develop:
  * Fresh virtualenv
  * cd ~/src/ua-parser; git clean -dxf
  * pip install pyyaml
  * python setup.py develop
  * python -c ""from ua_parser import user_agent_parser; print user_agent_parser.Parse('Chrome/29.0.1547.2')""

- Pip:
  * Fresh virtualenv; *no* pyyaml
  * cd ~/src/ua-parser; git clean -dxf; cd ~/src
  * pip install -i file:///Users/georger/.pip2pi/simple/ ua-parser
  * python -c ""from ua_parser import user_agent_parser; print user_agent_parser.Parse('Chrome/29.0.1547.2')""

- Easy_Install:
  * Fresh virtualenv; *no* pyyaml
  * cd ~/src/ua-parser; git clean -dxf; cd ~/src
  * easy_install -i file:///Users/georger/.pip2pi/simple/ ua-parser
  * python -c ""from ua_parser import user_agent_parser; print user_agent_parser.Parse('Chrome/29.0.1547.2')""",False,5,4,1,,,,712,375,460,55,3.7837837837837838,65.43045854891267,55.666666666666664,98.0,636.5154679278198,3.926762346981849,4527.879388148977,251.5488548971654,0.2121718226426066
27,6c59c7505b325255c8ee76c04d6b4005a971147d,Selwin Ong,2013-08-02 01:13:21+00:00,Bump to version 0.3.4,False,2,1,1,,,,712,375,460,55,3.7837837837837838,65.43045854891267,55.666666666666664,98.0,636.5154679278198,3.926762346981849,4527.879388148977,251.5488548971654,0.2121718226426066
28,30b230f676990d30179a4e0734cf45fdcaa8de10,Lindsey Simon,2013-08-09 18:29:40+00:00,Implement os v1 and v2 replacements,False,13,12,1,,,,723,381,469,55,3.7837837837837838,65.17110852842465,56.333333333333336,100.0,651.9577737144738,3.955210489993098,4700.556504823697,261.1420280457609,0.21731925790482462
29,c784e7554f1ef1aa0c1ba364b653ef47335dbc5c,commenthol,2014-04-03 16:47:59+00:00,Enable $1 replacements within python parser,False,5,4,1,0.0,0.0,1.0,726,384,472,55,3.8378378378378377,65.06997210035043,56.333333333333336,100.0,651.9577737144738,3.955210489993098,4700.556504823697,261.1420280457609,0.21731925790482462
30,bfa9f97c35bb8aed51e8321d53b446accc6997a1,Tomás Mery,2014-09-01 22:49:18+00:00,Fix #438 - Add fallback to avoid ImportError in Google App Engine (no pkg_resources),False,11,7,4,,,,729,388,476,55,3.8378378378378377,64.95071328535631,56.333333333333336,100.0,651.9577737144738,3.955210489993098,4700.556504823697,261.1420280457609,0.21731925790482462
31,05c33dff74d4b69999e9e1136fd2bdcdf7cf055b,floydsoft,2014-10-14 08:31:14+00:00,fix the match group detection,False,8,4,4,,,,729,388,476,55,3.972972972972973,64.72351888138614,57.333333333333336,103.0,675.2497765801903,3.9959071390230805,4962.643469967204,275.70241499817797,0.22508325886006342
32,712826ca1f16704c5dbd91e4f91e8325fa3fb3c2,commenthol,2014-11-07 20:58:30+00:00,current state brand model parsing,False,82,66,16,0.7419354838709677,0.5161290322580645,0.6129032258064516,779,417,519,55,4.0,63.544434201095534,62.333333333333336,111.0,744.2572504004224,4.413402802730865,6283.894826374549,349.10526813191933,0.24808575013347411
33,c1d8749589a5b55cc62ce1160cddb0f01ea441e6,Tobie Langel,2014-11-07 22:48:17+00:00,"Revert ""Current State Brand-Model Parsing""",False,82,16,66,0.25806451612903225,0.4838709677419355,0.3870967741935484,729,388,476,55,3.972972972972973,64.72351888138614,57.333333333333336,103.0,675.2497765801903,3.9959071390230805,4962.643469967204,275.70241499817797,0.22508325886006342
34,f8264c0a606f5a7a055d0243d2b2025118287f8c,commenthol,2014-11-22 15:16:56+00:00,brand-model,False,213,190,23,0.5517241379310345,0.7413793103448276,0.7931034482758621,851,449,580,56,3.659090909090909,64.452942498901,48.0,84.5,561.095347918926,3.5600521020481493,4715.823529899521,261.9901961055289,0.18703178263964199
35,9f5163518123617bd2877116fcd45120af2c8237,commenthol,2014-12-04 21:04:01+00:00,test_device_brandmodel.yaml merged into test_device.yaml,False,4,0,4,0.0,0.0,0.0,847,447,577,56,3.7209302325581395,64.5688079741958,48.0,84.5,561.095347918926,3.5600521020481493,4715.823529899521,261.9901961055289,0.18703178263964199
36,dabe633d181b7a62369f8857e5069131b83ba636,Alex Stapleton,2015-05-03 14:43:00+00:00,Add trove tags for supported python versions,False,9,9,0,,,,856,447,586,56,3.7209302325581395,64.43515891277062,48.0,84.5,561.095347918926,3.5600521020481493,4715.823529899521,261.9901961055289,0.18703178263964199
37,0614c2453b5a03b841c2924c69a172aa8dc976b2,Selwin Ong,2015-08-24 07:05:41+00:00,Fix test error on Python 3.2,False,6,4,2,0.0,1.0,1.0,849,447,579,56,3.7209302325581395,64.50929114574934,48.75,85.25,567.2669121498681,3.7135847107438016,4818.119544729,267.6733080405,0.18908897071662267
38,b3aeaa9a7e6440bdaafd09faa47cfaaa47126851,Selwin Ong,2015-08-24 07:09:27+00:00,Remove the use of unicode literal.,False,8,4,4,,,,849,447,579,56,3.7209302325581395,64.50929114574934,48.75,85.25,567.2669121498681,3.7135847107438016,4818.119544729,267.6733080405,0.18908897071662267
39,65ab2f38e5011089d6004699509a5e9a2e419b60,Selwin Ong,2015-08-24 07:13:50+00:00,Removed Python 3.2 from travis.yml.,False,13,5,8,1.0,0.0,0.0,847,447,577,56,3.7209302325581395,64.5688079741958,48.0,84.5,561.095347918926,3.5600521020481493,4715.823529899521,261.9901961055289,0.18703178263964199
40,465ddb9388097c55c6b78f9223cadef4fbd9df17,Selwin Ong,2015-09-05 01:32:03+00:00,Update ua-core to 0.4.1.,False,6,4,2,,,,847,447,577,56,3.7209302325581395,64.5688079741958,48.0,84.5,561.095347918926,3.5600521020481493,4715.823529899521,261.9901961055289,0.18703178263964199
41,ff1e65da9dcc57c982296e134f787ed28c2f8c5e,mbarkhau,2015-09-07 10:07:49+00:00,Update version number to 0.4.1 fixes #18,False,2,1,1,,,,847,447,577,56,3.7209302325581395,64.5688079741958,48.0,84.5,561.095347918926,3.5600521020481493,4715.823529899521,261.9901961055289,0.18703178263964199
42,1e2a9322220c161e96fe4487fee2f19081ca4f22,Chris Bunney,2015-09-11 14:17:11+00:00,Run install_regexes() for install command as well as sdist and develop,False,8,8,0,1.0,1.0,1.0,855,452,584,56,3.6222222222222222,64.06377841518385,48.0,84.5,561.095347918926,3.5600521020481493,4715.823529899521,261.9901961055289,0.18703178263964199
43,1b0dc543d78964f8e1fe402458c21b132c883dbf,John-David Dalton,2015-09-14 22:00:48+00:00,Bump ua-parser version in setup.py.,False,2,1,1,,,,847,447,577,56,3.7209302325581395,64.5688079741958,48.0,84.5,561.095347918926,3.5600521020481493,4715.823529899521,261.9901961055289,0.18703178263964199
44,c81b1cbc20f9b52e09621573d3b34b7a6b7dbd73,kevinlondon,2015-09-21 02:41:20+00:00,Switch from yaml.load to yaml.safe_load for security.,False,8,4,4,,,,856,447,586,56,3.7209302325581395,64.43515891277062,48.0,84.5,561.095347918926,3.5600521020481493,4715.823529899521,261.9901961055289,0.18703178263964199
45,b7e55ae6d68494922625f7c37478b2e897d8b69c,Matt Robenolt,2015-09-21 16:14:34+00:00,"Make sure file handlers get closed

Also lazily import json only when needed.",False,13,6,7,,,,855,445,584,56,3.7209302325581395,64.46099253365568,48.0,84.5,561.095347918926,3.5600521020481493,4715.823529899521,261.9901961055289,0.18703178263964199
46,9f68bc82085179844ea694810c0e55ad3abd66fc,kevinlondon,2015-09-21 20:05:16+00:00,Replace setup with a safer version of load as well.,False,2,1,1,,,,855,444,583,56,3.7209302325581395,64.47395724306986,48.0,84.5,561.095347918926,3.5600521020481493,4715.823529899521,261.9901961055289,0.18703178263964199
47,54e000407a63d273a78f837ba35ab67c77454be8,Matt Robenolt,2015-10-11 09:57:58+00:00,"Cache Parse() results

Each parse takes ~2ms on my machine, and it's pretty common throughout the life of a running
process, to parse identical user-agent strings. This adds a very primitive cache similar in vein
to the cache inside the `urlparse` package.

Before:
```
$ python -m timeit -s 'from ua_parser.user_agent_parser import Parse' 'Parse(""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.52 Safari/537.36"")'
100 loops, best of 3: 2.14 msec per loop
```

After:
```
$ python -m timeit -s 'from ua_parser.user_agent_parser import Parse' 'Parse(""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.52 Safari/537.36"")'
1000000 loops, best of 3: 0.956 usec per loop
```",False,22,16,6,0.0,1.0,1.0,875,459,600,56,3.6666666666666665,63.76977581258543,49.0,86.0,574.329848117792,3.5402173913043478,4812.68468245493,267.3713712474961,0.19144328270593067
48,7f2e72f19a3f3bcb100ac29181b6f24844025e83,Matt Robenolt,2015-10-11 11:22:33+00:00,Fix install from sdist and bdist_wheel,False,55,28,27,0.4,0.0,0.0,850,438,578,57,3.7209302325581395,64.72286292330588,48.0,84.5,561.095347918926,3.5600521020481493,4715.823529899521,261.9901961055289,0.18703178263964199
49,297b039d89dfb65cd6b15126925fab19d01ed1c6,Matt Robenolt,2015-10-11 16:22:44+00:00,"Don't allow an IOError, bubble it up since it's required to exist",False,9,3,6,,,,847,435,575,57,3.7209302325581395,64.79587158749752,48.0,84.5,561.095347918926,3.5600521020481493,4715.823529899521,261.9901961055289,0.18703178263964199
50,9a9337fdfbd07f05609733fd2ef8581143694542,Giorgos Logiotatidis,2015-10-22 09:23:09+00:00,"Use unicode_literals.

Python32 doesn't like u"""" strings. Importing unicode_literals is the
proper way to fix this.",False,12,7,5,,,,861,446,586,57,3.7674418604651163,64.54004447030866,49.0,86.0,574.329848117792,3.5402173913043478,4812.68468245493,267.3713712474961,0.19144328270593067
51,f3965054ce56942840778e08d774f1af03519687,Giorgos Logiotatidis,2015-10-22 13:08:37+00:00,"Include v{3,4}_replacement in OSParser.",False,32,26,6,0.5,0.5,0.5,879,457,601,57,3.86046511627907,64.24394579692841,49.75,88.25,592.3436815351739,3.5701002038043477,5046.222563198728,280.3456979554848,0.19744789384505798
52,93a51a38f59ea0fd67c8061cbb467c67701cf0a0,Matt Robenolt,2015-11-03 16:39:14+00:00,Fixed various lint issues,False,157,83,74,0.2,0.6,0.8,890,458,612,57,3.86046511627907,64.11804273360639,49.75,88.25,592.3436815351739,3.5701002038043477,5046.222563198728,280.3456979554848,0.19744789384505798
53,ef275f556950f1ea7cfa38dcb0a4a595008f0a02,Selwin Ong,2015-11-11 23:01:58+00:00,Bump up version to 0.5.1,False,4,2,2,,,,890,458,612,57,3.86046511627907,64.11804273360639,49.75,88.25,592.3436815351739,3.5701002038043477,5046.222563198728,280.3456979554848,0.19744789384505798
54,440e58b27d1d9427bfdfec5e62844998041f49e4,Matt Robenolt,2015-12-21 23:32:52+00:00,"Pre-compile yaml file into py files

This is a tremendous speedup vs parsing JSON

Fixes #23",False,350,198,152,0.041666666666666664,0.0,1.0,942,510,666,56,3.888888888888889,58.60688770978844,53.75,98.25,635.9507954163046,3.952931677018633,4834.789187494556,268.5993993052531,0.21198359847210152
55,9b0b09537acd1325facb657a6314ca713042fd28,Matt Robenolt,2015-12-21 23:40:38+00:00,Explicitly write bytes for py3 compat,False,84,42,42,,,,942,510,666,56,3.888888888888889,58.60688770978844,53.75,98.25,635.9507954163046,3.952931677018633,4834.789187494556,268.5993993052531,0.21198359847210152
56,0b493c35cff96cb15ff8149f15e9856cf59ca8a2,Matt Robenolt,2015-12-21 23:44:41+00:00,Future imports,False,5,4,1,0.0,0.0,1.0,945,512,668,56,3.888888888888889,58.561356816563396,53.75,98.25,635.9507954163046,3.952931677018633,4834.789187494556,268.5993993052531,0.21198359847210152
57,906d3cd832ad733e44bdadb5cabf640bad4a2c51,Matt Robenolt,2015-12-22 00:14:13+00:00,"user_agent_parser isn't an entrypoint

This didn't work becasue it didn't have a __main__ anyways",False,2,0,2,,,,943,512,668,54,3.888888888888889,58.52082341562868,53.75,98.25,635.9507954163046,3.952931677018633,4834.789187494556,268.5993993052531,0.21198359847210152
58,db65832b7679ecec15975cff20d33e2a5a7ee93b,Matt Robenolt,2015-12-22 00:14:14+00:00,Add missing os versions,False,2,2,0,0.0,0.0,1.0,945,514,670,54,3.888888888888889,58.35185033962465,54.25,99.75,644.471018074409,3.971565217391304,4866.528651875701,270.36270288198335,0.21482367269146968
59,8621957e3bca57d550cf3631d4a38930e17eed50,Matt Robenolt,2015-12-22 00:14:14+00:00,bytes all the way down,False,35,20,15,0.8,0.8,1.0,950,518,674,54,3.888888888888889,58.1704853614152,54.75,100.5,649.5578127222522,3.9472173913043473,4875.916265434891,270.884236968605,0.21651927090741738
60,c8b8cbfb1a1e2a926520bf122267413ce2c654d1,Matt Robenolt,2015-12-22 00:27:17+00:00,Fix for py26,False,14,11,3,1.0,1.0,1.0,958,523,679,54,3.8260869565217392,57.92801110108815,55.5,101.25,655.4025930441205,4.1162914653784215,4946.564943002083,274.8091635001157,0.2184675310147068
61,5fc0eb45440213f769d3dde0a7d24df24870d0e8,Matt Robenolt,2015-12-22 00:53:34+00:00,Fix `setup.py install` and recommend this to install manually,False,41,29,12,1.0,1.0,1.0,974,533,691,54,3.64,57.575968969406546,55.5,101.25,655.4025930441205,4.1162914653784215,4946.564943002083,274.8091635001157,0.2184675310147068
62,a8f3ee120936b2da111d7219ae2aa9fc70d04087,Matt Robenolt,2015-12-22 00:54:04+00:00,Add python 3.5 trove,False,1,1,0,,,,975,533,692,54,3.64,57.57188516463489,55.5,101.25,655.4025930441205,4.1162914653784215,4946.564943002083,274.8091635001157,0.2184675310147068
63,80edcc224242f222f3ba8622d1531f227962e085,Matt Robenolt,2015-12-22 00:55:34+00:00,0.6.0,False,2,1,1,,,,975,533,692,54,3.64,57.57188516463489,55.5,101.25,655.4025930441205,4.1162914653784215,4946.564943002083,274.8091635001157,0.2184675310147068
64,434c32fa129e71fb22700ec3ea942bcdcee89061,Matt Robenolt,2015-12-22 01:10:49+00:00,"Bail out from building regexes entirely if there is no .git

This broke, I think, only tox environment for tests",False,17,6,11,0.0,0.0,0.0,970,530,688,54,3.7291666666666665,57.65859076173433,55.75,101.75,658.6128989538557,4.104717391304348,4955.015627200628,275.2786459555904,0.21953763298461856
65,b9393a904b40499b5a6f13f819ac2a36f72e6a88,Matt Robenolt,2015-12-22 02:31:29+00:00,Pull in all the junk from Sentry to make it work correctly,False,48,45,3,0.9565217391304348,0.34782608695652173,1.0,1011,553,722,54,3.7450980392156863,56.51130478464677,58.5,106.25,689.820941226185,4.444244418331374,5224.043001833991,290.22461121299943,0.2299403137420617
66,649ca139bf031806b0e312da6a1ea69e5e0f1aaf,Matt Robenolt,2015-12-22 02:33:37+00:00,0.6.1,False,2,1,1,,,,1011,553,722,54,3.7450980392156863,56.51130478464677,58.5,106.25,689.820941226185,4.444244418331374,5224.043001833991,290.22461121299943,0.2299403137420617
67,29b44c4d146f0cfe33dcc62b097ae48f28144456,Matt Robenolt,2016-03-18 01:53:37+00:00,"Fix version from __init__.py

Fixes #42",False,2,1,1,,,,1011,553,722,54,3.7450980392156863,56.51130478464677,58.5,106.25,689.820941226185,4.444244418331374,5224.043001833991,290.22461121299943,0.2299403137420617
68,a5253ae95a38ad9c77a4063ba6fdf0900fffd9bc,Matt Robenolt,2016-03-18 02:13:09+00:00,0.7.0,False,4,2,2,,,,1011,553,722,54,3.7450980392156863,56.51130478464677,58.5,106.25,689.820941226185,4.444244418331374,5224.043001833991,290.22461121299943,0.2299403137420617
69,cded74973650f5deb2e230018544fbee855da88c,Matt Robenolt,2016-05-01 22:48:17+00:00,0.7.1,False,4,2,2,,,,1011,553,722,54,3.7450980392156863,56.51130478464677,58.5,106.25,689.820941226185,4.444244418331374,5224.043001833991,290.22461121299943,0.2299403137420617
70,31d2f99849c694290ad2674f85925feb12909697,Matt Robenolt,2016-06-20 15:41:22+00:00,Make flake8 work,False,26,21,5,1.0,1.0,0.0,1011,552,722,54,3.7450980392156863,56.52788659109095,58.5,106.25,689.820941226185,4.444244418331374,5224.043001833991,290.22461121299943,0.2299403137420617
71,e5d5df00f398d590b02002c269b0c5a6f3ddfe93,Matt Robenolt,2016-10-31 11:26:16+00:00,0.7.2,False,4,2,2,,,,1011,552,722,54,3.7450980392156863,56.52788659109095,58.5,106.25,689.820941226185,4.444244418331374,5224.043001833991,290.22461121299943,0.2299403137420617
72,6247d697a97d81eb77b3970f48bac2ad80692593,Matt Robenolt,2017-02-02 01:26:27+00:00,0.7.3,False,4,2,2,,,,1011,552,722,54,3.7450980392156863,56.52788659109095,58.5,106.25,689.820941226185,4.444244418331374,5224.043001833991,290.22461121299943,0.2299403137420617
73,14bf01bf84b18c1a90706934c89651c2da0a7ebe,Ondřej Žára,2018-04-09 15:09:18+00:00,"Update to uap-core and fix os_v1_replacement (#59)

* updated to latest uap-core

* fixes broken test for os_v1_replacement

* fixing utf8",False,10,7,3,0.0,0.0,1.0,1015,556,726,54,3.764705882352941,56.43489145483595,58.5,106.25,689.820941226185,4.444244418331374,5224.043001833991,290.22461121299943,0.2299403137420617
74,982100d635b3d9a44bf43d5949934e030c0076f5,Matt Robenolt,2018-04-09 15:22:58+00:00,"Update builds to python3, and drop interpreters that don't work in tox anymore",False,16,7,9,,,,1016,556,727,54,3.764705882352941,56.43180549302541,58.5,106.25,689.820941226185,4.444244418331374,5224.043001833991,290.22461121299943,0.2299403137420617
75,145af36c99ec659e23fff223ea1c41d79d4de106,Matt Robenolt,2018-04-09 17:01:13+00:00,0.8.0,False,4,2,2,,,,1016,556,727,54,3.764705882352941,56.43180549302541,58.5,106.25,689.820941226185,4.444244418331374,5224.043001833991,290.22461121299943,0.2299403137420617
76,f2f273d0ebd95418f0b569f5355220663c66b812,Deniz Dogan,2019-02-04 17:10:14+00:00,"Fix license field

This is useful while filtering packages on PyPI.",False,2,1,1,,,,1016,556,727,54,3.764705882352941,56.43180549302541,58.5,106.25,689.820941226185,4.444244418331374,5224.043001833991,290.22461121299943,0.2299403137420617
77,75b7d33b7935cde84c5b9ca3f6afc63a71c778d2,Sergey Polischouck,2019-04-23 09:50:54+00:00,fix expected behaviour to get None instead of empty string for ua version parsing,False,6,3,3,,,,1016,556,727,54,3.843137254901961,56.29999587387416,59.5,108.5,708.5194909354077,4.452709534610444,5415.838553071518,300.87991961508425,0.2361731636451359
78,6e8fc931da65da5c93aff0f46dff6c3a8e0eca28,Sergey Polischouck,2019-04-23 10:43:34+00:00,fix os parsing specification with replacing,False,15,12,3,0.0,0.0,1.0,1025,565,736,54,3.9215686274509802,56.08816428494033,59.5,108.5,708.5194909354077,4.452709534610444,5415.838553071518,300.87991961508425,0.2361731636451359
79,779d917a23e43faa734b8da6029443b8269ee3ce,Sergey Polischouck,2019-04-23 11:30:58+00:00,improve readability,False,6,3,3,,,,1025,565,736,54,3.9215686274509802,56.08924003335022,59.25,108.5,707.85635470398,4.471150668331375,5444.121867292839,302.4512148496021,0.23595211823465997
80,7d61e38fa7869fd417af77594f8a070fe15c1145,David Goldstein,2019-07-31 03:06:55+00:00,Fix OSParser to understand the variety of $N possibilities,False,64,24,40,1.0,1.0,0.4666666666666667,1009,550,721,54,3.8823529411764706,56.347545221033585,60.0,110.75,725.986759224935,4.49682457100313,5666.5991316353775,314.811062868632,0.24199558640831167
81,bd976cbff1c5110c69ed86dab2e1314e4b8e5c62,David Goldstein,2019-07-31 03:50:50+00:00,fix lint,False,2,2,0,,,,1011,550,721,54,3.8823529411764706,56.347545221033585,60.0,110.75,725.986759224935,4.49682457100313,5666.5991316353775,314.811062868632,0.24199558640831167
82,40bc3978a0e1ca36b3ed662d86b036b0327bb4eb,João Figueiredo,2020-01-09 21:27:22+00:00,"added py37 and py38 to tox. (#77)

* added python 3.7 to tox envs.
* added python 3.8 to tox envs.
* marked 3.7 and 3.8 as officially supported.
* [extra] added explicit basepython 2.7 to `docs` as running it locally complained that there was no base python.",False,5,4,1,,,,1013,550,723,54,3.8823529411764706,56.341448754480275,60.0,110.75,725.986759224935,4.49682457100313,5666.5991316353775,314.811062868632,0.24199558640831167
83,3aff3c4857967995ef6d3b9e5dc79507b82a8594,jnozsc,2020-01-09 21:36:21+00:00,simplify code and pep8 and apply black formatter (#80),False,327,162,165,0.0,0.8,0.0,1010,523,728,54,3.823529411764706,57.18623290001072,55.5,99.5,634.4086031790506,4.415253267888897,4656.93386341882,258.7185479677122,0.21146953439301688
84,d0ab043847216344a17018041a412c3e56e92bcc,Matt Robenolt,2020-01-09 22:00:01+00:00,Apply black everywhere else,False,509,279,230,0.3,0.8666666666666667,1.0,1052,523,763,57,3.823529411764706,57.92687195397987,55.5,99.5,634.4086031790506,4.415253267888897,4656.93386341882,258.7185479677122,0.21146953439301688
85,898cf8131a72d68338477bf1244bb51174efe0e2,Matt Robenolt,2020-01-09 22:11:16+00:00,Always use yaml SafeLoader,False,14,10,4,,,,1058,527,767,58,3.823529411764706,57.81819491738036,55.5,99.5,634.4086031790506,4.415253267888897,4656.93386341882,258.7185479677122,0.21146953439301688
86,b79462725bad656aa52ad5d965ddf7dcbfb2bbd4,Matt Robenolt,2020-02-04 16:29:17+00:00,0.9.0,False,4,2,2,,,,1058,527,767,58,3.823529411764706,57.81819491738036,55.5,99.5,634.4086031790506,4.415253267888897,4656.93386341882,258.7185479677122,0.21146953439301688
87,0970eacb5cf75b67e62ec24c075d6fa9728f8724,bcaller,2020-02-27 00:04:32+00:00,"[Security] Bump uap-core to 0.8.0 to avoid DoS

A security advisory for uap-core was published at
https://github.com/ua-parser/uap-core/security/advisories/GHSA-cmcx-xhr8-3w9p

Denial of Service in uap-core <=0.7.2 when processing crafted User-Agent strings

This fixes the 4 regular expressions vulnerable to Regular Expression
Denial of Service (REDoS).",False,4,2,2,,,,1058,527,767,58,3.823529411764706,57.81819491738036,55.5,99.5,634.4086031790506,4.415253267888897,4656.93386341882,258.7185479677122,0.21146953439301688
88,d40c2e38da1facf2458f0259daa58ba32d8d9fd9,Matt Robenolt,2020-02-27 00:05:59+00:00,0.10.0,False,4,2,2,,,,1058,527,767,58,3.823529411764706,57.81819491738036,55.5,99.5,634.4086031790506,4.415253267888897,4656.93386341882,258.7185479677122,0.21146953439301688
89,ced19d4611e4a8e809c9ef7f99db7bb7353c4776,Mark DePalma,2022-04-26 19:14:20+00:00,"Open UA_PARSER_YAML as binary

The yaml files should be parsed as UTF8.

In text mode, `open` uses `locale.getpreferredencoding`, which
unless Python is run in UTF-8 mode (see PEP 540) might be
complete nonsense (it's the encoding in `LC_CTYPE` on POSIX
systems, and almost certainly a garbage ANSI codepage on windows,
likely cp1252 for western windows systems).

Open the file in binary mode and pass the binary stream to pyyaml
for it to decode to avoid this error.

Closes #98",False,2,1,1,,,,1058,527,767,58,3.823529411764706,57.81819491738036,55.5,99.5,634.4086031790506,4.415253267888897,4656.93386341882,258.7185479677122,0.21146953439301688
90,0498c91fb1cf05bed518b65d663e17dbb00e2e4f,masklinn,2022-04-27 15:18:39+00:00,"Update CI workflow to split the checkers out

The checkers only need to run once, using the latest supported Python
(probably?).

Also fix black errors in order to re-enable it.

Close #96",False,49,29,20,,,,1058,527,767,58,3.823529411764706,57.81819491738036,55.5,99.5,634.4086031790506,4.415253267888897,4656.93386341882,258.7185479677122,0.21146953439301688
91,e27d50d8f4d626f35986eafbfde9bf9ad9cb4cc4,masklinn,2022-04-30 10:54:33+00:00,"Add comment clarifying use of yaml.load, remove requirements file

pyyaml hasn't been a required dependency for a very long time, it's
really not clear why #70 reintroduced a requirements.txt for it,
unless there were points at which `install_requires` was not resolved
as a *dependency*, so pyyaml had to be separately installed for
`develop` to work?

See also: #103

Closes #106",False,13,7,6,,,,1059,527,767,59,3.823529411764706,57.83868387323809,55.5,99.5,634.4086031790506,4.415253267888897,4656.93386341882,258.7185479677122,0.21146953439301688
92,c9241c752eacd409e13ff6e90b56ace3ce7ade8b,masklinn,2022-04-30 11:05:21+00:00,"Formally deprecate functions which were initially imported deprecated.

Probably going to remove them, especially since `ParseWithJSOverrides`
was originally called `Parse`, and that got switcheroo'd in one of the
early commit, with the original `ParseAll` renamed `Parse`. Therefore
the backwards compatibility was not really a thing per-se.

Closes #109",False,35,35,0,0.85,0.85,0.8,1094,549,790,62,3.5892857142857144,57.44742547257514,55.5,99.5,634.4086031790506,4.415253267888897,4656.93386341882,258.7185479677122,0.21146953439301688
93,69a7a695d662e9056bf96fae90407269fc1a7f9e,masklinn,2022-04-30 11:11:25+00:00,"Update uap-core to 0.15.0

Also update internal version thingie to match. And remove 2.6 from the
classifier tags, as it was dropped way back in 2019 (#70,
a9665f7bf3e7f4dd0d37681c4c0adcb74fea8fe8)

Fixes #100, closes #107",False,7,3,4,,,,1093,549,789,62,3.5892857142857144,57.45305690926749,55.5,99.5,634.4086031790506,4.415253267888897,4656.93386341882,258.7185479677122,0.21146953439301688
94,f637a86ce69ca3ad70e9374874253d084630ef5c,masklinn,2022-05-01 10:27:12+00:00,"Add a bunch of new python versions (and pypy) to the CI

Also to the local tox, and try to rewrite tox.ini to make it more
reliable (wip):

- don't sdist into the repository, just develop into it matching the
  CI (and in a way the old expectations, given the old `setup.py
  develop` stanza)
- don't install the package at all into the checker environments, it's
  entirely unnecessay
- add doctesting of the readme to tox, in order to match the CI
  action, opt 2.7 out for the same reasons: changes in pprint's
  formatting between 2.7 and 3.5 make them incompatible, ignore 2.7
- requirements.txt was removed previously, use the dev requirements

Related to: #102
Closes: #111",False,43,22,21,,,,1095,549,791,62,3.5892857142857144,57.441837388728146,55.5,99.5,634.4086031790506,4.415253267888897,4656.93386341882,258.7185479677122,0.21146953439301688
95,a32a59ee80284e2037773e8e0679c889e2108332,masklinn,2022-05-01 17:47:50+00:00,"Improve caching

- Adds caching to all Parse* functions, using a unified cache (so the
  functions can be intermixed, and the cache size applies to everything).
- Increase default size of cache, 20 seems very small, 200 doesn't
  seem too big (though it's completely arbitrary). Tried to play
  around with random samplings (using non-linear distributions) and
  it didn't exactly change anything but...
- Updated the cache replacement policy to use a FIFO-ish policy.

Unified Cache
=============

Split the parsers between a caching frontend and a ""raw"" backend (the
old behaviour) to avoid Parse having to pay for multiple cache lookups
in order to fill entries.

Also decided to have the entries be handed out initialized, so
`_lookup` *always* returns an entry, which can be partial. The caller
is to check whether the key they handle (for specialised parsers) or
all the sub-keys are filled, and fill them if necessary. This makes
for relatively straightforward code even if it bounces around a
bit. The unified cache makes it so the functions are intermixed and
benefit from one another's activity.

Also added a `**jsParseBits` parameter to `ParseDevice`: I guess that's
basically never used, but `Parse` forwarded its own `jsParseBits`,
which would have led to a `TypeError`.

Cache Policy
============

The cache now uses a FIFO policy (similar to recent updates to the
stdlib's re module) thanks to dict being ordered since 3.6. In my
limited bench not showing much (possibly because the workload was so
artificial) LRU didn't stat much better than FIFO (based on hit/miss
ratios) and FIFO is simpler so for now, FIFO it is. That's easy to
change anyway.

Anyway the point was mostly that any cache which doesn't blow the
entire thing when full is almost certain to be an improvement.

A related change is that the cache used to be blown after it had
MAX_CACHE_SIZE+1 entries, as it was cleared

- on a cache miss
- if the cache size was strictly larger than `MAX_CACHE_SIZE`.

Meaning the effective size of the cache was 21 (which is a pretty
large increment given the small cache size).

This has been changed to top out at `MAX_CACHE_SIZE`.

Fixes #97",False,88,63,25,1.0,1.0,0.7142857142857143,1132,571,812,64,3.442622950819672,56.99722203305277,57.25,102.25,658.2137029110462,4.753261367483917,5444.181397570945,302.45452208727465,0.21940456763701544
96,7a73e3e07887d4c78d3a1f3a552f1ff6b78a1ab4,masklinn,2022-05-01 18:59:32+00:00,"Don't generate unnecessary lines in _regexes.py

The regex builder would generate one ctor parameter for each parser
field. However a *significant* number of entries have less than the
full complement of fields specified, and the later fields are
generally the missing one.

This means we can reduce the size of the file by right-stripping the
list of fields before writing it out (switching to kwargs seems less
likely to be a gain).

This reduces the size of _regexes.py by about 1400 lines (7860 to 6464
lines), and seems to yield very slight memory gains.",False,48,30,18,0.5,0.5,1.0,1144,562,821,65,3.442622950819672,57.755784687167555,55.75,94.5,613.2064305253874,4.756406754249993,5215.121229423186,289.72895719017697,0.20440214350846247
97,f9d60ec8414d925d5a322846492e7f1904a8d1d7,masklinn,2022-05-05 09:18:09+00:00,"Add tests warning when running without C extension

Also skip C extension when running under pypy, it doesn't do any
good (sadly) but it doesn't seem to do any harm either, so far, so
seems unnecessary to bother.

Notes:

- It might not be the best choice ever, as pyyaml might eventually
  have a native accelerator which works well with pypy (and binary
  wheels)?

  Maybe revisit if yaml/pyyaml#531 gets fixed.
- The warning is cute but doesn't actually show up because pytest is
  already in the place (and also probably because I didn't configure
  the logging anywhere)",False,23,17,6,,,,1153,568,830,64,3.442622950819672,57.4544004457366,56.25,95.25,618.7510108996231,4.7484810296123126,5228.979376232378,290.4988542351321,0.20625033696654105
98,c300922b2afe949bedf43a1ef964ededd268d68a,masklinn,2022-05-05 14:11:45+00:00,"Deprecate js override bits

They were a feature for testing whose need was removed in
2015 (ua-parser/uap-core#58). They are *entirely* unnecessary, it is
possible a user somewhere is leveraging them for some reason.

So remove the override bits from the docstrings, and have them trigger
a `DeprecationWarning`.

Also:

- add tests that they do trigger
- remove support for them from the yaml testing functions
- update the pytest invocations to raise on all warnings
- while at it remove the apparently dead makePGTSComparisonYAML test
  utility method (?)
- and add pypy to the envlist

Note: `simplefilter` has to be updated to `""always""` for 2.7's dumb
      ass: the new tests triggers the same warning multiple times and
      of course `""default""` only yields them once.

Closes #119",False,93,39,54,1.0,1.0,0.0,1138,557,828,60,3.377049180327869,60.413554283707654,44.25,73.5,489.05975247335977,4.066189362945646,4800.67929442579,266.70440524587724,0.16301991749111994
99,05e0e416582d33bbe9b8a667c1d36b977e638309,masklinn,2022-08-15 19:24:44+00:00,"Add type assertion to the cache lookup

Currently if an incorrect type is passed in, it'll raise an error
that's anything but clear, either failing in the cache lookup or in
the regex application.

Instead, make the error clear by checking upfront.

Closes #122",False,30,30,0,1.0,1.0,1.0,1168,578,851,60,3.227272727272727,59.66481907038508,45.5,75.5,506.4291086430516,4.039318755256518,4938.693782261303,274.3718767922946,0.1688097028810172
100,6150b61a473cbd0b25926f2b283c2ef26487854e,masklinn,2022-08-20 14:00:09+00:00,"Fix non-in-place building

It's unclear when that stopped (or possibly whether it's ever worked),
but ""regular"" commands which don't build in-place (e.g. a simple
`setup.py build`) have not worked in a while, because the overrides on
tasks trigger `build_regexes` before the task itself (to say nothing
of invoking `build_regexes` directly).

As a result, the build_dir does not exist yet unless there's an old
build_dir remaining for some reason, and trying to create the file
crashes.

Ensure the build dir exists before trying to write
`_regexes.py`. There's a minor TOCTOU in order to handle Python 2's
`os.makedirs`, as it doesn't have `exist_ok`.",False,8,6,2,0.0,0.0,1.0,1172,581,854,60,3.242424242424242,59.52001053079893,45.75,76.0,509.5496122465707,4.034146341463415,4953.223983553807,275.1791101974337,0.1698498707488569
101,4e26047763e51a7421e4ee25abd26980de6fd822,masklinn,2022-08-20 14:16:22+00:00,"Relax pyyaml versioning during building

e27d50d8f4d626f35986eafbfde9bf9ad9cb4cc4 moved the yaml dependency
from runtime to dev and updated the version from 5.1 to 5.4 (not 6.0
as that dropped Python 2.7 compatibility), but that turns out to cause
issues for people who can't / won't download pyyaml on the fly and
require building to work with preinstalled packages, as building
regexes now refuses to work with a locally available 6.0.

Remove version bound on pyyaml (though a `>=` bound might also have
worked), but add a bunch of tests to ensure the regexes build on all
supported versions of Python, and pyyaml (also reinstate 5.1 for that
purpose only).

Fixes #121",False,33,32,1,,,,1172,581,854,60,3.242424242424242,59.52001053079893,45.75,76.0,509.5496122465707,4.034146341463415,4953.223983553807,275.1791101974337,0.1698498707488569
102,56697397300a8a77e470ef8ad3827d0b0dcfb332,masklinn,2022-08-20 19:00:28+00:00,"Release 0.15.1

- removed version bound from `setup_requires`, allows building from
  source when only PyYaml 6.0 is available (and downloading 5.4 is
  not), #121, #125
- added type assertion to parser lookup, to make the error clearer on
  type error, #122, #123
- fixed `setup.py build_regexes` and `setup.py build` for non-in-place
  builds, #127",False,4,2,2,,,,1172,581,854,60,3.242424242424242,59.52001053079893,45.75,76.0,509.5496122465707,4.034146341463415,4953.223983553807,275.1791101974337,0.1698498707488569
103,ab2e451c886a8dcf9614e8e0054ed873f34cedf3,masklinn,2022-08-21 17:07:26+00:00,"Update uap-core to 0.16.0

Closes #129",False,6,3,3,,,,1172,581,854,60,3.242424242424242,59.52001053079893,45.75,76.0,509.5496122465707,4.034146341463415,4953.223983553807,275.1791101974337,0.1698498707488569
104,0939d42b9130e8e4c216f60e7c699b7133f67e73,masklinn,2022-08-27 11:49:57+00:00,"Revert cache FIFO replacement policy to reset/clear

Amongst other changes, #113 switched the cache to a FIFO inspired by
the standard library's re module, however it didn't really take
concurrency in account, so didn't really consider: that double-pops
are possible (probably why the stdlib ignores a bunch of errors),
which can cause KeyError during lookup (as two workers try to clear
the first key, one succeeds, and the other doesn't find the key and
fails).

It also has a few other less major issues:

- double-inserts are possible, which can cause the cache to exceed set
  capacity permanently by the number of concurrent workers
- the stdlib's method only works properly with Python 3.6's naturally
  ordered `dict`, but I'd rather not drop 2.7 compatibility from 0.x
  unless there are very good causes to as, despite 2.7 having been
  EOL'd in 2020, it still accounts for more downloads than 3.10
  (according to pypistats)

Using an ordered dict would solve (3), and allow using an LRU rather
than a FIFO, but it would not actually prevent double-pops or
double-inserts, that would require a proper lock on lookup. Which
might not be that expensive but given the lack of a good dataset to
bench with, it seems a lot of additional complexity for something
we've got no visibility on. But that can be considered if someone
reports a serious performance regression from this.

So for now just revert to a ""reset"" cache replacement policy. If /
when we drop older versions we can switch to `functools.lru_cache` and
let the stdlib take care of this (and possibly have cache
stats). Alternatively if we get a good testing dataset one day we can
bench cache replacement policies or even provide pluggable policies.

Anyway fixes #132, closes #133",False,2,1,1,,,,1172,581,854,60,3.242424242424242,59.52001053079893,45.75,76.0,509.5496122465707,4.034146341463415,4953.223983553807,275.1791101974337,0.1698498707488569
105,05be64dcb97ca84423078622bf9cd929344b3027,masklinn,2022-08-27 13:24:09+00:00,"Release 0.15.2

Fix for #132 on 0.15",False,4,2,2,,,,1172,581,854,60,3.242424242424242,59.52001053079893,45.75,76.0,509.5496122465707,4.034146341463415,4953.223983553807,275.1791101974337,0.1698498707488569
106,52053d54a6e4708ea5945ba01487642615d750fe,masklinn,2022-08-27 14:34:51+00:00,"Release 0.16.1

Fixes concurrency issues with the cache invalidation mechanism.",False,4,2,2,,,,1172,581,854,60,3.242424242424242,59.52001053079893,45.75,76.0,509.5496122465707,4.034146341463415,4953.223983553807,275.1791101974337,0.1698498707488569
107,a8d45b675350dfa4fc19d17fc4b8ed1d04461dcf,masklinn,2023-04-05 19:53:25+00:00,Forgot to add classifiers when promoting 3.11 in #153 (#155),False,1,1,0,,,,1173,581,855,60,3.242424242424242,59.51440254786952,45.75,76.0,509.5496122465707,4.034146341463415,4953.223983553807,275.1791101974337,0.1698498707488569
108,827347722bfb2fd8088783fd9705308dd8b0d4b6,masklinn,2023-04-06 19:16:26+00:00,"Switch to src layout and move tests to their own directory

- src/ layout seems to be the modern standard, and avoids
  e.g. false-positive success issues (where tests get run agains the
  source instead of the packaged library, and thus hide packaging
  issues): https://hynek.me/articles/testing-packaging/
- remove use of unittest entirely (switch everything to pytest, not
  just runner), also move doctesting to pytest
- moving tests out avoids packaging them, and mucking up the source
  dir with more test files in the future
- replace old test command by an invocation of tox

The only thing that's lost is `setup.py check`, but turns out:

- it only checks that `long_description` is valid and we don't use that
- it wasn't being run on CI
- invoking `setup.py` directly is getting deprecated",False,205,85,120,0.6,0.0,0.0,1147,573,834,60,3.227272727272727,57.43099726633686,51.0,83.5,548.3706775675095,4.159146341463415,4993.786494945911,277.4325830525506,0.1827902258558365
109,24c82172c2894343b3eb35e9aaf1e80edcf63f75,masklinn,2023-04-30 11:50:02+00:00,"Drop 2.7, 3.6, and 3.7

- 2.7 was EOL'd in 2020
- 3.6 was EOL'd in 2021
- 3.7 will be EOL'd in June 2023

Even if a 1.0 is cut before June it doesn't seem likely that it'll
matter a lot.

3.8 doesn't bring a lot that's likely to be useful as far as I know,
candidates I can think of are:

- positional-only parameters
- typed dicts and literals, to add typing to the legacy API

While at it, remove the now unnecessary future imports, as well as the
module-level docstrings (they're not very helpful) and the per-file
license headers (they don't seem useful).",False,82,3,79,1.0,1.0,0.0,1099,568,823,34,3.227272727272727,56.15967722275847,51.0,83.5,548.3706775675095,4.159146341463415,4993.786494945911,277.4325830525506,0.1827902258558365
110,bbb14b4cc1c807cca1d97c27efd84400782f76e8,masklinn,2023-04-30 11:50:02+00:00,"Modernize packaging

PEP 517
=======

Don't migrate away from setuptools, but move ""static"" packaging
content from `setup.py` to `pyproject.toml` and `setup.cfg`. Building
should now be performed using
[`build`](https://pypa-build.readthedocs.io/en/stable/), as direct
invocations of `setup.py` have been deprecated for a while.

Also remove the legacy `__author__` strictures from the source files,
as `pyproject.toml` supports an authors section which is more suitable.

Codegen Modernization
=====================

The modernization via command overrides and self-invocation still
generated `setup.py` warnings.

Migrate the ""invoke commands in commands"" method to codegen
sub-commands in `build`, it looks like this suffices for what we
need. This reuses the existing code, though modernizes it
significantly thanks to the previous commit.

This is strongly inspired by @abravalheri's comments on codegen in
setuptools discussions e.g. pypa/setuptools#3180 and
pypa/setuptools#3762, those comments were very helpful in getting a
better understanding of the sub_commands system (also @jaraco's
comments but those were a touch terse so can't say I really got it
until sumbling on @abravalheri's).

Leverages the setuptools subcommands protocol to support editable
wheels, as that might be useful. Don't use editable wheels for testing
though, as I don't see the point.

Note: not sure the git submodule stuff is useful during the codegen,
so currently commented it out.

sdists
======

I'm not entirely clear what sdists should really be about, adding
codegen to sdist using subcommands seems not necessarily trivial, so
for now make them basically an export:

- remove `_regexes.py` from sdist
- add uap-core to the manifest, and thus the sdist, at least
  `regexes.yaml`

Currently the test files (both python and yaml) are also included, but
it's not clear that they *should* be. That seems like [a whole
debate](https://discuss.python.org/t/should-sdists-include-docs-and-tests/14578/117),

One strong argument (to me) in favor of a sdist maximalism is that it
matches the wheels and more official releases, but in that case the
sdist should probably be better crafted than what I threw together.

Tox
===

Switch tox to an explicit `pip install` as its builtin handling for
installing packages (whether via sdist or develop) does not seem
compatible with PEP-517. Need to think about moving to tox 4, which
apparently has native support for PEP 517 packages. Cf #157.

Also remove the `docs` tox env, it hasn't been a thing since
827347722bfb2fd8088783fd9705308dd8b0d4b6 but I forgot to remove it
from the envlist.",False,283,118,165,0.0,0.3870967741935484,0.0,996,522,725,36,3.2333333333333334,61.443420720113714,45.5,75.5,499.798278084149,3.770509977827051,4712.707986983204,261.8171103879558,0.16659942602804967
111,a24779bea3c3f0fe477530f694ead307d8edcee5,masklinn,2023-05-02 08:01:44+00:00,"Modernize user_agent_parser

- remove P2 compatibility (e.g. str/bytes)
- remove never used `MatchSpans` methods (not sure what they were
  intended for)
- remove usage of `jsParseBits`, remove from caches and inner parsers,
  deprecate at the outer parser directly
- add a few types
- modernise code a bit (e.g. match group indexing, f-strings)",False,286,97,189,1.0,0.4444444444444444,0.041666666666666664,904,462,669,36,3.3653846153846154,63.00207840921877,32.75,53.25,315.68097050668877,3.572174447174447,2572.883229905885,142.9379572169936,0.10522699016889625
112,ae0fe2ba899994192fb3d97c9d0b1289d977dde4,masklinn,2023-05-02 13:10:30+00:00,"FIX: tests not working

Since the switch to src layout and pytest in
827347722bfb2fd8088783fd9705308dd8b0d4b6 the main tests had not been
running at all, as they don't match the pytest naming
conventions (thankfully I'd not broken anything).

- rename the two problematic test classes to be picked up by pytest
- also handle the warning generated by `GetFilters` since
  a24779bea3c3f0fe477530f694ead307d8edcee5
- and remove the warnings configuration in `TestDeprecationWarnings`
  as it has not been necessary since
  a24779bea3c3f0fe477530f694ead307d8edcee5 (P2 being dropped), and
  possibly even 827347722bfb2fd8088783fd9705308dd8b0d4b6 (as I
  wouldn't be surprised if pytest did the right thing on P2 either)",False,40,16,24,1.0,1.0,1.0,896,460,670,33,3.46,62.33644191516868,32.75,53.25,315.68097050668877,3.572174447174447,2572.883229905885,142.9379572169936,0.10522699016889625
113,f6fb0e2f2e43985b1015f529f39f9eb1de3f4a17,masklinn,2023-05-03 12:35:53+00:00,"forgot to remove format in a24779bea3c3f0fe477530f694ead307d8edcee5

This is broken, but obviously not tested.",False,2,1,1,,,,896,460,670,33,3.46,62.35511778713221,32.25,52.5,309.56776424718936,3.5912247474747474,2532.0513821515706,140.6695212306428,0.10318925474906313
114,fafda51915bef37ea103cd2b2853d674b43e5a90,masklinn,2024-02-03 15:59:42+00:00,fix black formatting changes now failing CI,False,21,12,9,1.0,1.0,0.0,899,460,673,33,3.46,62.33870343851821,32.25,52.5,309.56776424718936,3.5912247474747474,2532.0513821515706,140.6695212306428,0.10318925474906313
115,69087a792282f188309e9861070398546682e242,masklinn,2024-02-06 19:08:35+00:00,"Typed API & parsers API

New API with full typing
========================

Seems pretty self-explanatory, rather than returning somewhat ad-hoc
dicts this API works off of dataclasses, it should be compatible with
the legacy version through the magic of ~~buying two of them~~
`dataclasses.asdict`.

Parser API
==========

The legacy version had ""parsers"" which really represent individual
parsing rules. In the new API the job of a parser is what the
top-level functions did, they wrap around the entire job of parsing a
user-agent string.

The core API is just `__call__`, with a selection flag for the domains
(seems like the least bad term for what ""user agent"", ""os"", and
""device"" are, other alternatives I considered are ""component"" and
""category"", but I'm still ambivalent). Overridable helpers are
provided which match the old API's methods (with PEP8 conventions), as
well as the same style of helpers at the package toplevel.

This resolves a number of limitations:

Concurrency
-----------

While the library should be thread-safe (and I need to find a way to
test that) the ability to instantiate parsers should provide the
opportunity for things like thread-local parsers, or actual
parallelism if we start using native extensions (regex, re2).

It also allows running multiple *parser configurations* concurrently,
including e.g. multiple independent custom yaml sets. Not sure there's
a use for it, but why not?

At the very least it should make using custom YAML datasets much
easier than having to set envvars.

The caching parser being stateful, it's protected by an optional lock
seems like the best way to make caching thread-safe. When only using a
single thread, or using thread-local parsers, caching can be disabled
by using a `contextlib.nullcontext` as lock.

Customization
-------------

Public APIs are provided both to instantiate and tune parsers, and to
set the global parser. Hopefully this makes evaluating proposed
parsers as well as evaluating & tuning caches (algorithm & size)
easier. Even more so as we should provide some sort of evaluation CLI
in #163.

Caches
------

In the old API, package-provided API could only be global and with a
single implementation as it had to integrate with the toplevel parsing
functions. By reifying the parsing job, a cache is just a parser which
delegates the parse if it doesn't have a hit.

This allows more easily providing, testing, and evolving alternative
cache strategies.

Bulk APIs
---------

The current parser checks rules (regexes) one at a time on the input,
but there are advanced regex APIs which can check a regex *set* and
return which one(s) matched, allowing much more efficicent bulk
matching e.g. google's re2, rust's regex.

With the old scheme, this would be a pretty significant change in use
/ behaviour, obviating the use of the ""parsers"" with no
recourse. Under the new parsing scheme, these can just be different
""base"" parsers, they can be the default, they can be cached, and users
can instantiate their own parser instead.

Misc
----

The new API's UA extractor pipeline supports `patch_minor`, though
that requires excluding that bit from the tests as there are
apparently broken test cases around that
item (ua-parser/uap-core#562).

Init Helpers
============

Having proper parsers is the opportunity to allow setting parsers at
runtime more easily (instead of load-time envvars), however optional
constructors (classmethods) turns out to be iffy from an API and
typing perspective both.

Instead have the ""base"" parsers (the ones doing the actual parsing of
the UAs) just take a uniform parsed data set, and have utility loaders
provide that from various data sources (precompiled, preformatted, or
data files). This avoids redundancy and the need for mixins /
inheritance, and mypy is *much* happier.

Legacy Parsers -> New Matchers
==============================

The bridging of the legacy parsers and the new results turned out to
be pretty mid.

Instead, the new API relies on similar but better typed matcher
classes, with a slightly different API: they return `None` on a match
failure instead of a triplet, which make them compose better in
iteration (e.g. can just `filter` them out).

Add a `Matchers` alias to carry them around (a tuple of lists of
matchers) for convenience, as well as as base parser parameter.

Also clarify the replacer rules, and hopefully implement the thing
more clearly.

Fixes #93, fixes #142, closes #116",False,1454,1357,97,0.5601374570446735,0.8316151202749141,0.8006872852233677,2142,987,1515,51,2.902439024390244,61.923340976116535,28.09090909090909,44.27272727272727,243.81057955934077,3.3406795224977044,1686.3858445567216,93.68810247537344,0.08127019318644693
116,b408a13161af180a14ad389ed8b8e9135870ca1b,masklinn,2024-02-06 19:08:35+00:00,"Add typechecker

Remove partial typing on the legacy API whose only effect is to break
typechecking.

Fixes #179",False,72,66,6,,,,2142,987,1515,51,2.902439024390244,61.923340976116535,28.09090909090909,44.27272727272727,243.81057955934077,3.3406795224977044,1686.3858445567216,93.68810247537344,0.08127019318644693
117,e719a7ef9b003e8bd901d55584d3d5c82ed6d4d3,masklinn,2024-02-06 19:08:35+00:00,"Add an re2-based parser

Requires splitting out some of the testenvs, as re2 is not available
for pypy at all, and not yet for 3.12.

Uses `re2.Filter`, which unlike the C++ `FilteredRE2` bundles
prefiltering, using an `re2.Set` so likely less efficient than
providing one's own e.g. aho-corasick, but avoids having to do that.

At first glance according to pytest's `--durations 0` this is quite
successful (unlike using `re2.Set` which was more of a mixed bag):

```
2.54s call     tests/test_core.py::test_devices[test_device.yaml-basic]
2.51s call     tests/test_core.py::test_ua[pgts_browser_list.yaml-basic]
2.48s call     tests/test_legacy.py::TestParse::testPGTSStrings
2.43s call     tests/test_legacy.py::TestParse::testStringsDevice
0.95s call     tests/test_core.py::test_devices[test_device.yaml-re2]
0.55s call     tests/test_core.py::test_ua[pgts_browser_list.yaml-re2]
0.18s call     tests/test_core.py::test_ua[test_ua.yaml-basic]
0.16s call     tests/test_legacy.py::TestParse::testBrowserscopeStrings
0.10s call     tests/test_core.py::test_ua[test_ua.yaml-re2]
```

While the ""basic"" parser for the new API is slightly slower than the
legacy API (browserscope does use test_ua.yaml so that matches) the
re2 parser is significantly faster than both:

- 60% faster on test_device.yaml (~2.5s -> 1s)
- 80% faster on pgts (2.5s -> 0.5s)
- 40% faster on browserscope (0.16 -> 0.1)

This is very encouraging, altough the memory consumption has not been
checked (yet).

Fixes #149, kind-of",False,85,84,1,0.4117647058823529,0.5882352941176471,0.5882352941176471,2219,1039,1576,58,2.984126984126984,62.4306010647585,26.666666666666668,41.833333333333336,227.81732078602565,3.2185395622895623,1553.9617336998426,86.33120742776903,0.07593910692867523
118,9960dbdf00c640664ccd0229e93d1bf6fcefd8ac,masklinn,2024-02-11 19:36:28+00:00,"Add benchmarking scripts

useragents.txt sample file kindly provided by @DailyMats out of
DailyMotion's data (2023-04-26).

The provided scripts allow:

- Testing the cache hit rate of various cache configuration (algorithm
  and size) on sample files, this script uses a dummy parser and is
  thus extremely fast.
- Benchmarking the average entry processing of various parser
  configurations (base parser + cache algoritm + cache size) on sample
  files, this is a much slower script but provides a a realistic
  evaluation, and allows using custom rules (`regexes.yaml` files) to
  check their impact on the performance of a given base parser.

Also added a script for testing threaded parsing, as expected this
gets 0 gain over the normal stuff because of the GIL (and re2
seemingly doesn't release the GIL either, though I don't know how
beneficial it would be at ~30us per call).

May be more useful with 3.13, or possibly with a regex-based extension
releasing the GIL, at least the basis for testing things out will be
here.",False,75592,75591,1,0.1564625850340136,0.7244897959183674,0.8469387755102041,2651,1225,1932,73,3.1142857142857143,60.8922715589029,27.466666666666665,42.6,231.27976323135326,3.410779362249951,1522.3636673511076,84.5757592972838,0.07709325441045108
119,fa27574515fb236bdc817a188a87bee88bdc98d1,masklinn,2024-02-11 20:22:00+00:00,"Default to re2 parser is available

After benchmarking, the results are out, at least on the current
sample file:

First, re2 is ridiculously faster than the basic parser, even with
tons of caching. re2 does benefit from caching, but it's so fast that
it needs very high hitrates (so a very large cache) for the caching to
have a real impact, it's fast enough that at low hitrates (small
sizes) the cache does slow down parsing visibly which is not the case
of the basic parser.

Second, LRU is confirmed to be a better cache replacement policy than
clearing (which... duh), it's not super sensible at very low sizes but
at 100 entries it starts really pulling ahead, so definitely the
better default at 200 (where even with the overhead of the more
layered approach it's ahead of the legacy parser and its immutable 20
entries clearing cache).

The locking doesn't seem to have much impact without contention, and
even contended the LRU seems to behave way better than the clearing
cache still. So fallback onto locked LRU if re2 is not available.",False,19,14,5,1.0,1.0,1.0,2660,1233,1939,73,3.1214285714285714,60.484541039515875,27.666666666666668,42.8,231.9967557314975,3.4441126955832844,1523.2391561013242,84.6243975611847,0.07733225191049915
120,16c1324578c5c4b6fc1617757ebb5161f75b82b9,masklinn,2024-02-18 19:20:30+00:00,"Add support for lazy matchers

Add lazy builtin matchers (with a separately compiled file), as well
as loading json or yaml files using lazy matchers.

Lazy matchers are very much a tradeoff: they improve import speed (and
memory consumption until triggered), but slow down run speed, possibly
dramatically:

- importing the package itself takes ~36ms
- importing the lazy matchers takes ~36ms (including the package, so
  ~0) and ~70kB RSS
- importing the eager matchers takes ~97ms and ~780kB RSS
- triggering the instantiation of the lazy matchers adds ~800kB RSS
- running bench on the sample file using the lazy matcher has
  700~800ms overhead compared to the eager matchers

While the lazy matchers are less costly across the board until they're
used, benching the sample file causes the loading of *every* regex --
likely due to matching failures -- has a 700~800ms overhead over eager
matchers, and increases the RSS by ~800kB (on top of the original 70).

Thus lazy matchers are not a great default for the basic parser.
Though they might be a good opt-in if the user only ever uses one of
the domains (especially if it's not the devices one as that's by far
the largest).

With the re2 parser however, only 156 of the 1162 regexes get
evaluated, leading to a minor CPU overhead of 20~30ms (1% of bench
time) and a more reasonable memory overhead. Thus use the lazy matcher
fot the re2 parser.

On the more net-negative but relatively minor side of things, the
pregenerated lazy matchers file adds 120k to the on-disk requirements
of the library, and ~25k to the wheel archive. This is also what the
_regexes and _matchers precompiled files do. pyc files seem to be even
bigger (~130k) so the tradeoff is dubious even if they are slightly
faster.

Fixes #171, fixes #173",False,590,452,138,1.0,1.0,0.6293103448275862,2957,1377,2183,73,2.965909090909091,58.14115427948571,28.875,45.3125,247.1964162559924,3.58673735374103,1602.269202218465,89.01495567880362,0.08239880541866411
121,7da56fdc88654e939a4e9ac8a8d5764d9aaabae5,masklinn,2024-02-20 19:41:12+00:00,"run ruff in default configuration and swap flake8 and black out

The codebase is so small that it doesn't seem any faster, but it's
hype and then we can enable a bunch more checks, especially isort
which is currently dearly missing.

Fixes #174",False,68,32,36,1.0,1.0,0.8333333333333334,2951,1372,2178,73,2.965909090909091,58.331113626169376,28.875,45.3125,247.1964162559924,3.58673735374103,1602.269202218465,89.01495567880362,0.08239880541866411
122,8d4e624d36f150fec30959b3183cb80008a1e12d,masklinn,2024-02-20 19:41:12+00:00,"Configure ruff beyond the basics

Especially isort, shame it's not part of format but...",False,107,60,47,,,,2954,1372,2181,73,2.965909090909091,58.32113935923845,28.875,45.3125,247.1964162559924,3.58673735374103,1602.269202218465,89.01495567880362,0.08239880541866411
123,9e667cb53472dc55000853118c3fdfa228e0f6ba,masklinn,2024-02-27 19:56:46+00:00,"Split Parser and reorganise package

Parser turns out to not really make sense as a superclass / ABC: it
really only has one useful method, and because parsers use delegation
there's no real way to override the utility methods / shortcuts, so
they're only useful on the caller / client side but they constrain the
implementor (who has to extend the ABC and then possibly deal with
multiple-inheritance shenanigans).

Making the core object just a callable protocol instead makes the
implementation somewhat simpler and more flexible (e.g. just a
function or HoF can be a ""parser""), however the convenient utility
methods *are* important for end users and should not be discounted.

For that, keep a wrapper `Parser` object which can be wrapped around a
""parser"" in order to provide the additional convenience (similar to
the free functions at the root). Importantly, `Parser` methods can
also be used as free functions by passing a ""parser"" as `self`, they
are intended to be compatible. It doesn't work super well from the
typechecking perspective, but it works fine enough.

Consideration was given to making the free functions at the package
root parametric on the parser e.g.

    def parse(ua: str, resolver: Optional[Resolver] = None, /) -> ParseResult:
        if resolver is None:
            from . import parser as resolver

        return resolver(ua, Domain.ALL).complete()

but that feels like it would be pretty error prone, in the sense that
it would be too easy to forget to pass in the resolver, compared to
consistently resolving via a bespoke parser, or just installing a
parser globally.

Also move things around a bit:

- move matcher utility functions out of the core, un-prefix them since
  we're using `__all__` for visibility anyway
- move eager matchers out of the core, similar to the lazy matchers

Fixes #189",False,773,404,369,0.8421052631578947,1.0,1.0,2989,1398,2199,74,2.943820224719101,60.58574503017753,24.789473684210527,38.473684210526315,201.89755889853615,3.1519893505187624,1199.2452525972121,66.62473625540069,0.06729918629951202
124,b9f74ec9f3f9560bec2a6c4e4a8cad9e58b73ecd,masklinn,2024-02-27 21:57:29+00:00,"Don't just ignore core tests when re2 is not importable

This makes the import failure (and possibly test failures) completely
invisible in ""misconfigured"" environments, which is exactly what
happened in the github action where I forgot to add the dependency.

Fixes #191",False,53,35,18,,,,2994,1400,2205,74,2.943820224719101,60.54085994480586,24.789473684210527,38.473684210526315,201.89755889853615,3.1519893505187624,1199.2452525972121,66.62473625540069,0.06729918629951202
125,5595b2b69d3685a84bd10570b24b77f911a63d65,masklinn,2024-02-28 16:07:46+00:00,"Fix typing of Parser's unbound methods

All credit due to ""Finite State Machine"" on the typing gitter, they're
the one who had the idea of trying to type `self` in case that would
make mypy happy. Which it absolutely does.

This does make that use pattern easier to recommend, as it's fully
typed as well.",False,22,14,8,1.0,1.0,1.0,3000,1403,2209,73,2.9329608938547485,60.79894403656804,24.94736842105263,38.63157894736842,202.46360560917634,3.1783051399924465,1199.9364279263305,66.66313488479614,0.06748786853639209
126,670fdf602311fd657093e47cc2541d2915f04778,masklinn,2024-02-28 21:07:58+00:00,"Merge all script thingies at the package toplevel

Using subcommands at the top of the package is simpler and easier than
using individual script submodules.

Merger is mostly direct and ad-hoc, there was a minor amount of
deduplication (imports and the `file` argument, via parent parsers)
but that's about it so there may be opportunities for reducing the
size of the runner if someone bothers looking into it.",False,855,422,433,1.0,0.0,0.0,2989,1400,2202,74,2.971590909090909,60.433216380695015,27.470588235294116,43.1764705882353,234.67685092866026,3.2124762051232643,1444.1075427938863,80.22819682188258,0.07822561697622007
127,c0abcbba4646e74c61c35bda8a2082bfb691d063,masklinn,2024-02-28 21:07:58+00:00,"Add support for threadlocal caches

Doesn't seem super useful, as the GIL means a cache lock might not get
to contend that much. However it might find utility with the free
threaded interpreter eventually. Anyway it's not huge and it's not
very complex, although the contextvars API is not great for lazy
initialisation.

Still even though the initialisation looks like it could lead to
redundant inits (similar to the clearing cache which can get
multi-cleared) it should be safe: different threads hitting `cache`
concurrently will each hit their own lookup failure, and initialise
their local cache, and set their personal contextvar.

For a var to get double-init would require the same thread to be
concurrent with itself, which is not possible.

Fixes #180",False,39,35,4,0.9285714285714286,1.0,0.8571428571428571,3020,1418,2219,74,2.9281767955801103,60.247663707376645,27.647058823529413,43.35294117647059,235.84858798726734,3.232434188316542,1456.537703289009,80.91876129383384,0.07861619599575576
128,0367c3bdcba43ce980dc90e9b0fb5cca6d9caa2b,masklinn,2024-03-01 19:58:04+00:00,ruff 0.3 formatting changes,False,15,7,8,0.0,0.0,0.3333333333333333,3019,1418,2218,74,2.9281767955801103,60.1362289528633,27.647058823529413,43.35294117647059,235.84858798726734,3.232434188316542,1456.537703289009,80.91876129383384,0.07861619599575576
129,b45380d348af5fc52b96dc1b8ae0bbeea569b336,masklinn,2024-03-12 21:27:29+00:00,"Add S3 and SIEVE, make S3 the default, remove clearing and locking

Closes #143

Memory Shavings
===============

It was the plan all along, but since I worried about the overhead of
caches it made no sense to keep the result objects (which would
compose the cache entries) as dict-instances, so they've been
converted to `__slots__` (manually since `dataclasses` only supports
slots from 3.10).

Sadly this requires adding explicit `__init__` to every dataclass
involved as default values are not compatible with `__slots__`.

Cache Policies
==============

S3Fifo as default
-----------------

Testing on the sample file taught me what cache people have clearly
known for a while: lru is *awful*. You can do worse, but it takes
surprisingly little to be competitive with it.

S3Fifo turns out to have pretty good performances while being
relatively simple. S3 is not perfect, notably like most CLOCK-type
algorithm its eviction is O(n) which might be a bit of an issue in
some cases. But until someone complains...

As a result, S3 is now the cache policy for the basic cache (if `re2`
is not available) replacing LRU, and it's also exported as `Cache`
from the package root.

From an implementation perspective, the original exploratory version
(of this and most FIFOs tested) used an ordered dict as an indexed
fifo but the memory consumption is not great, the final version uses a
single index dict and separate deques for the FIFOs, an idea found in
@cmcaine's s3fifo which significantly compacts memory requirements
(though it's still a good 50% higher than a SIEVE or OD-based LRU of
the same size).

LFU
---

Matani et al's O(1) LFU had a great showing on hitrates and perfs
(though slightly worse than s3 still), however the implementation
still required the addition of some form of aging, which was not worth
it. Theoretically a straight LFU could work for offline use but...
that's a pretty pointles use as in that case you can just parse each
unique value once and splat by the entry count.

W-TinyLFU is the big modern cheese in the field, but I opted to avoid
it for now: it's a lot more complicated than the existing caches
(requiring a bloom filter, a frequency sketch or counting bloom
filter, an SLRU, and an LRU), plus a good implementation clearly
requires a lot of bit twiddling (for the bloom filters / frequency
sketch), which Python is not great at from a performance point of view
(I tried implementing CLOCK using a bytearray for bitmap and it was
crap).

SIEVE
-----

SIEVE is consistently a few percentage point below S3, and it's
lacking a few properties (e.g. scan resistance), however it does have
one interesting property which S3 lacks: at small cache sizes it has
less memory overhead than LRU, despite Python-level linked list and
nodes where LRU gets to use the native-coded OrderedDict, with a
C-level linked list and a bespoke secondary hashmap. And it does that
with the hitrates of an LRU double the size until we get to caches a
significant fraction the size of uniques (5000). It also features a
truly thread-safe unsynchronized cache hit.

Note: while the reference paper uses a doubly linked list, this
implementation uses a singly linked list for the sieve hand. This
means the hand is a pair of pointers but it saves 11% memory on the
nodes (72 -> 64 bytes), which gets significant as the size of the
cache increases.

Other Caches
------------

A number of simple cache implementations were temporarily
~~embarassed~~ implemented for testing:

- random
- fifo
- lp-fifo / fifo-reinsertion
- CLOCK (0 to 2), which is a different implementation of the same
  algorithm, tried a bitmap, it was horrible, an array of counters was
  competitive with lp-fifo using an ordereddict (perf-wise, I had yet
  to start looking at memory use).
- QD-LP-FIFO which is not *really* an algorithm but was an
  intermediate stations to S3 (the addition of a fixed-size
  probationary fifo and a ghost cache to an LP-FIFO, S3 is basically a
  more advanced and flexible version)

The trivial caches (RR, fifo) were worse than LRU but very simple, the
others were better than LRU but at the end of the day didn't really
pull their weight compared to alternatives (even if they were easy to
implement).

An interesting note here is that the quick-demotion scheme of S3 can
be put in front of LRU to some success (it does improve hit rates
significantly as the sample trace has a large number of one hit
wonders), but without excellent reasons to use an LRU on the back end
it doesn't seem super useful.

Thread Safety
=============

The `Locking` wrapper has been removed, probably for ever: testing
showed that the perf hit of a lock in GILPython was basically nil (at
least for the amount of work ua-python has to do, on uncontended
locks). Since none of the caches are intrinsically safe anymore (and
the clearing cache's lack of performance was a lot worse than any
synchronisation could be) it's better to just have synchronised
caches.

Thread-local cache support has however been added in case, and will be
documented, in case it turns out to be of use to the !gil mode (it
basically trades memory and / or hitrate for lower contention).

s3fifo implementation notes
===========================

The initial implementation of S3Fifo was done using ordered dicts as
indexed fifos, this was easy but after adding some memory tracking it
turns out to have a lot of overhead, at around 250% the overhead of
Lru (which makes sense, it needs 2 ordered dicts of about the same
size, plus a smaller ordered dict, plus entry objects to track
frequency).

An implementation based on deques is a lot more reasonable, it only
needs a single dict and CPython's deques are implemented as unrolled
linked lists of order 64 (so each link of the list stores 64
elements). It still needs about 150% of the Lru space but that's a lot
more reasonable. At n=5000 after a full run on the sample file the
measurements from tracemalloc indicates 785576 bytes, with
`sys.getsizeof` measurements of the different elements indicating:

- 415152 bytes for the index dict
-   4984 bytes for the small cache deque
-  37720 bytes for the main cache deque
-  38248 bytes for the ghost cache deque
- 280000 bytes for the CacheEntry objects

For LRU this is 500488 bytes of which 498752 are attributed to the
`OrderedDict`.

It seems difficult to go below: while in theory the ~9500 entries
should fit in a dict of class 14, as the dicts have a lot of traffic
(keys being added and removed) — and possibly because they're never
iterated so this is not a concern (have not checked if this is a
consideration) — cpython uses a dict one size larger to compact less
often[^dict]. However the issue also occurs in the LRU so it's
""fair"" (while the OrderedDict has a Python implementation which uses
two maps, it also has a native implementation which uses an internal
ad-hoc hashmap rather than a full blow dict, so it doesn't quite have
double-hashmap overhead).

Note that this only measures *cache overhead*, so the cache keys are
not counted, and all parses result in a global singleton:

- user agent strings are around 195 bytes on average
- parse results, user agent, and os objects are 72 bytes
- device objects are 56 bytes
- the extracted strings total about 200 bytes on average[^interning]

That's some 600 bytes per cache entry, or 3000000 bytes
for a 5000 entries cache. In view of that, the cache overhead hardly
seems consequential, but still.

[^dict]: Roughly python's dict has power of two size classes, a size
         class `n` leads to a total capacity of `1<<n` and an
         effective capacity of `(1<<n<<1)/3`. The dict object is
         composed of a sparse array of indices sized to the total
         capacity, these indices can be u8, u16, u32, or u64 depending
         on the effective capacity. The dict object is then composed
         of a dense array of entries sized to the effective capacity.
         An entry is generally three pointers (hash, key, value) but
         can be just two as an optimisation e.g. for string keys (as
         strings memoise their own hash). Thus the space needed for a
         dict of class `n` is `sizeof(idx) * (1 << n) + (2|3) * 8 *
         ((1<<n<<1)/3)` (plus a few dozen bytes of various metadata).
         Thus for a dict of size n, the way to get the minimum class
         is `ceil(log2(len * 3/2))`. As such a 5000 entries
         string-keyed dict (Lru) should be in size 13 and of size
         taking about 101kB, and a ~9500 entries dict (S3Fifo index)
         should be in size 14 taking about 202kB. These are what's
         observed by straight filling dicts to those sizes, but
         churning them a few hundred to thousand times (removing and
         adding keys, keeping their sizes constant) ends up one size
         class above. I've not confirmed it but it's likely because a
         dict of size 14 has an effective capacity of 10922, which
         means every ~1500 removals and insertions the dense array
         would need to be compacted, rehashed, and rewritten. By
         bumping over to class 15, this happens every 12000 cycles
         instead, at the cost of double the memory.

[^interning]: Technically it's around 500, but single-character
              strings are always interned and those are common for the
              version fields of UserAgent and OS (about 56% of them)
              and they account for most of the possible overhead, 2
              and 3 characters strings account for a further 24 and
              17%, though with diminishing returns: 2-char strings
              seems the most promising as 93 of them are represented
              (91 being two-digit numbers) and almost all of them more
              than once (the sample file has only two singleton
              two-char strings, only one of which is a number) by
              comparison all 3-character strings are numbers but 57
              out of 251 are singletons.",False,422,276,146,0.7169811320754716,0.839622641509434,0.5660377358490566,3149,1543,2348,77,3.0,58.946504183568166,29.294117647058822,45.35294117647059,250.26071114375276,3.363716349010467,1666.4879835235204,92.58266575130669,0.08342023704791757
130,428200321d7c4dc5bdbb961c9fafcc4d038b2971,masklinn,2024-03-16 19:16:24+00:00,"Suppress ""Compile called before Add"" in re2.Filter

When compiling an empty set, ``FilteredRE2::Compile`` logs a warning
to stderr which can not be suppressed (google/re2#485).

Replace `re2.Filter` by a null object if the corresponding matchers
list is empty: not only do we need to skip `Filter.Compile` to
suppress the warning message, we need to skip `Filter.Match` or the
program will segfault (google/re2#484). Using a null object seems
safer and more reliable than adding conditionals, even if it requires
more code and reindenting half the file.

Doing this also seems safer than my first instinct of trying to use
low-level fd redirection: fd redirection suffers from race
conditions[^thread] and could suffer from other cross-platform
compatibility issues (e.g. does every python-supported OS have stderr
on fd 2 and correctly supports dup, dup2, and close?)

[^thread]: AFAIK CPython does not provide a python-level GIL-pin
    feature (even less so with the GILectomy plans), so we have no way
    to prevent context-switching and any message sent to stderr by
    sibling threads would be lost",False,66,47,19,0.47058823529411764,0.0,1.0,3176,1564,2369,78,3.0,60.30690786763806,28.0,43.333333333333336,237.64981955279376,3.210176551843219,1574.68080652243,87.48226702902389,0.0792166065175979
131,6c3fce79a6b2c535b4b7f66c18ae4c4b0a79b679,masklinn,2024-03-26 19:20:16+00:00,"Initial doc: installation, quickstart, API doc

Trimmed the readme, and added a bit on re2.

Had to update a ton of docstrings to have a decent API doc.

Also removed a bunch of leftover references to parsers, and removed
the completely useless `Parse` bit from `ParseResult`,
`PartialParseResult`, and `DefaultedParseResult`, which further
contributed to the churn and every file in the project being touched,
as it required editing files without docstrings.

Fixes #182",False,908,724,184,0.0,1.0,1.0,3362,1606,2399,86,2.9844559585492227,64.69728380310445,26.526315789473685,41.05263157894737,225.14193431317304,3.0412198912198916,1491.802869337039,82.87793718539105,0.07504731143772432
132,7ee2823cab30173d777d42dabeda47897306d5bb,masklinn,2024-03-26 19:20:16+00:00,"add caching and resolver guides

Fixes #183",False,152,139,13,,,,3362,1606,2399,86,2.9844559585492227,64.69728380310445,26.526315789473685,41.05263157894737,225.14193431317304,3.0412198912198916,1491.802869337039,82.87793718539105,0.07504731143772432
133,63eda176915e85c73fb84fc16d41e5a78f0ff26d,masklinn,2024-03-26 19:20:16+00:00,"Add advanced cache documentation and belady approximator to hitrates

- belady is useful to get *some* sort of semi-realistic expectation of
  a cache, as the maximum hit rate is only somewhat realistic as cache
  sizes get close to the number of unique entries
- caches have been busting my balls and I'd assume the average user
  doesn't have the time and inclination to bother, so some guidance is
  useful
- as caching is generally a CPU/memory tradeoff, while ``hitrates``
  provides a cache overhead estimation giving users a better grasp of
  the implementation details and where the overhead comes from is
  useful
- plus I regularly re-wonder and re-research and re-discover the size
  complexity of various collections so this gives me the opportunity
  to actually write it down for once",False,453,442,11,0.8285714285714286,1.0,0.6571428571428571,3419,1644,2438,96,3.0,64.62830518689717,27.263157894736842,41.94736842105263,232.64108391299214,3.120167259640944,1630.8732138648193,90.60406743693439,0.07754702797099737
134,854c12f28a94ccca3eddf00ae180fb3f5533bb2a,masklinn,2024-03-26 19:59:58+00:00,"Avoid eviction on entry replacement

`*Result` objects are immutable, thus if a `PartialResult` gets filled
further it has to be re-set into the cache.

This does not change the cache size, but because the current S3 and
SIEVE implementations unconditionally check the cache size on
`__setitem__` they may evict an entry unnecessarily.

Fix that: if there is already a valid cache entry for the key, just
update it in place instead of trying to evict then creating a brand
new entry.

Also update the LRU to pre-check for size (and presence as well), this
may make setting a bit more expensive than post-check but it avoids
""wronging"" the user by bypassing the limit they set.

Fixes #201",False,44,20,24,0.0,0.0,0.0,3414,1647,2441,96,3.0253807106598987,64.50546938473013,27.94736842105263,42.89473684210526,239.61991647364414,3.120350008178956,1697.4675671935906,94.30375373297727,0.0798733054912147
