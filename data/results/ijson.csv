ID,hash,author,date,commit_message,is_merge,lines_changed,insertions,deletions,dmm_unit_size,dmm_unit_complexity,dmm_unit_interfacing,radon_LOC,radon_LLOC,radon_SLOC,radon_comments,radon_avg_cc,radon_avg_MI,radon_avg_vocabulary,radon_avg_length,radon_avg_volume,radon_avg_difficulty,radon_avg_effort,radon_avg_time,radon_avg_bugs
0,89196ca6cbe3bfa7f6117b5b5eb825266ae1a701,Ivan Sagalaev,2010-08-26 09:21:54+00:00,Initial commit,False,169,169,0,0.3333333333333333,0.3333333333333333,0.2564102564102564,110,66,94,4,2.5714285714285716,84.89047926431712,3.5,4.25,13.29673254077141,0.7678571428571429,31.729245505506118,1.7627358614170066,0.0044322441802571375
1,9630d97534fdef30ad42f34115252fb723d7a965,Ivan Sagalaev,2010-09-01 09:06:47+00:00,Keeping nesting context in 'parse' iterator.,False,20,19,1,0.0,0.0,1.0,128,82,110,4,3.0,83.18235889091956,5.5,8.0,31.98619634800686,0.9732142857142857,105.0857921836372,5.838099565757622,0.01066206544933562
2,ee52cbfb85ce47a2184ed51917ab81b0af130868,Ivan Sagalaev,2010-09-01 12:34:49+00:00,"Uniform iterator values: prefix, event, value.
Prefix now accounts for nested arrays.",False,27,16,11,0.0,0.0,1.0,133,88,115,5,3.125,83.17992849953262,5.5,9.0,36.23412386145044,1.0625,132.01461838493134,7.334145465829518,0.012078041287150149
3,53881c2032416f7fef893af514a070af3f8098e5,Ivan Sagalaev,2010-09-01 12:37:36+00:00,Version 0.2.0,False,2,1,1,,,,133,88,115,5,3.125,83.17992849953262,5.5,9.0,36.23412386145044,1.0625,132.01461838493134,7.334145465829518,0.012078041287150149
4,7ce209b0caceb703c268a4726a3452ccc551ace2,Ivan Sagalaev,2010-09-02 14:16:56+00:00,ObjectBuilder. I just wrote this code and it scares the hell out of me...,False,25,25,0,0.30434782608695654,0.30434782608695654,0.30434782608695654,158,110,137,6,3.3636363636363638,80.26290095144684,6.8,12.0,46.19511909262191,1.35,148.63124471659893,8.257291373144387,0.015398373030873968
5,5ca3fa5b7da7b56b68621e1794c79b76dd6a4408,Ivan Sagalaev,2010-09-04 23:17:08+00:00,Tests,False,102,102,0,0.32142857142857145,1.0,1.0,260,139,225,8,2.764705882352941,78.17408331626781,6.5,11.0,40.817860672072285,1.2083333333333333,125.02033464460946,6.945574146922748,0.013605953557357428
6,4fcf72f7e5e2172ea8038eacd40db0b905e4bb8a,Ivan Sagalaev,2010-09-04 23:26:01+00:00,Tests for ObjectBuilder,False,28,28,0,0.2,1.0,1.0,288,151,251,8,2.7,77.36075681272564,6.5,11.0,40.817860672072285,1.2083333333333333,125.02033464460946,6.945574146922748,0.013605953557357428
7,0f0ebedd7d5fc93755a6b0f70e0f7ac4fb6cc9d2,Ivan Sagalaev,2010-09-05 19:13:55+00:00,Nice fat docstrings,False,89,89,0,,,,377,155,253,10,2.7,82.79491501626632,6.5,11.0,40.817860672072285,1.2083333333333333,125.02033464460946,6.945574146922748,0.013605953557357428
8,263f32ac9f0654499502e1e956e09095eef2dbf9,Ivan Sagalaev,2010-09-05 19:14:59+00:00,Removed ParseCancelledError because it cannot happen.,False,8,1,7,0.5,0.5,0.5,371,150,248,10,2.7777777777777777,82.97363218984486,6.333333333333333,10.5,38.30388435534413,1.1923076923076923,113.5881518215701,6.310452878976116,0.012767961451781376
9,defef3f0f2b10ee40dbe18d9281995c5369af892,Ivan Sagalaev,2010-09-05 19:16:09+00:00,Version 0.3.0,False,2,1,1,,,,371,150,248,10,2.7777777777777777,82.97363218984486,6.333333333333333,10.5,38.30388435534413,1.1923076923076923,113.5881518215701,6.310452878976116,0.012767961451781376
10,a8145524825786bfc8b4669b87a97e8facdc69aa,Ivan Sagalaev,2010-09-10 15:49:43+00:00,Coroutine-related utils,False,52,52,0,1.0,0.5555555555555556,1.0,423,182,277,10,2.9047619047619047,80.99793732943762,9.333333333333334,14.0,60.7657138195234,1.6544289044289044,271.7837458225136,15.099096990139644,0.02025523793984113
11,9de20f71143b38f819d5e2de6336f033ae03acf5,Ivan Sagalaev,2010-09-10 15:50:18+00:00,Version 0.4.0,False,2,1,1,,,,423,182,277,10,2.9047619047619047,80.99793732943762,9.333333333333334,14.0,60.7657138195234,1.6544289044289044,271.7837458225136,15.099096990139644,0.02025523793984113
12,d0b05a42c159b3f5be501c01f77c1671e6db2cae,Ivan Sagalaev,2010-09-17 21:19:18+00:00,Implemented iterator yielding native objects from a JSON stream,False,158,106,52,0.17073170731707318,0.5853658536585366,1.0,477,203,323,10,2.9565217391304346,80.82292146404428,10.166666666666666,15.5,71.40051547542906,1.4194139194139195,278.5272897962898,15.473738322016098,0.02380017182514302
13,c140b14f3c2c420b31b0ca3e5597872400851ddb,Ivan Sagalaev,2010-09-18 14:00:48+00:00,Version 0.5.0,False,2,1,1,,,,477,203,323,10,2.9565217391304346,80.82292146404428,10.166666666666666,15.5,71.40051547542906,1.4194139194139195,278.5272897962898,15.473738322016098,0.02380017182514302
14,511c6566b17bd859066d6beddacffad95a7447a4,Ivan Sagalaev,2010-09-27 11:54:56+00:00,Don't check for YAJL_CANCELLED as it mever happens,False,2,1,1,,,,477,203,323,10,2.9565217391304346,80.82723031555878,10.0,15.5,70.94829389556425,1.445868945868946,284.996520843419,15.833140046856611,0.023649431298521414
15,e1bafa7cde78c7c1332fc45e9d79f1f7088962f8,Ivan Sagalaev,2010-09-27 11:55:36+00:00,Removed \n from simple test JSON strings,False,8,2,6,,,,473,203,319,10,2.9565217391304346,80.84377416847845,10.0,15.5,70.94829389556425,1.445868945868946,284.996520843419,15.833140046856611,0.023649431298521414
16,5167392aa68a37ed66564664ed0d18c911dc386a,e.generalov@gmail.com,2010-09-27 11:57:16+00:00,Don't unpack tuples in the internal loop in basic_parse,False,4,2,2,,,,473,203,319,10,2.9565217391304346,80.84377416847845,10.0,15.5,70.94829389556425,1.445868945868946,284.996520843419,15.833140046856611,0.023649431298521414
17,a0517ea2e892c70474d14b02668788b86ee3caea,e.generalov@gmail.com,2010-09-27 14:06:50+00:00,* fix parser,False,22,11,11,0.0,0.0,0.0,473,204,320,10,2.9565217391304346,80.85296681046643,9.833333333333334,15.166666666666666,68.81548897563383,1.306980056980057,233.1562767548393,12.953126486379963,0.022938496325211274
18,63bf847081d20602cc0a927e3ea2b8ba4674f70f,e.generalov@gmail.com,2010-09-27 14:33:45+00:00,raise JSONError for empty JSON stream,False,2,2,0,0.0,0.0,0.0,475,206,322,10,3.0,80.78619245607486,10.0,15.5,70.94829389556425,1.445868945868946,284.996520843419,15.833140046856611,0.023649431298521414
19,66bb8a6770520c184623670396f47fbf1041eb38,e.generalov@gmail.com,2010-09-27 17:00:45+00:00,fix infinite loop if parse empty string,False,4,4,0,0.0,0.0,0.0,479,210,326,10,3.0869565217391304,80.64300324301651,10.166666666666666,16.5,76.4879783166794,1.4908424908424909,325.40462597638225,18.078034776465678,0.02549599277222647
20,097804b54617cc859d9a0c8fc0832c9c990ec330,Ivan Sagalaev,2010-09-28 09:30:05+00:00,"Simplification of the main look in basic_parse.
Tests for incomplete and empty input buffers.",False,56,35,21,1.0,1.0,1.0,493,216,338,10,2.740740740740741,80.35536524237236,10.5,15.833333333333334,73.98967649125888,1.529840848806366,326.7321254512496,18.151784747291643,0.02466322549708629
21,bf0af3cbb58ec55400bb9769252c8a571e081adc,e.generalov@gmail.com,2010-09-28 19:29:37+00:00,fix possible memory leak with yajl_get_error(),False,6,4,2,0.0,0.0,0.0,495,218,340,10,2.740740740740741,80.33125824770015,10.5,15.833333333333334,73.98967649125888,1.529840848806366,326.7321254512496,18.151784747291643,0.02466322549708629
22,d4989be2a12d6f047b9f9df38b8397411ab079e7,andrewimam@hotmail.com,2010-12-01 11:35:15+00:00,ctypes.cdll assume int return types and causes segfault on 64-bit (ptr truncation?),False,6,5,1,,,,499,221,343,10,2.740740740740741,79.58914725415426,10.5,15.833333333333334,73.98967649125888,1.529840848806366,326.7321254512496,18.151784747291643,0.02466322549708629
23,ad4e1d635fd4dd8cfcb2ac9f15eb3551c0e25ff9,Ivan Sagalaev,2010-12-03 13:31:32+00:00,Workaround for find_library on Ubuntu Hardy 64,False,8,8,0,,,,507,225,347,12,2.740740740740741,82.57458797969035,10.5,15.833333333333334,73.98967649125888,1.529840848806366,326.7321254512496,18.151784747291643,0.02466322549708629
24,6c32767e9587f7b47c434323ddbe7a5e28d351f7,Ivan Sagalaev,2010-12-03 13:35:13+00:00,Version 0.6.0,False,2,1,1,,,,507,225,347,12,2.740740740740741,82.57458797969035,10.5,15.833333333333334,73.98967649125888,1.529840848806366,326.7321254512496,18.151784747291643,0.02466322549708629
25,e95255b3563d15cf42832dd93a95c7f0e7204b1f,andrewimam@hotmail.com,2010-12-04 11:44:43+00:00,"fix yajl.get_error return pointer trunction
add threaded test case which seem to trigger the truncation
fix lib hardy check",False,52,48,4,1.0,1.0,1.0,552,262,384,12,2.289473684210526,80.61249698370129,10.5,16.333333333333332,74.78215774161946,1.6131741821396994,327.92084732679047,18.21782485148836,0.02492738591387315
26,891dcdefe7618fe6ff06e93daf59398222ca7f96,Ivan Sagalaev,2010-12-06 13:57:32+00:00,Version 0.7.0,False,2,1,1,,,,552,262,384,12,2.289473684210526,80.61249698370129,10.5,16.333333333333332,74.78215774161946,1.6131741821396994,327.92084732679047,18.21782485148836,0.02492738591387315
27,f9aaa8d3e6863762eb3ba3b4880a9bcd75661050,Ivan Sagalaev,2011-03-19 05:21:34+00:00,Fixing foreach to work with an empty string in prefix.,False,3,2,1,1.0,0.0,1.0,553,263,385,12,2.3157894736842106,80.55415541773556,10.5,16.333333333333332,74.78215774161946,1.6131741821396994,327.92084732679047,18.21782485148836,0.02492738591387315
28,5730bb0501f9c194e24e25d111af2e610a067789,Ivan Sagalaev,2011-03-21 04:40:47+00:00,Version 0.8.0,False,2,1,1,,,,553,263,385,12,2.3157894736842106,80.55415541773556,10.5,16.333333333333332,74.78215774161946,1.6131741821396994,327.92084732679047,18.21782485148836,0.02492738591387315
29,95d2a7574d9a20a0fd5521ea230b4344cac53d73,Michael Selik,2012-08-08 20:11:27+00:00,fix name of README file,False,2,1,1,,,,553,263,385,12,2.3157894736842106,80.55415541773556,10.5,16.333333333333332,74.78215774161946,1.6131741821396994,327.92084732679047,18.21782485148836,0.02492738591387315
30,8884f8f1f829f71ec30e2b0cc83ce2f8b839167d,Ivan Sagalaev,2012-09-05 23:16:47+00:00,"Implemented separate backend structrure, moved all yajl code into ijson/backends/yajl.py",False,551,279,272,1.0,1.0,1.0,560,267,388,12,2.25,81.97940648114597,9.142857142857142,14.0,60.100078729831516,1.4496336996336996,201.4090480757272,11.189391559762623,0.020033359576610506
31,bde6af19eab60b0c7495a13337bf98019ade58ba,Ivan Sagalaev,2012-09-05 23:24:27+00:00,Pure python backend,False,162,160,2,0.44776119402985076,0.34328358208955223,0.8134328358208955,718,415,530,12,2.7547169811320753,75.02172522284562,16.125,27.25,142.9230860840294,2.2742165242165244,903.0992544998344,50.17218080554636,0.04764102869467646
32,72bc700bc3fd97f2a4b2f2101f26920959e1b34a,Ivan Sagalaev,2012-09-06 09:03:22+00:00,Consolidate lexing in nextsymbol(),False,106,45,61,0.0,0.0,0.0,702,399,516,12,2.823529411764706,75.37307072065695,14.125,23.625,116.45489336541307,2.098116987179487,600.152283281091,33.34179351561617,0.038818297788471026
33,65df5815e1bcb0a83af97413b1884d23c2fda0a4,Ivan Sagalaev,2012-09-06 09:12:42+00:00,Moving call to string lexing into nextsymbol,False,15,7,8,0.0,0.0,,701,399,516,12,2.9,75.31282063198789,14.625,24.75,124.18657457064258,2.0993953962703964,652.2035798389135,36.23353221327298,0.04139552485688086
34,a66e10e8933cf33b5d48a1ccf9a575566196d7a9,Ivan Sagalaev,2012-09-06 09:50:23+00:00,Turn Reader into an iterator,False,19,11,8,1.0,1.0,1.0,704,401,518,12,2.823529411764706,75.27819975382228,14.625,24.75,124.18657457064258,2.0993953962703964,652.2035798389135,36.23353221327298,0.04139552485688086
35,9008f7b4c510da8db0709bde1eb90e397554e9db,Ivan Sagalaev,2012-09-06 09:58:13+00:00,Return terminating quote with strings,False,4,3,1,0.0,0.0,0.0,706,403,520,12,2.823529411764706,75.26065557328724,14.625,24.75,124.18657457064258,2.0993953962703964,652.2035798389135,36.23353221327298,0.04139552485688086
36,8cd7f67976ccc9daa4afe411cc543baa8ae9cda5,Ivan Sagalaev,2012-09-06 10:13:05+00:00,Split readuntil into two lexing functions for strings and for everything else,False,40,26,14,1.0,1.0,1.0,718,415,531,13,2.8076923076923075,75.7608703963877,14.625,24.625,123.47058451382217,2.0866113053613056,640.1944738858805,35.5663596603267,0.04115686150460739
37,9c6d3afe495ee9bc008032642eb5423b38ac8408,Ivan Sagalaev,2012-09-06 10:21:33+00:00,Ensure completeness of \-escapes with a regexp,False,4,1,3,1.0,1.0,0.0,716,413,529,13,2.7884615384615383,75.82758859795555,14.25,23.875,118.19739709473374,1.9827152014652014,551.1462211012965,30.61923450562759,0.039399132364911243
38,ee7decb8cc04dce68f727d622af4ee577861f59b,Ivan Sagalaev,2012-09-06 10:52:32+00:00,Restored accidentally broken default engine,False,2,1,1,,,,716,413,529,13,2.7884615384615383,75.82758859795555,14.25,23.875,118.19739709473374,1.9827152014652014,551.1462211012965,30.61923450562759,0.039399132364911243
39,629a25418720704d1139bfd7e45fe89031509091,Ivan Sagalaev,2012-09-06 10:53:08+00:00,Use built-in substring search instead of regexps. More efficient for strings with lots of \-escaped characters.,False,33,15,18,1.0,0.0,0.0,713,408,526,12,2.8076923076923075,75.13106426879376,15.375,26.25,134.94457157966835,2.199551936159079,789.7085493568534,43.87269718649186,0.04498152385988945
40,c578833c3121590f174991edec4dc239f5ef2b5e,Ivan Sagalaev,2012-09-06 11:09:51+00:00,More tests for strings,False,22,18,4,1.0,1.0,1.0,727,413,538,12,2.811320754716981,74.76544572326807,15.625,26.625,136.36139979581765,2.199551936159079,790.416963464928,43.912053525829336,0.04545379993193921
41,243a8b3ea62a088a1ce2eda3941d0dea258ed9b4,Ivan Sagalaev,2012-09-06 11:10:13+00:00,"Use [-1:1] instead of strip('""'). The latter removes *all* quotes from both ends.",False,4,2,2,,,,727,415,538,12,2.811320754716981,74.73083197805428,16.0,27.125,140.34024360536156,2.2794588989441933,875.2459719880909,48.62477622156061,0.046780081201787185
42,c5e7e2ba612ee7442680ef766b3a8396690a9984,Ivan Sagalaev,2012-09-06 11:18:31+00:00,Don't use invalid string for the incompleteness test,False,2,1,1,,,,727,415,538,12,2.811320754716981,74.73083197805428,16.0,27.125,140.34024360536156,2.2794588989441933,875.2459719880909,48.62477622156061,0.046780081201787185
43,ea16261f34a5238ee904f186b9cfda9c4d277d49,Ivan Sagalaev,2012-09-07 02:49:36+00:00,"lexem() now builds up self.buffer indefinitely and cleans it up only if
self.pos > BUFSIZE instead of on every lexem. Another speedup!",False,23,13,10,0.0,1.0,1.0,730,418,541,12,2.830188679245283,74.65874596188894,16.75,28.0,147.59913828897584,2.339858058608059,979.1819698962557,54.39899832756977,0.04919971276299194
44,c4ffca728a62f5ae7773a276a3338ef2d034c0b0,Ivan Sagalaev,2012-09-07 07:05:08+00:00,Use 16K buffer,False,2,1,1,,,,730,418,541,12,2.830188679245283,74.65874596188894,16.75,28.0,147.59913828897584,2.339858058608059,979.1819698962557,54.39899832756977,0.04919971276299194
45,db6bf6840b22e934cacfd95aed73dba255e788d1,Ivan Sagalaev,2012-09-07 07:15:38+00:00,Merge lexing of chars and numbers.,False,9,3,6,1.0,1.0,0.0,727,415,538,12,2.830188679245283,74.67894177176449,16.875,28.125,148.6865261848135,2.334218960863698,984.231063330651,54.6795035183695,0.04956217539493783
46,a04f78ef50f368c0de59a5fbdfe0951da4fb200b,Ivan Sagalaev,2012-09-07 07:20:34+00:00,"Return opening quote from stringlexem(), simplify calling from next()",False,5,2,3,1.0,1.0,0.0,726,414,537,12,2.830188679245283,74.69656150722598,16.875,27.75,146.39582951352168,2.3079031713900138,945.2490322577902,52.51383512543279,0.048798609837840554
47,356b339d206d5f42094fccd132aa98b57950aa04,Ivan Sagalaev,2012-09-07 08:12:10+00:00,"Rewrite parsing of arrays and objects without `expect_comma` to correctly
handle empty containers and trailing commas.",False,64,32,32,0.0,0.0,,726,415,537,12,2.849056603773585,74.6622622005012,16.75,28.25,149.12100399928843,2.3666437728937733,1012.6086631763358,56.25603684312976,0.04970700133309615
48,f4f72774fa1d1db42b98e321476c9eeb809e4aad,Ivan Sagalaev,2012-09-07 08:26:37+00:00,Report unexpected symbols with the actual symbol and position with the string.,False,14,9,5,1.0,1.0,0.0,730,418,540,12,2.8,74.59792693304578,17.25,29.0,155.03691900336972,2.3434294871794874,1045.8210195024494,58.101167750136085,0.05167897300112324
49,03fa190043b1889722ef5e90fdaccb71e57b6084,Ivan Sagalaev,2012-09-07 21:51:19+00:00,"Accept prefixed events in common.items. This is more flexible as it allows to
use the function with both prefixed and basic events.",False,27,13,14,1.0,1.0,0.0,729,417,539,12,2.8,74.6001541954649,17.25,29.0,155.03691900336972,2.3434294871794874,1045.8210195024494,58.101167750136085,0.05167897300112324
50,89ea7570573f6199e8b8d822809099af21427580,Ivan Sagalaev,2012-09-08 00:20:42+00:00,Hard-code using LEXTERM into lexem(),False,6,3,3,,,,729,417,539,12,2.8,74.6001541954649,17.25,29.0,155.03691900336972,2.3434294871794874,1045.8210195024494,58.101167750136085,0.05167897300112324
51,8ede4ecbd39b1571e047af20d6fcced4d032db0d,Ivan Sagalaev,2012-09-08 09:41:34+00:00,Updated URL in description in setup.py,False,4,2,2,,,,729,417,539,12,2.8,74.6001541954649,17.25,29.0,155.03691900336972,2.3434294871794874,1045.8210195024494,58.101167750136085,0.05167897300112324
52,1ed86ed9db781d9239e8ae20beeb9a17a51a2885,Ivan Sagalaev,2012-09-08 09:46:34+00:00,Actually request an iterator from prefixed_events in common.items,False,1,1,0,0.0,0.0,1.0,730,418,540,12,2.8,74.59792693304578,17.25,29.0,155.03691900336972,2.3434294871794874,1045.8210195024494,58.101167750136085,0.05167897300112324
53,678b614fe07bf184f9351ba4adbeacc7bda2949f,Ivan Sagalaev,2012-09-08 10:32:33+00:00,Don't create ObjectBuilder for scalar values in common.items,False,6,3,3,,,,730,418,540,12,2.8,74.59792693304578,17.25,29.0,155.03691900336972,2.3434294871794874,1045.8210195024494,58.101167750136085,0.05167897300112324
54,c86d88ceb57c3d5533c85bc63294f75179f5fada,Ivan Sagalaev,2012-09-30 13:37:37+00:00,"Adding yajl2 backend.
Removing unused references from yajl backend.
Defaulting to python backend in `ijson` for now.",False,142,139,3,0.3488372093023256,0.3488372093023256,0.27906976744186046,866,487,625,19,2.8333333333333335,74.40604353222366,16.77777777777778,27.88888888888889,145.6226340746265,2.3793447293447296,950.4507890820828,52.80282161567126,0.0485408780248755
55,803d4c0b30232716ecf4138af24da129400cf7a2,Ivan Sagalaev,2012-10-01 02:48:50+00:00,Removing temporary hack for Ubuntu Hardy 64,False,18,0,18,,,,848,477,615,15,2.8333333333333335,74.72740658047447,16.77777777777778,27.22222222222222,143.15567426253244,2.2805792972459638,938.024621139683,52.11247895220461,0.04771855808751082
56,b1961e893b55cf3ac4c88710d3e4af6cb8da2b00,Ivan Sagalaev,2012-10-01 03:05:47+00:00,Backend guessing in ijson/__init__.py,False,44,33,11,1.0,1.0,1.0,870,494,632,15,2.806451612903226,71.23791776600802,17.11111111111111,27.555555555555557,142.76516142914767,2.3343711843711845,929.9929198467348,51.66627332481859,0.04758838714304923
57,0e268f77f435e536e5f9eb3b05e1c828e8e1cac9,Ivan Sagalaev,2012-10-01 03:10:53+00:00,Use common exception class for both not found and wrong version of YAJL,False,12,6,6,,,,870,494,632,15,2.806451612903226,71.23791776600802,17.11111111111111,27.555555555555557,142.76516142914767,2.3343711843711845,929.9929198467348,51.66627332481859,0.04758838714304923
58,2cfa13ea0c3423d1c7525441431fcacaa6a85082,Tim Harder,2012-10-02 12:25:03+00:00,Install the backends submodule,False,2,1,1,,,,870,494,632,15,2.806451612903226,71.23791776600802,17.11111111111111,27.555555555555557,142.76516142914767,2.3343711843711845,929.9929198467348,51.66627332481859,0.04758838714304923
59,2297eb5347f64e8fcf7743e07ed8dd45a177c7fb,Ivan Sagalaev,2012-10-16 07:09:04+00:00,Running parsing tests for all available backends,False,48,32,16,,,,886,504,644,16,2.806451612903226,71.37357275647865,17.666666666666668,28.22222222222222,145.932744008292,2.3899267399267403,934.5641798869078,51.92023221593931,0.048644248002764
60,94acf7b74a4e3658f27bb5e6f2045604462155f9,Ivan Sagalaev,2012-10-16 07:11:36+00:00,"Dropping a separate TestCase for running tests in Parse in threads in favor
of a single threaded test in Parse.",False,48,5,43,0.0,0.0,0.0,848,473,613,16,3.1153846153846154,71.96438549514255,17.666666666666668,28.22222222222222,145.932744008292,2.3899267399267403,934.5641798869078,51.92023221593931,0.048644248002764
61,b87431289e36a74b586c55c810d9a9c4d1ae7f6f,Ivan Sagalaev,2012-10-16 07:19:10+00:00,"All backend independent tests united in Common, use basic_parse from the
python backend as input.",False,28,14,14,,,,848,473,613,16,3.1153846153846154,71.96438549514255,17.666666666666668,28.22222222222222,145.932744008292,2.3899267399267403,934.5641798869078,51.92023221593931,0.048644248002764
62,b30b739616d3311259f2eb421e93a13413cb930b,Ivan Sagalaev,2012-10-16 07:21:37+00:00,Docstring for Common,False,4,4,0,,,,852,474,613,16,3.1153846153846154,72.25194562053431,17.666666666666668,28.22222222222222,145.932744008292,2.3899267399267403,934.5641798869078,51.92023221593931,0.048644248002764
63,16f97af2feae2ec0318cb6ec0d52854e28702a6c,Ivan Sagalaev,2012-10-16 07:23:41+00:00,Import the `common` module itself instead of its objects.,False,18,10,8,1.0,1.0,1.0,854,475,614,16,3.1153846153846154,72.233579255675,17.666666666666668,28.22222222222222,145.932744008292,2.3899267399267403,934.5641798869078,51.92023221593931,0.048644248002764
64,390f14f195a7b8b9664ba840d99a931fb1581b4e,Ivan Sagalaev,2012-10-16 08:06:02+00:00,Renaming Reader to Lexer,False,50,25,25,,,,854,475,614,16,3.1153846153846154,72.233579255675,17.666666666666668,28.22222222222222,145.932744008292,2.3899267399267403,934.5641798869078,51.92023221593931,0.048644248002764
65,24146db479cbecc65f5b1bac32139e97de6a5c9d,Ivan Sagalaev,2012-10-17 06:16:43+00:00,Some docstring love,False,169,104,65,,,,893,490,614,16,3.1153846153846154,73.702542297978,17.666666666666668,28.22222222222222,145.932744008292,2.3899267399267403,934.5641798869078,51.92023221593931,0.048644248002764
66,56234d6d7a64659758d436982c6aedc50e9f9669,Ivan Sagalaev,2012-10-25 23:56:23+00:00,Python2/Python3 bilinguality,False,119,74,45,1.0,1.0,1.0,922,514,635,16,3.0,75.33432688594573,16.2,25.7,131.81495835767913,2.200934065934066,841.3455062733252,46.74141701518472,0.043938319452559715
67,e399ce77cd3a54ba0b8f7490bf86e0641112efbe,Ivan Sagalaev,2012-10-26 05:47:03+00:00,Version 1.0,False,6,3,3,,,,922,514,635,16,3.0,75.33432688594573,16.2,25.7,131.81495835767913,2.200934065934066,841.3455062733252,46.74141701518472,0.043938319452559715
68,641f592ac5695352c2063cd76e08aced1d8144c0,Ivan Sagalaev,2012-10-26 17:20:28+00:00,Dropping unnecessary compat helper `s()`,False,30,14,16,,,,920,512,633,16,3.0,75.5609806703573,16.2,25.7,131.81495835767913,2.200934065934066,841.3455062733252,46.74141701518472,0.043938319452559715
69,4a07b200a4d7124d98590fc237cecf306be46ed9,Ivan Sagalaev,2012-10-26 17:51:51+00:00,Dropping b() and u() in favor of unicode_literals. Thanks to Mikhail Korobov (@kmike)!,False,33,15,18,0.0,0.0,0.0,917,508,630,16,3.0754716981132075,76.17425471365445,16.2,25.7,131.81495835767913,2.200934065934066,841.3455062733252,46.74141701518472,0.043938319452559715
70,4283b1f96381fc6b187a94851afc769a06b75d4d,Ivan Sagalaev,2012-10-26 22:18:12+00:00,"Added some classifiers to setup.py and reverted `license` field back to
the filename.",False,9,8,1,,,,924,508,637,16,3.0754716981132075,76.17425471365445,16.2,25.7,131.81495835767913,2.200934065934066,841.3455062733252,46.74141701518472,0.043938319452559715
71,d4931dd7d0abe01ba63c7dee8e0a139ad7e616bc,Ivan Sagalaev,2012-10-27 01:24:01+00:00,Raise StopIteration from Lexer after exhausting an input stream.,False,67,35,32,0.0,0.0,1.0,927,511,640,16,3.0943396226415096,76.1263108014235,16.2,25.7,131.81495835767913,2.200934065934066,841.3455062733252,46.74141701518472,0.043938319452559715
72,a609ca11c3046731052d1dd5bbce720e377f2d2f,Ivan Sagalaev,2012-10-27 08:10:44+00:00,"Using more idiomatic ""is None"" instead of ""== None""",False,2,1,1,,,,927,511,640,16,3.0943396226415096,76.12533160154456,16.3,25.7,132.07564256011307,2.2726007326007327,901.6995266478758,50.09441814710421,0.04402521418670437
73,e40898d7fd5326ca80c5e9f0b5538e71a10f4f69,Ivan Sagalaev,2012-10-27 21:57:32+00:00,Python3-compatible next() in utils.coroutine,False,2,1,1,,,,927,511,640,16,3.0943396226415096,76.12533160154456,16.3,25.7,132.07564256011307,2.2726007326007327,901.6995266478758,50.09441814710421,0.04402521418670437
74,0116a748fa410db896d10b6b8f3ee67a08079b81,Ivan Sagalaev,2013-03-01 08:21:32+00:00,Quick and dirty implementation of escape decoding,False,29,28,1,0.0,0.0,1.0,954,537,666,16,3.2222222222222223,75.65786773225231,17.8,28.7,154.98578989884535,2.259600732600733,1101.626142309257,61.20145235051427,0.05166192996628179
75,1e1f7c24ca6e175ecd770f612c82f951a58ad1fe,Ivan Sagalaev,2013-03-01 08:37:48+00:00,Use .find instead of iterating over the string,False,50,25,25,,,,954,540,666,16,3.2037037037037037,75.63581574280006,17.8,29.8,162.09116467934638,2.409852984852985,1333.834445582242,74.10191364345789,0.0540303882264488
76,e049d7de6d25ec901854f705da993375b541188f,Ivan Sagalaev,2013-04-05 19:08:27+00:00,Fix literal utf-8 bytes tests under Python3,False,4,2,2,,,,954,540,666,16,3.2037037037037037,75.63581574280006,17.8,29.8,162.09116467934638,2.409852984852985,1333.834445582242,74.10191364345789,0.0540303882264488
77,9999fe61d9add1c0214f724b84985cf6fe8a78ed,Ivan Sagalaev,2013-04-05 19:09:04+00:00,Wrong but working Python 2/3 compatibility of string unescaping,False,11,8,3,1.0,1.0,1.0,959,546,671,16,3.1636363636363636,75.08502695645564,17.8,29.8,162.09116467934638,2.409852984852985,1333.834445582242,74.10191364345789,0.0540303882264488
78,b380160392a0292e99893d45c57c20c7d23d2999,Ivan Sagalaev,2013-04-05 19:26:15+00:00,Cleaner Python 2/3 compat in python backend with unicode_literals,False,39,18,21,0.0,0.0,0.0,956,543,669,16,3.2037037037037037,75.57499292157517,17.8,29.8,162.09116467934638,2.409852984852985,1333.834445582242,74.10191364345789,0.0540303882264488
79,7246ff4758d801bf30a63d90026608354116a456,David Fischer,2013-04-11 05:10:56+00:00,Added multiple value support to yajl2 backend,False,8,7,1,0.0,0.0,0.0,962,546,673,17,3.2222222222222223,75.53894240753786,17.8,29.8,162.09116467934638,2.409852984852985,1333.834445582242,74.10191364345789,0.0540303882264488
80,ef3a44fe5525d0faaf76e5dbdcd169b76d06efde,Ron Mahoney,2013-07-12 14:06:32+00:00,plus sign is part of a number in json spec,False,2,1,1,,,,962,546,673,17,3.2222222222222223,75.53894240753786,17.8,29.8,162.09116467934638,2.409852984852985,1333.834445582242,74.10191364345789,0.0540303882264488
81,ce01cbacfb4283e5898ae2bae76c3de0a5994c73,Ron Mahoney,2013-07-12 14:41:15+00:00,update test for numbers like,False,6,5,1,0.0,1.0,1.0,966,546,677,17,3.2222222222222223,75.52506780407505,17.8,29.8,162.09116467934638,2.409852984852985,1333.834445582242,74.10191364345789,0.0540303882264488
82,1ef589c2787d5037c527c12a7085c056a880a44e,Ivan Sagalaev,2013-09-27 07:12:33+00:00,Properly handle the plus sign in exponential numbers (1e+2). Fixes #11.,False,6,5,1,0.0,1.0,1.0,966,546,677,17,3.2222222222222223,75.52506780407505,17.8,29.8,162.09116467934638,2.409852984852985,1333.834445582242,74.10191364345789,0.0540303882264488
83,2c26b75964b0648b29edba43b273285a9a492ce8,Ivan Sagalaev,2013-09-27 07:16:16+00:00,Version 1.1,False,2,1,1,,,,966,546,677,17,3.2222222222222223,75.52506780407505,17.8,29.8,162.09116467934638,2.409852984852985,1333.834445582242,74.10191364345789,0.0540303882264488
84,43bd50f49804137a9f60d9d80c0e9982fc798b36,Ivan Sagalaev,2013-09-27 07:38:01+00:00,Cleaning up tests of exponential numbers,False,10,1,9,1.0,0.0,0.0,962,546,673,17,3.2222222222222223,75.53894240753786,17.8,29.8,162.09116467934638,2.409852984852985,1333.834445582242,74.10191364345789,0.0540303882264488
85,7e7e56688052e805c7dc49632e400592ac878ed5,Ivan Sagalaev,2014-04-05 05:30:25+00:00,Use codecs.getreader instead of manually calling .decode('utf-8') on the input buffer to avoid splitting multi-byte characters. Fixes #15.,False,10,5,5,,,,962,546,673,17,3.2222222222222223,75.53894240753786,17.8,29.8,162.09116467934638,2.409852984852985,1333.834445582242,74.10191364345789,0.0540303882264488
86,78039486292ac10413d9ab888599be5b15dd9284,Ivan Sagalaev,2014-04-05 05:52:23+00:00,Support for buf_size parameter in the Python backend. Tests for UTF-8 character split.,False,20,13,7,1.0,1.0,0.4,968,551,678,17,3.1818181818181817,75.37326933092181,18.1,30.1,163.74612400036,2.459852984852985,1339.0056064393034,74.38920035773909,0.05458204133345333
87,6f75928821d65273f9b707cebfa4868c3c517731,Ivan Sagalaev,2014-04-05 06:01:28+00:00,Cleaner test_utf8_split.,False,6,4,2,1.0,1.0,1.0,970,553,680,17,3.2,75.33020235745244,18.1,30.1,163.74612400036,2.459852984852985,1339.0056064393034,74.38920035773909,0.05458204133345333
88,96defafdd607a9d85d000cfed833c8929a1e7595,Ivan Sagalaev,2014-09-18 02:13:58+00:00,"Drop yajl discovery on `import ijson`.

This proves to be overly magical and breaks in some cases (see
issue #22). I decided to do the same as the Python stdlib,
importing the safe pure Python backend by default and documenting
other choices for explicit import.",False,30,13,17,,,,967,547,673,17,3.2,77.92815708471076,18.1,30.1,163.74612400036,2.459852984852985,1339.0056064393034,74.38920035773909,0.05458204133345333
89,22231cb6dcef8fe5394a0cd56e390db537983a8f,Ivan Sagalaev,2014-09-18 06:39:42+00:00,Accept integers with exponents.,False,8,6,2,0.0,1.0,1.0,971,547,677,17,3.2181818181818183,77.90142002488287,18.1,30.1,163.74612400036,2.459852984852985,1339.0056064393034,74.38920035773909,0.05458204133345333
90,031ac23d4cb997ce256e1a63a91ccc2af9f8e0f5,Ivan Sagalaev,2014-09-18 07:08:51+00:00,Optimize lookup of the first lexeme character,False,2,1,1,,,,971,547,677,17,3.1818181818181817,77.9615553608055,17.2,28.7,152.24363598099666,2.3222773495161553,1079.02836650413,59.94602036134056,0.05074787866033224
91,90367a1748435235513ea64bd984af21d1232a20,Ivan Sagalaev,2014-09-18 18:47:17+00:00,Reimplemented Lexer as a generator.,False,160,71,89,0.36363636363636365,0.0,0.0,953,532,664,17,3.3,78.0545088753144,16.3,28.1,145.80900201736193,2.3231374557645745,1019.9011541231487,56.66117522906383,0.04860300067245399
92,97a24b4e96cc0832d7105dc691e1a9e79aed99f7,Ivan Sagalaev,2014-09-22 05:05:22+00:00,Combined lexeme regex.,False,55,24,31,1.0,1.0,0.0,946,526,659,17,3.28,78.13157874997522,16.0,27.9,143.63523801666503,2.3534340659340662,1027.2045433402366,57.0669190744576,0.04787841267222168
93,73f90b8ccd4f8e07d521a42db170d2df9c81bc40,Ivan Sagalaev,2014-09-22 05:34:11+00:00,Remove special treatment of single-character lexemes.,False,6,2,4,1.0,1.0,0.0,944,524,657,17,3.26,78.17314075715606,15.9,27.6,141.49649371436772,2.350934065934066,1004.3978145917605,55.79987858843115,0.047165497904789244
94,ced215f9e5737eef048e524eb6e5530ff639d72d,Ivan Sagalaev,2014-10-11 05:19:38+00:00,Keep track of discarded buffers lengths to report correct position.,False,6,4,2,0.0,0.0,1.0,946,526,659,17,3.26,78.13098239846416,16.2,28.5,147.9368816855379,2.358175445244411,1073.12606536341,59.61811474241167,0.049312293895179306
95,6d014f0ae872aeae7e735ba7b691ecbae9c49410,Ivan Sagalaev,2014-10-11 06:01:59+00:00,PEP8 for python.py,False,18,16,2,0.3333333333333333,0.3333333333333333,0.0,960,526,665,17,3.26,78.1034914762829,16.2,28.5,147.9368816855379,2.358175445244411,1073.12606536341,59.61811474241167,0.049312293895179306
96,8da3f09151b26d4a754601305a617b7891a9aa39,Ivan Sagalaev,2014-10-11 06:03:47+00:00,Always return integer numbers as int.,False,17,8,9,1.0,1.0,1.0,959,529,664,17,3.24,78.09877245290195,16.2,28.8,149.76943902257136,2.272289998137456,1007.4346149194535,55.96858971774742,0.04992314634085713
97,9cff9a90357aa4344360958227064df77912b42f,Ivan Sagalaev,2014-10-11 07:18:48+00:00,Switching setup.py to setuptools.,False,11,6,5,,,,960,529,664,16,3.24,78.09877245290195,16.2,28.8,149.76943902257136,2.272289998137456,1007.4346149194535,55.96858971774742,0.04992314634085713
98,c6ff030acecbf086a064cb286338e678a60c777f,Ivan Sagalaev,2014-10-11 07:19:32+00:00,Version 2.0,False,2,1,1,,,,960,529,664,16,3.24,78.09877245290195,16.2,28.8,149.76943902257136,2.272289998137456,1007.4346149194535,55.96858971774742,0.04992314634085713
99,57da8f086a7cb306123d0a4b04ef8f2ae3ab93d9,Ivan Sagalaev,2014-10-14 08:45:09+00:00,"Faster unescape.

Build and returns a whole string instead of being a generator.",False,30,17,13,0.0,0.0,1.0,964,533,668,16,3.26,77.98340866635124,17.2,31.8,171.7853563003457,2.2894847905717475,1221.959333962668,67.88662966459268,0.05726178543344858
100,bdaf440101feb064b71ee5c812f8cb9bf89271df,Ivan Sagalaev,2014-10-14 08:55:02+00:00,Removed unused import,False,2,1,1,,,,964,533,668,16,3.26,77.98340866635124,17.2,31.8,171.7853563003457,2.2894847905717475,1221.959333962668,67.88662966459268,0.05726178543344858
101,f94f9abcc022c6f31e86a24753d4b99f53f72076,Ivan Sagalaev,2014-10-15 04:19:11+00:00,Test for lexeme split on buffer boundary.,False,104,54,50,1.0,0.0,0.0,968,536,671,16,3.196078431372549,77.87982654818127,17.4,32.1,173.33662519487606,2.2894847905717475,1224.2862373044638,68.0159020724702,0.0577788750649587
102,60572798e3c14cfed7419cb76dba017bfc554fb2,Ivan Sagalaev,2014-10-15 04:23:52+00:00,Test for whitespace split on buffer boundary.,False,7,6,1,1.0,1.0,1.0,973,540,675,16,3.1538461538461537,77.75882369013318,17.6,32.4,174.94797926051496,2.2894847905717475,1226.703268402922,68.15018157794012,0.05831599308683834
103,7a44c9a8ad717343030efe2e95e67e9244eb6ac7,Ivan Sagalaev,2014-10-15 04:25:42+00:00,Test for ASCII escapes.,False,5,3,2,,,,974,540,676,16,3.1538461538461537,77.75571471573001,17.6,32.4,174.94797926051496,2.2894847905717475,1226.703268402922,68.15018157794012,0.05831599308683834
104,e9887da377d923d1e40134b02024f2dfb8b49536,Ivan Sagalaev,2014-10-15 04:28:05+00:00,Test for 'true' value.,False,4,4,0,0.0,1.0,1.0,978,540,680,16,3.1538461538461537,77.74348709472575,17.6,32.4,174.94797926051496,2.2894847905717475,1226.703268402922,68.15018157794012,0.05831599308683834
105,7707dc2218391072c3f2e3fff63ad2c7f704137f,Ivan Sagalaev,2014-10-15 04:39:25+00:00,More tests for invalid JSON. Also fixed a real bug with the wrong exception type on converting non-numbers to Decimal.,False,25,16,9,0.0,0.0,0.0,985,541,687,23,3.173076923076923,78.02920284360155,17.6,32.4,174.94797926051496,2.2894847905717475,1226.703268402922,68.15018157794012,0.05831599308683834
106,826a5a8b0033905dc36038d24109402f1d326876,Ivan Sagalaev,2014-10-15 04:43:46+00:00,Test for availablility of common API functions in backends.,False,4,4,0,1.0,1.0,1.0,989,544,690,23,3.1320754716981134,77.97522485412183,17.6,32.4,174.94797926051496,2.2894847905717475,1226.703268402922,68.15018157794012,0.05831599308683834
107,e079cc21aaaf9d867c89897b69580687ba5e4283,Ivan Sagalaev,2014-10-15 05:21:08+00:00,"Drop IncompleteJSONError.

Now all errors are just JSONError, no need to single out one
special case.",False,39,12,27,0.4,0.4,0.4,974,536,679,23,3.156862745098039,78.38285233520263,17.4,31.8,172.65081621669248,2.2466276477146043,1221.4067353271798,67.85592974039886,0.05755027207223083
108,151c39c83bb3c551a38abe8657b56c7b6206a04c,Ivan Sagalaev,2014-10-16 00:11:11+00:00,Revert error checking in yajl 1.x to previous strategy.,False,6,4,2,0.0,0.0,0.0,976,538,681,23,3.176470588235294,78.23031071674572,17.5,32.1,173.79939773860372,2.2680562191431757,1224.0550018650508,68.00305565916949,0.057933132579534585
109,5c75aaddfdb4fcac63b3a7bfb07603e82ae38337,Ivan Sagalaev,2014-10-16 04:25:52+00:00,Use JSONError in yajl.py,False,2,1,1,,,,976,538,681,23,3.176470588235294,78.23031071674572,17.5,32.1,173.79939773860372,2.2680562191431757,1224.0550018650508,68.00305565916949,0.057933132579534585
110,a2ae6725d9e8ee0b53b23b3b1de999ddd496d6b8,Ivan Sagalaev,2014-11-02 02:28:44+00:00,Don't test dangling junk with yajl1.,False,7,6,1,1.0,1.0,1.0,981,541,684,25,3.215686274509804,78.11355217389888,18.2,33.0,179.11582277620474,2.318056219143176,1239.7853649563854,68.87696471979919,0.05970527425873492
111,9a15bef9a7435f2be70ef8e84f68bc69621c6eea,Matías Graña,2014-12-04 17:05:02+00:00,"bugfix in python.py

== should be =
It actually might be better to use number._isinteger()",False,2,1,1,,,,981,541,684,25,3.215686274509804,78.11841777477616,18.2,32.7,177.2246885517516,2.303563465519987,1205.7997644009956,66.9888758000553,0.0590748961839172
112,bfa6d6b5694dc3b4cc6f2307654107db127bbcad,Ivan Sagalaev,2014-12-06 01:13:37+00:00,Extract number conversion into ijson.common.,False,54,23,31,1.0,0.8,0.8,973,538,678,25,3.235294117647059,77.98590043003863,18.7,33.3,180.459955332969,2.3546112158985295,1218.216512456193,67.67869513645516,0.06015331844432301
113,5c4f831afbc51d498b91eff7c422e373142d7c73,Volodymyr Vitvitskyi,2015-01-23 13:15:40+00:00,"import `ctypes` module on demand

Google App Engine has a restricted python environment which doesn't allow to import `ctypes`.
This fact make it impossible to specify usage of pure python backend implementation.",False,6,5,1,1.0,1.0,1.0,977,538,678,28,3.235294117647059,78.23801565274033,18.7,33.3,180.459955332969,2.3546112158985295,1218.216512456193,67.67869513645516,0.06015331844432301
114,b0873d71b82e2af8983511b0ea3306dbe48c145c,Ivan Sagalaev,2015-02-17 00:59:35+00:00,Version 2.1,False,2,1,1,,,,977,538,678,28,3.235294117647059,78.23801565274033,18.7,33.3,180.459955332969,2.3546112158985295,1218.216512456193,67.67869513645516,0.06015331844432301
115,f2ec31228639c85a928103b89f150c6128b013bf,Tony Crisci,2015-03-26 20:51:24+00:00,"Add buf_size kwarg to python parse

Add the `buf_size` kwarg to the pure python backend implementation of
`parse()`.

fixes #31",False,4,2,2,,,,977,538,678,28,3.235294117647059,78.23801565274033,18.7,33.3,180.459955332969,2.3546112158985295,1218.216512456193,67.67869513645516,0.06015331844432301
116,f0e25f4f9599d02d9c574bf26310b4e40ea4e969,Ivan Sagalaev,2015-04-14 21:06:22+00:00,Don't allow None as the `file` argument to parse.,False,2,1,1,,,,977,538,678,28,3.235294117647059,78.23801565274033,18.7,33.3,180.459955332969,2.3546112158985295,1218.216512456193,67.67869513645516,0.06015331844432301
117,5411d8267ac76cbf6683669ce20e5539dee96901,Ivan Sagalaev,2015-04-14 21:35:56+00:00,Accept both string and byte inputs in Python backend. Fixes #30.,False,23,19,4,0.8571428571428571,0.8571428571428571,1.0,992,548,688,28,3.1481481481481484,77.79707220664285,18.9,33.6,183.0280835543464,2.343146798853321,1227.7726097413965,68.20958943007757,0.06100936118478214
118,e5ef5454268608927281bc2e1f3ab4aa557d2ebc,Ivan Sagalaev,2015-04-21 21:25:20+00:00,"Reintroduction of IncompleteJSONError.

Now more robust and with more tests. Fixes #29.",False,112,65,47,0.0,0.0,0.6666666666666666,1010,556,702,28,3.240740740740741,77.42112656050719,19.1,34.2,185.3519980855988,2.4645753702818918,1237.2834899056202,68.73797166142332,0.06178399936186627
119,d1327b538e7b0b08745a322b67639184f3ce901b,Ivan Sagalaev,2015-04-21 21:35:18+00:00,More tests for incompleteness.,False,4,4,0,,,,1014,556,706,28,3.240740740740741,77.4083298773442,19.1,34.2,185.3519980855988,2.4645753702818918,1237.2834899056202,68.73797166142332,0.06178399936186627
120,e4a81889fdc8f8e2b7f9268201c4d6678617b918,Ivan Sagalaev,2015-04-21 21:40:26+00:00,Version 2.2,False,2,1,1,,,,1014,556,706,28,3.240740740740741,77.4083298773442,19.1,34.2,185.3519980855988,2.4645753702818918,1237.2834899056202,68.73797166142332,0.06178399936186627
121,4f743a58fb4e26bba09e15a4d6609114120bc568,Dav1dde,2015-06-18 12:36:20+00:00,add cffi backend for yajl,False,887,698,189,1.0,1.0,0.8397435897435898,1523,806,1074,41,2.237623762376238,79.30472928396445,11.764705882352942,20.41176470588235,107.43535098833418,1.620618565151813,718.7197672256774,39.92887595698206,0.03581178366277807
122,218bec9d7af0095042911dba4c488cf82e9d7fc2,Dániel Varga,2015-09-22 15:46:04+00:00,unescape map keys,False,2,1,1,,,,1014,556,706,28,3.240740740740741,77.4083298773442,19.1,34.2,185.3519980855988,2.4645753702818918,1237.2834899056202,68.73797166142332,0.06178399936186627
123,50ed3d6a242c47d4d05bbdca2028c2d3e5131605,Ivan Sagalaev,2015-09-22 21:19:47+00:00,"Simplify structure of various YAJL backends

- Restored flat directory structure and removed a lot of cffi/ctypes
  common sacffolding.
- Dropped yajl1 + cffi backend as yajl1 is a legacy version and there's
  no need in enhancing it.
- ijson/backends/__ini__.py now has two similar functions for loading
  a yajl shared lib. This may be unified further to ensure the same
  exception are raised in all cases.",False,758,255,503,0.0,0.0,0.0,1275,683,879,37,2.77027027027027,75.62729008709022,18.181818181818183,32.0,170.92420469252522,2.448315271684837,1129.983053443653,62.77683630242516,0.056974734897508414
124,93037fc207ef3fd8c95ff8316e12efd0bec9d7ad,Ivan Sagalaev,2015-09-22 21:31:42+00:00,"Correct backends naming in tests

- Restore == check for 'YajlParse'
- Capitalize _-separated words",False,4,2,2,,,,1275,683,879,37,2.77027027027027,75.59974066233016,18.363636363636363,32.27272727272727,172.5902356271157,2.448315271684837,1134.1481307801293,63.00822948778495,0.05753007854237191
125,f825e8f1610b4ccc5a4032eea5e00ad4a150b3b1,Ivan Sagalaev,2015-09-22 21:35:31+00:00,Cleanup unused imports in ctypes backends,False,12,4,8,,,,1271,681,875,37,2.77027027027027,75.66111218691655,18.363636363636363,32.27272727272727,172.5902356271157,2.448315271684837,1134.1481307801293,63.00822948778495,0.05753007854237191
126,d405adc7e737c1f1c7c41d762bdae1f1ae6f4906,Ivan Sagalaev,2015-09-23 02:56:17+00:00,Test escaped symbols in map keys,False,3,2,1,1.0,1.0,1.0,1272,682,876,37,2.77027027027027,75.62240746096843,18.636363636363637,32.54545454545455,174.4502159205181,2.4937698171393823,1148.510510574204,63.80613947634467,0.05815007197350604
127,415e4b0a45651e11da3ee36f444d7175135eaf29,Ivan Sagalaev,2016-02-06 01:09:18+00:00,Version 2.3,False,2,1,1,,,,1272,682,876,37,2.77027027027027,75.62240746096843,18.636363636363637,32.54545454545455,174.4502159205181,2.4937698171393823,1148.510510574204,63.80613947634467,0.05815007197350604
128,3e9f2b12cc689e9e35fa31fbf5cafe0fe2f9ec70,Mark Amery,2016-06-30 16:56:13+00:00,"Add Pile of Poo Test™

(See https://mathiasbynens.be/notes/javascript-unicode)",False,6,6,0,1.0,1.0,1.0,1278,687,881,37,2.7466666666666666,75.55709876755053,18.636363636363637,32.54545454545455,174.4502159205181,2.4937698171393823,1148.510510574204,63.80613947634467,0.05815007197350604
129,003edd8d2269aeddce600ceed7f15c0bc40dae69,Mark Amery,2016-06-30 16:56:13+00:00,"Use Python's built-in JSON string parsing

Has at least two advantages over ijson's previous implementation:

- possible performance improvements from using a C implementation where available (see https://github.com/python/cpython/blob/11f699c512bc826d809f5bc9ab0e27a027cd1951/Lib/json/decoder.py#L129)

- fixes handling of surrogate pairs. Previously ijson would incorrectly parse a JSON text like ""\ud834\udd09"" to an invalid Python string made up of two surrogate characters; the correct behaviour (implemented by Python's json module) is to treat these as UTF-16 surrogate code points and return the character u'𝄉'. This behaviour is described in the JSON spec at https://tools.ietf.org/html/rfc7159#section-7 and implemented by Python at (for example) https://github.com/python/cpython/blob/11f699c512bc826d809f5bc9ab0e27a027cd1951/Lib/json/decoder.py#L118-L122",False,43,8,35,1.0,1.0,0.0,1251,656,854,37,2.6266666666666665,76.1218748248082,16.09090909090909,25.727272727272727,125.09894262941762,2.307416904800626,594.8815441895223,33.04897467719569,0.04169964754313921
130,cf1a7f690232bcdb280089304e9fb8dd9b7a6956,Rodrigo Tobar,2016-10-10 09:02:03+00:00,"cffi: variadic arguments need explicit cast

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,4,2,2,,,,1272,682,876,37,2.77027027027027,75.62240746096843,18.636363636363637,32.54545454545455,174.4502159205181,2.4937698171393823,1148.510510574204,63.80613947634467,0.05815007197350604
131,51ba42cffee5effbbf8794d5cb54f1d5006cf232,Rodrigo Tobar,2016-10-11 03:32:05+00:00,"error as a string, not as bytes

Otherwise under python 3 the exception's message doesn't get properly formatted
and it's hard to point out exactly where the error was found.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,2,1,1,,,,1272,682,876,37,2.77027027027027,75.62240746096843,18.636363636363637,32.54545454545455,174.4502159205181,2.4937698171393823,1148.510510574204,63.80613947634467,0.05815007197350604
132,02a3d0a4764e2cbec18435018e1f6d42214f5997,Ivan Sagalaev,2016-10-15 03:23:31+00:00,Use fewer characters in `scanstring` call,False,2,1,1,,,,1251,655,854,37,2.6266666666666665,76.12779405098905,16.09090909090909,25.727272727272727,125.09894262941762,2.307416904800626,594.8815441895223,33.04897467719569,0.04169964754313921
133,13fdfb8bd1efb7f7b5428d7cafa3a5c895eea955,Ivan Sagalaev,2016-10-15 03:25:58+00:00,Remove unused `chr` from compat.py,False,5,1,4,0.0,0.0,0.0,1248,653,851,37,2.6486486486486487,76.4453067598215,16.09090909090909,25.727272727272727,125.09894262941762,2.307416904800626,594.8815441895223,33.04897467719569,0.04169964754313921
134,ca62e4df64ad56d9461bb3d744d55e8083df811e,Ivan Sagalaev,2016-10-15 03:26:57+00:00,Move surrogate test close to string tests,False,10,5,5,,,,1248,653,851,37,2.6486486486486487,76.4453067598215,16.09090909090909,25.727272727272727,125.09894262941762,2.307416904800626,594.8815441895223,33.04897467719569,0.04169964754313921
135,0dc4857be1a446de57cb5b76fe4f7cb8c7c65884,Ivan Sagalaev,2016-10-15 05:18:49+00:00,Publish package version in __init__.py,False,7,6,1,,,,1253,655,853,37,2.6486486486486487,76.4453067598215,16.09090909090909,25.727272727272727,125.09894262941762,2.307416904800626,594.8815441895223,33.04897467719569,0.04169964754313921
136,e252a50db34b71cc2b5e0b9a77cd76dee8e95005,Ivan Sagalaev,2016-10-15 05:37:21+00:00,"Parse numbers consistent with stdlib json

Fixes #53",False,15,7,8,0.0,0.0,0.0,1252,654,852,37,2.6621621621621623,76.3829330648673,16.454545454545453,26.545454545454547,130.43860055098057,2.3214320563157766,627.3672548913614,34.85373638285342,0.043479533516993525
137,56b3c52de376f6f77da3ecc399ac3b7d305134a7,Rodrigo Tobar,2016-10-17 06:05:17+00:00,"Prevent memory leaks

The builder.containers list creates circular references between itself and the
ObjectBuilder object that contains it. This means that garbage collection is
taking care of disposing of these self-referencing objects from time to time.
If no GC is enabled (e.g., when using timeit.timeit, or because intentionally
turned off) these objects build up in memory, defeating the purpose of the
items generator and those under it. By explicitly clearing up the builder's
list before the builder gets out of scope we solve this.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,1,1,0,0.0,0.0,1.0,1253,656,853,37,2.6621621621621623,76.37830639104959,16.454545454545453,26.545454545454547,130.43860055098057,2.3214320563157766,627.3672548913614,34.85373638285342,0.043479533516993525
138,4f4d3797e518c8ca0e0cc6370ff851f887a31919,Rodrigo Tobar,2016-10-19 01:58:25+00:00,"Adding new C extension backend

This new C extension backend implements three objects (basic_parse, parse and
items) which work like an iterator (i.e., they implement the iter and iternext
methods). They do the same work their counterparts in the other backends do;
that is, basic_parse generates tuples of (event, value), parse adds a path to
that tuple, and items generates objects out of those. The fact that they are
written in C, plus a few other minor goodies, means that their performance is
substantially better than the other backends.

The code tries to take all error cases into account and return the correct
values when needed. Reference counting seems correct when things work
correctly; that is no memory corruption or memory leak occurs when parsing bigs
amount of data. Reference counting might be incorrect in some error situations,
but that's work future work.

The C extension itself is called _yajl2. Its functionality is in turn exposed
via the yajl2_c python module which is what users should finally import.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,973,973,0,0.27037773359840955,0.614314115308151,0.6302186878727635,1278,666,863,48,2.5974025974025974,78.35102197612837,15.083333333333334,24.333333333333332,119.56871717173219,2.1279793849561286,575.0866503170813,31.949258350948966,0.039856239057244065
139,3dc012b9b3b60b0ac88f11b94ca7727efb97ec38,Rodrigo Tobar,2016-10-19 02:05:58+00:00,"Building and testing the new C extension backend

The new backend requires a C compiler and the YAJL development headers and
library to be present on the system. If the conditions are not right we don't
include extension to the setup process.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,28,24,4,,,,1296,678,878,49,2.5974025974025974,76.60922345711707,15.333333333333334,24.583333333333332,119.96495779691247,2.1696460516227956,575.2847706296715,31.96026503498175,0.03998831926563749
140,3613283d6330fddaea13955a9e6de20020c26ce0,Rodrigo Tobar,2016-10-19 02:08:04+00:00,"Minor fixes/improvements for running tests

Tests run but were not reporting which backends were not being tested. The
find_yajl_ctypes function also failed sometimes with OSError instead of
YAJLImportError.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,6,5,1,1.0,1.0,1.0,1300,682,882,49,2.6103896103896105,76.52151507055724,15.333333333333334,24.583333333333332,119.96495779691247,2.1696460516227956,575.2847706296715,31.96026503498175,0.03998831926563749
141,508f2f461bb1a5210062e03c49f08f1a1f4062c4,Rodrigo Tobar,2016-11-03 08:56:38+00:00,"Fixed path when map_key is first element

gen->path always contains at least 1 element, and when a map_start event is
found a new None element is added to the list. Thus the logic to find whether
this map key is the first element of the prefix returned by this generator was
wrong and generated "".key"" for a JSON like '{""key"": 1}'

I've added a unit test to make sure this problem doesn't arise again.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,9,7,2,1.0,1.0,1.0,1305,687,887,49,2.58974358974359,76.43243592153017,15.583333333333334,24.916666666666668,122.09389496930218,2.211312718289462,589.7221511512192,32.7623417306233,0.04069796498976739
142,ca79815cb454f917cb419087ba3424eac9d6bf59,Rodrigo Tobar,2016-11-15 02:17:36+00:00,"Better yajl detection via ccompiler module

This new way allow for environments to be passed down (CC, CFLAGS et al.) and
also leaves less temporary files behind.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,42,34,8,0.0,0.0,1.0,1331,705,905,53,2.607594936708861,76.39964587069376,15.583333333333334,24.916666666666668,122.09389496930218,2.211312718289462,589.7221511512192,32.7623417306233,0.04069796498976739
143,9f14ffda5d7f88ed5fd84245c106e52cf0a273ec,Rodrigo Tobar,2017-01-08 13:10:47+00:00,"Removing unnecessary print

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,1,0,1,,,,1330,704,904,53,2.607594936708861,76.40878388005147,15.583333333333334,24.916666666666668,122.09389496930218,2.211312718289462,589.7221511512192,32.7623417306233,0.04069796498976739
144,75dc99504696508cabd958d35e422d76ecdfd23c,Rodrigo Tobar,2017-01-08 13:36:41+00:00,"C extension is imported as a whole

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,10,4,6,,,,1328,702,902,51,2.607594936708861,76.40878388005147,15.583333333333334,24.916666666666668,122.09389496930218,2.211312718289462,589.7221511512192,32.7623417306233,0.04069796498976739
145,e99c8ef446ab5953da70e459703761ae01f48945,Rodrigo Tobar,2017-01-24 04:20:43+00:00,"Removing confusing ""All rights reserved""

This phrase is a formality that no longer has legal effects, but caused
confusion with the permissive grants of the 3-clause BSD license under which
ijson is distributed.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,2,0,2,,,,1327,702,902,50,2.607594936708861,76.40878388005147,15.583333333333334,24.916666666666668,122.09389496930218,2.211312718289462,589.7221511512192,32.7623417306233,0.04069796498976739
146,628b437b753b7c1fa8f8d4c53680ac1eb03c2316,Rodrigo Tobar,2019-03-25 00:41:10+00:00,"Adding newline at EOF

I haven't heard this is an actual issue that blocks compilation/usage,
but on the other hand it doesn't hurt.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,2,1,1,,,,1327,702,902,50,2.607594936708861,76.40878388005147,15.583333333333334,24.916666666666668,122.09389496930218,2.211312718289462,589.7221511512192,32.7623417306233,0.04069796498976739
147,2b4cc884300b71aa00a9ae03425bdc80491103ea,Rodrigo Tobar,2019-06-11 05:51:17+00:00,"Pointing to ICRAR's fork as main version

I also added myself as an author of the package, together with my mail
address.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,10,5,5,,,,1252,654,852,37,2.6621621621621623,76.3829330648673,16.454545454545453,26.545454545454547,130.43860055098057,2.3214320563157766,627.3672548913614,34.85373638285342,0.043479533516993525
148,bc33119e6e24f155cc0a275618e79319430eccb4,Rodrigo Tobar,2019-06-11 07:32:56+00:00,"Version 2.4

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,2,1,1,,,,1328,704,903,50,2.607594936708861,76.40454276238522,15.583333333333334,24.916666666666668,122.09389496930218,2.211312718289462,589.7221511512192,32.7623417306233,0.04069796498976739
149,144bf7d41f13b9f4d5515427bb409f58696de52f,Rodrigo Tobar,2019-06-23 00:39:25+00:00,"Handle yajl versions < 1.0.12

These lack a yajl_version function that can be called, so we get an
AttributeError when trying to invoke it. We are assuming a version
equals to 1.0.0 in these cases and continue the loading process.

This should solve isagalaev/ijson#66.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,9,8,1,0.0,1.0,1.0,1335,710,909,50,2.6202531645569622,76.22109585962367,15.583333333333334,24.916666666666668,122.09389496930218,2.211312718289462,589.7221511512192,32.7623417306233,0.04069796498976739
150,a3fdadd5d5ff9a559f60430c997ec2f420a0e73a,Rodrigo Tobar,2019-06-27 02:16:13+00:00,"Only build C extension against yajl2

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,13,12,1,0.0,0.0,1.0,1339,704,914,50,2.607594936708861,76.29000285973652,15.583333333333334,24.916666666666668,122.09389496930218,2.211312718289462,589.7221511512192,32.7623417306233,0.04069796498976739
151,11e42aac4fb33f0aca179d1308b4877b9662ed91,Rodrigo Tobar,2019-06-27 03:24:29+00:00,"Handling yajl<1.0.12 on cffi loading

This is a further fix for the problem described in isagalaev/ijson#66.
A previous commit (144bf7d) had solved this for ctypes-based library
loading, but cffi-based library loading was still failing, at least in
python 3.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,16,9,7,1.0,1.0,1.0,1348,711,921,50,2.6,76.07590953193798,15.583333333333334,24.916666666666668,122.09389496930218,2.211312718289462,589.7221511512192,32.7623417306233,0.04069796498976739
152,846a1ccc99d1729582a3b0879556d287cc8de46a,Rodrigo Tobar,2019-09-09 01:36:19+00:00,"Properly escaping of unicode escapes

This was a 'double' escaping: the string to be tested should have a
backslash followed by a ""u"", followed by four hexadecimal digits, etc,
but in its previous form it was effectively the bytes that make up the
utf-8 encoded version of those characters.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,2,1,1,,,,1348,711,921,50,2.6,76.07590953193798,15.583333333333334,24.916666666666668,122.09389496930218,2.211312718289462,589.7221511512192,32.7623417306233,0.04069796498976739
153,1190dcb7a16aef5103f172e1b00e241a94658463,Rodrigo Tobar,2019-09-10 08:19:05+00:00,"Moving version to ijson/version.py

This makes it possible to read the version number from setup.py without
having to import ijson.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,13,10,3,1.0,1.0,1.0,1355,718,927,50,2.580246913580247,77.7539624494702,14.384615384615385,23.0,112.70205689474048,2.0412117399595036,544.3589087549716,30.242161597498427,0.03756735229824682
154,4c6d4144ea56e883634bd8c3eddca02c6f54a8f7,Rodrigo Tobar,2019-09-10 08:20:02+00:00,"Offering better backend by default

Instead of always importing the python backend and exposing its
functions as the main functions of ijson, let's loop through all
available backends in performance order, and try to use those first. If
they fail to import that's fine as the python backend will still get a
change. If no backend makes it then that's an error.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,13,11,2,1.0,1.0,1.0,1364,728,937,50,2.5853658536585367,77.51837696570023,14.615384615384615,23.23076923076923,113.06781747182997,2.079673278421042,544.5417890435164,30.25232161352869,0.037689272490609986
155,3b0832354b4fdefc80b800cef7ee99f3c42e6848,Rodrigo Tobar,2019-09-13 03:13:27+00:00,"C backend respecting multiple_values

This wasn't the case before, and the code was always setting this flag.
A new unit test ensures a negative value on the flag is correctly
interpreted by all backends, including when the flag is left in its
default value.

This fixes #8.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,9,8,1,1.0,1.0,1.0,1371,734,943,50,2.566265060240964,77.44066517999957,14.692307692307692,23.46153846153846,114.3898264414995,2.0876308381027395,550.3853784361812,30.57696546867674,0.0381299421471665
156,fc8429f24968dc1d573e529a1139e9b2581c28ac,Rodrigo Tobar,2019-09-13 03:29:11+00:00,"Adding dummy arguments to python backend

This is just for interface compatibility with the rest of the backends,
they are currently ignored.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,6,3,3,,,0.0,1371,734,943,50,2.566265060240964,77.44066517999957,14.692307692307692,23.46153846153846,114.3898264414995,2.0876308381027395,550.3853784361812,30.57696546867674,0.0381299421471665
157,aa3d4ead8161386b2aee2f93f92f9572f4a5c652,Rodrigo Tobar,2019-09-13 03:49:45+00:00,"Limit multiple_values test to yajl2-based backends

The python backend implements only the logic to *not* allow multiple
values; the yajl backend only the logic to *allow* multiple values. Only
yajl2-based backends can be toggled with ease.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,11,10,1,1.0,1.0,1.0,1380,739,951,50,2.5783132530120483,77.35463355500369,14.923076923076923,23.846153846153847,116.82807908812674,2.1355045439297267,570.7654940454502,31.709194113636123,0.038942693029375586
158,e81b646874326bd85c36da6c43a27087827a62e4,Rodrigo Tobar,2019-09-13 04:02:00+00:00,"Revert ""Adding dummy arguments to python backend""

This reverts commit fc8429f24968dc1d573e529a1139e9b2581c28ac.",False,6,3,3,,,1.0,1380,739,951,50,2.5783132530120483,77.35463355500369,14.923076923076923,23.846153846153847,116.82807908812674,2.1355045439297267,570.7654940454502,31.709194113636123,0.038942693029375586
159,54c3c26392ba225ba0c8f18e7d0fb558e9485385,Rodrigo Tobar,2019-09-15 13:08:26+00:00,"Adding multiple_values support to python backend

This addresses #9. When multiple_values is set we continue iterating
over the lexer and the parse_value routine until they run out of values.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,30,17,13,1.0,1.0,0.0,1384,743,955,50,2.602409638554217,77.29266371425247,15.0,24.0,117.94426948744271,2.1306257018415824,575.2025009846824,31.955694499149022,0.039314756495814236
160,930f2bcebc6319a3a675c213dbbd3a4ae8f650f0,Rodrigo Tobar,2019-09-15 13:10:27+00:00,"Add python backend to multiple_values test

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,4,2,2,,,,1384,743,955,50,2.602409638554217,77.276017904647,15.153846153846153,24.23076923076923,119.46271671346537,2.1805636671021285,595.2113195131983,33.06729552851102,0.03982090557115513
161,e007460afe7fdced17831f6c00c29cbbb1e5496a,Rodrigo Tobar,2019-09-15 13:10:37+00:00,"Testing multiple_values with more than 2 objects

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,2,3,0.0,0.0,0.0,1383,742,954,50,2.602409638554217,77.25610459120811,15.307692307692308,24.692307692307693,122.24386503983523,2.196966382034255,612.6857621716291,34.03809789842384,0.0407479550132784
162,20112dc84a7059f3eee073f3adcb7a133ffcc68f,Rodrigo Tobar,2019-09-15 14:08:05+00:00,"Passing **kwargs from items through to parse

This was suggested in #10, definitely a good idea for ease of use and
consistency of the API. In the case of the python backend this was
actually wrongly implemented.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,18,9,9,,,0.0,1383,742,954,50,2.602409638554217,77.25610459120811,15.307692307692308,24.692307692307693,122.24386503983523,2.196966382034255,612.6857621716291,34.03809789842384,0.0407479550132784
163,fc6c8558aedf4b7c0442f4a699b59ecda2c28d79,Rodrigo Tobar,2019-09-15 14:16:33+00:00,"Testing multiple_values with items()

Now that ijson.items supports multiple_values too we are testing that
backends supporting multiple_values in parse() work correctly with
items() as well.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,44,38,6,0.0,1.0,1.0,1415,752,986,50,2.6265060240963853,77.10296354050783,15.461538461538462,24.923076923076923,123.81349170194478,2.1944525559910173,619.0229627541032,34.39016459745018,0.04127116390064826
164,c796cd3c6c8ce22fcb79da27c1af765e591c719c,Rodrigo Tobar,2019-09-17 06:02:37+00:00,"Adding support for new map_type option

This option is only relevant for the ijson.items function and indicates
a different mappable type to use when constructing single objects out of
a JSON mapping object. The default is still to use a dict.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,73,46,27,0.5882352941176471,0.6470588235294118,0.0,1422,759,993,50,2.619047619047619,77.03144471563006,15.615384615384615,25.153846153846153,125.42656484382293,2.188202555991017,623.6632089770478,34.64795605428043,0.04180885494794098
165,0e558d4c645196939e08d7e6e53d0da349303486,Rodrigo Tobar,2019-09-17 06:21:17+00:00,"Improving common.number implementation

The previous implementation always constructed a Decimal, even if a
simple integer was finally returned. Removing the Decimal construction
should thus give us better performance.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,8,3,5,0.0,0.0,0.0,1420,757,991,50,2.619047619047619,77.0355574509185,15.615384615384615,25.153846153846153,125.42656484382293,2.188202555991017,623.6632089770478,34.64795605428043,0.04180885494794098
166,73fd4c448d0a69be921d55f9ba8740bcc693190b,Rodrigo Tobar,2019-09-19 08:34:58+00:00,"Changing order of authors

It's been a full version with changes, issues addressed, pull requests,
new features, etc, so I think it's safe to re-sort the list of
maintainers to release some pressure off Ivan.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,4,2,2,,,,1420,757,991,50,2.619047619047619,77.0355574509185,15.615384615384615,25.153846153846153,125.42656484382293,2.188202555991017,623.6632089770478,34.64795605428043,0.04180885494794098
167,067e680534f33f1449843d89ed395a9c6b9ae3d8,Rodrigo Tobar,2019-09-19 08:37:07+00:00,"ijson 2.5

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,3,2,,,,1420,757,991,50,2.619047619047619,77.0355574509185,15.615384615384615,25.153846153846153,125.42656484382293,2.188202555991017,623.6632089770478,34.64795605428043,0.04180885494794098
168,348add7a198fbc5e563a9b81b80d6d479b5a157d,Rodrigo Tobar,2019-10-01 02:28:36+00:00,"New function for automatic reader conversion

All ijson backends, except for the python backend, need a bytes reader
in order to work. With the change of default backends in ijson 2.5 it
became clear that many people relied on the ability of the python
backend to accept string readers, and thus ijson's public API broke.

This commit adds a new function to turn a utf8-encoded string reader
into a bytes reader. It is mostly intended for use within ijson, but
users might find some of it useful.

Related issues: #12, #13

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,33,33,0,1.0,1.0,1.0,1453,774,1016,50,2.5681818181818183,75.22978048093752,15.846153846153847,25.384615384615383,126.25386388245089,2.226664094452556,624.6733883042205,34.704077128012244,0.0420846212941503
169,418ec4666cda0d5eb6aee6f0dbbbe998d31a36fa,Rodrigo Tobar,2019-10-01 02:34:32+00:00,"Using new automatic reader conversion in backends

All backends, except for the python backend, require a bytes reader, but
users didn't expect this and some were give us a utf8-encoded string
reader instead. With this commit we check and automatically translate
the given reader so users don't have to bother (yet) doing it. Together
with the translation a DeprecationWarning is issued to make it clear
that this automatic translation won't be there for long.

Related issues: #12, #13

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,47,31,16,0.0,0.7692307692307693,0.6923076923076923,1468,787,1030,50,2.561797752808989,75.06904350475398,16.153846153846153,26.0,130.29910584991646,2.2300828978713594,644.4573789339609,35.80318771855338,0.04343303528330549
170,7332c801eb2f92385570b189373aa838f5f89aef,Rodrigo Tobar,2019-10-01 03:24:17+00:00,"ijson 2.5.1

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,3,2,,,,1468,787,1030,50,2.561797752808989,75.06904350475398,16.153846153846153,26.0,130.29910584991646,2.2300828978713594,644.4573789339609,35.80318771855338,0.04343303528330549
171,91726fe83e8d4534ef757c647a81b0e6aca035db,Rodrigo Tobar,2019-10-15 03:10:28+00:00,"New benchmarking utility

It contains a handful of generated JSON contents to use as a base for
benchmarking, but can also take user-provided files. It's also fairly
flexible on which backends to use, etc.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,143,143,0,0.40860215053763443,0.40860215053763443,0.7741935483870968,1611,884,1141,57,2.588235294117647,73.29035371496936,20.714285714285715,32.714285714285715,175.17998195967124,2.2612674527853094,742.9259226075319,41.2736623670851,0.05839332731989042
172,78d317e6f087a06f19d5cb0e52d90655b408cfe7,Rodrigo Tobar,2019-10-15 04:05:00+00:00,"It's ""size"", not ""s""

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,2,1,1,,,,1611,884,1141,57,2.588235294117647,73.29035371496936,20.714285714285715,32.714285714285715,175.17998195967124,2.2612674527853094,742.9259226075319,41.2736623670851,0.05839332731989042
173,a56a9197af0e87e5fa9656d10f60689f1a25dfc8,Rodrigo Tobar,2019-10-15 04:36:22+00:00,"Improving error handling in yajl2 backend

In ctypes in general it appears not to be possible to propagate an
exception originating from a callback (e.g., KeyboardInterrupt) back
into the main python code that initiates the call to the C library. This
solution tries to capture these and convert them into a proper return
code. Note however that there's still a small window of opportunity for
a new exception to be raised.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,6,5,1,1.0,1.0,1.0,1615,888,1145,57,2.588235294117647,73.22284262958321,20.714285714285715,32.714285714285715,175.17998195967124,2.2612674527853094,742.9259226075319,41.2736623670851,0.05839332731989042
174,eb63625c6e22609f4f194cdfd8e548751fa00347,Daniel Foerster,2019-11-26 03:21:42+00:00,"Add greedy exhaustion tests

Originally written by Daniel Foerster, adjusted by Rodrigo Tobar to
reflect current situation of object building, and help clarifying what
is causing issues in #15.",False,14,14,0,1.0,1.0,1.0,1629,897,1158,57,2.592233009708738,73.13469218757714,20.714285714285715,32.714285714285715,175.17998195967124,2.2612674527853094,742.9259226075319,41.2736623670851,0.05839332731989042
175,d1869c8ea642e4f916b4bfd484f1e0d63c94f05d,Rodrigo Tobar,2019-11-26 03:22:18+00:00,"Catching only numeric conversion errors

The new set of tests introduced in the previous commit highlighted a
corner case that wasn't properly covered, and that was mentioned in #16:
the yield expression within the try/expect block can also actually raise
an exception if the generator is being destroyed before it is consumed
fully (e.g., if manually iterated over via next() and then discarded).
In these cases an UnexpectedSymbol exception would be raised during the
destruction of the generator object, which would be ignored by the
interpreter.

The solution is simple: include *only* the number parsing logic within
the try/catch, leaving the yield expression outside to get a normal
logic flow.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,4,3,1,0.0,0.0,0.0,1631,899,1160,57,2.6019417475728157,73.10864816825496,20.714285714285715,32.714285714285715,175.17998195967124,2.2612674527853094,742.9259226075319,41.2736623670851,0.05839332731989042
176,4cd31ccb3a4712c16bd27716fd0c4bafc47b0039,Daniel Foerster,2019-11-26 04:31:15+00:00,"Process Known Single-Character Lexemes Immediately

Addresses #15",False,3,3,0,0.0,0.0,1.0,1634,902,1163,57,2.6116504854368934,73.05613378735185,20.857142857142858,33.357142857142854,179.31902389638552,2.3521765436944007,834.5973206603319,46.36651781446288,0.05977300796546183
177,2c69c6fdb5cae6cb7bc7b1454e1b9ca92c0a9e4c,Daniel Foerster,2019-11-26 04:31:15+00:00,"Handle forgotten unary lexemes

Also avoid building a new set every time",False,3,2,1,,,,1635,903,1164,57,2.6116504854368934,73.04818716015248,20.857142857142858,33.357142857142854,179.31902389638552,2.3521765436944007,834.5973206603319,46.36651781446288,0.05977300796546183
178,b171bd30b5a69e5c8d77937eeef45407cf29233f,Daniel Foerster,2019-11-26 04:31:15+00:00,Think a little harder about offsets,False,5,1,4,1.0,1.0,0.0,1632,900,1161,57,2.6116504854368934,73.07468832855429,21.071428571428573,33.142857142857146,178.7488550693613,2.3734531394390816,844.8043511438318,46.93357506354621,0.059582951689787104
179,f5cece12189e36f2cb4f2f10cfb27b1bb2391686,Rodrigo Tobar,2019-11-26 07:23:46+00:00,"Adding unit tests for lazy reading

These are basically based on those developed initially by Daniel
Foerster, but they make the intent of the tests clearer, and also the
fact that the python backend can lazily read only strings, not bytes.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,43,41,2,1.0,1.0,1.0,1671,927,1186,59,2.5727272727272728,72.8734228393488,21.285714285714285,33.5,181.21828281497784,2.3704631062164903,854.8747025165555,47.493039028697524,0.060406094271659286
180,7356b985cb5b52b4549f3436fe304a3b5eb8568c,James McKinney,2020-01-03 20:32:52+00:00,Update code in heredoc to work with latest code,False,10,5,5,,,,1671,927,1186,59,2.5727272727272728,72.8734228393488,21.285714285714285,33.5,181.21828281497784,2.3704631062164903,854.8747025165555,47.493039028697524,0.060406094271659286
181,cc91dca147f4dd98136b6287f4611dacd2676b8e,Rodrigo Tobar,2020-01-06 01:49:47+00:00,"Making example code compatible with py2.7

I'm changing the value in the dictionary to be a number instead of a
string because later I intend to add doctest support, which would break
with the difference in (unicode) string printing between 2.7 and 3.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,4,2,2,,,,1671,927,1186,59,2.5727272727272728,72.8734228393488,21.285714285714285,33.5,181.21828281497784,2.3704631062164903,854.8747025165555,47.493039028697524,0.060406094271659286
182,4f999705e88d220b1e18f653c30ab3d9bab2c0f1,Rodrigo Tobar,2020-01-06 01:52:01+00:00,"Making example testable via doctest

We are including the output of printing build.value into the screen,
which wasn't there before.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,19,10,9,,,,1672,927,1186,59,2.5727272727272728,72.85952434204631,21.285714285714285,33.5,181.21828281497784,2.3704631062164903,854.8747025165555,47.493039028697524,0.060406094271659286
183,a8ca282efcaa9799b1560586db644982757df76d,Rodrigo Tobar,2020-01-07 02:18:23+00:00,"python2: JSON key names as unicode, not str

JSON key names are allowed to take almost any character, just like
string values. However, most backends were not returning a unicode
object in python2, but a str object instead containing the utf-8 encoded
bytes of the key name. This is the wrong thing to return, and in fact
the built-in json module returns unicode objects in all cases (which can
still be safely compared to str objects in most cases).

The fact that these backends did not return unicodes seems to be a
historical oversight, as the original b2s() calls were in place from the
first commit introducing 2/3 compatibility (see 56234d6) and were never
modified after that. In the case of the C backend this was definitely my
error. The python backend on the other hand was the only ""good"" one.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,10,3,7,,,,1672,927,1186,59,2.5727272727272728,72.85952434204631,21.285714285714285,33.5,181.21828281497784,2.3704631062164903,854.8747025165555,47.493039028697524,0.060406094271659286
184,bd37750016012bb2b834517ac747528032c42f1b,Rodrigo Tobar,2020-01-07 02:18:23+00:00,"Adding test for non-ascii key string

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,9,7,2,0.0,1.0,1.0,1677,927,1191,59,2.5727272727272728,72.85256969220268,21.285714285714285,33.5,181.21828281497784,2.3704631062164903,854.8747025165555,47.493039028697524,0.060406094271659286
185,2953d743a60d3097ebbf276acbcbb509d36e411f,Rodrigo Tobar,2020-01-07 02:18:24+00:00,"Adjusting doctest check to pass with python2/3

Python 2 produces unicodes for JSON key names and string values, while
python 3 produces str objects, and hence there is a difference in how
they values are *printed* in these two different versions. One can still
safely *compare* str and unicode objects in python 2 though, which is
what we are now doing in our doctest sample.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,6,3,3,,,,1677,927,1191,59,2.5727272727272728,72.85256969220268,21.285714285714285,33.5,181.21828281497784,2.3704631062164903,854.8747025165555,47.493039028697524,0.060406094271659286
186,7b18df8a720c9dacb92f49ed9f92f29f85249e6e,Rodrigo Tobar,2020-01-07 02:18:24+00:00,"Allow pointing to an arbitrary yajl library

This allows systems with yajl2 installations to be tested against a
different yajl library (e.g., 1.x) without too much fuss.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,3,2,,,,1678,928,1192,59,2.590909090909091,72.6561972707157,21.642857142857142,33.92857142857143,183.25978273054096,2.406177391930776,859.976606812431,47.776478156246164,0.06108659424351365
187,f17e160267bf39b04f32bf3fcc8fb696c796a793,Rodrigo Tobar,2020-01-20 10:19:16+00:00,"Initial implementation of kvitems functionality

This new functionality, suggested in #18, allows users to iterate over
(key, value) pairs representing object members for objects with a given
prefix rather than iterating over the objects themselves. This opens up
the possibility of iterating not only over big collections of objects,
but over big objects themselves as well, without exhausting system
memory.

This is a feature that users have required for a time now (see #18 and
https://github.com/isagalaev/ijson/issues/62), so it makes sense to
offer it out of the box.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,98,98,0,0.64,0.64,0.44,1776,988,1259,61,2.5289256198347108,72.42072294343976,22.642857142857142,35.785714285714285,196.04615086578707,2.4519034439795027,938.4274113648254,52.134856186934734,0.06534871695526236
188,d4cca873471c914aa7c8a89e266ce7918c7f93ff,Rodrigo Tobar,2020-01-20 10:19:20+00:00,"Adding kvitems to ijson top-level module

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,1,1,0,,,,1777,989,1260,61,2.5289256198347108,72.39504212210804,22.642857142857142,35.785714285714285,196.04615086578707,2.4519034439795027,938.4274113648254,52.134856186934734,0.06534871695526236
189,96c52739baf75bfb30de7c0d1530623ff9e120a3,Rodrigo Tobar,2020-01-20 10:19:21+00:00,"Benchmarking tool can measure different methods

This is useful to estimate the cost of each different layer of iteration
in our code, which adds its own bit of logic and code execution.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,10,9,1,0.0,0.0,0.42857142857142855,1785,995,1267,61,2.5371900826446283,72.30563640638137,22.857142857142858,36.0,197.8674707707291,2.4896276245608258,972.864920507377,54.048051139298714,0.06595582359024303
190,db5a77d718b5fcc702e12cbf1a3737a661b0e49c,Rodrigo Tobar,2020-01-20 15:38:49+00:00,"Removing unnecessary list

This should never have been there in the first place, but seems to have
always been present.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,1,0,1,,,,1784,994,1266,61,2.5371900826446283,72.31481817083564,22.857142857142858,36.0,197.8674707707291,2.4896276245608258,972.864920507377,54.048051139298714,0.06595582359024303
191,a5ed1595a8beff2abe869587b88f123c1af3b211,Rodrigo Tobar,2020-01-21 03:59:30+00:00,"Improved implementation of kvitems

This implementation is clearer to follow than the previous one, doesn't
use str.startswith, doesn't require string concatenation, and has less
branching. Overall it has better performance than the previous one (by
~10-20% depending on the case, based on simple observations), so it's
definitely a win to put it in.

Also renamed ""current"" to ""path"", which probably makes the code easier
to understand.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,29,14,15,1.0,1.0,1.0,1783,994,1265,59,2.4958677685950414,72.40368375705712,22.5,35.285714285714285,192.94584108785472,2.489474625784816,948.760154376525,52.70889746536249,0.06431528036261826
192,9d14e16683eff8b65c92479f84a58c00ddc7d375,Rodrigo Tobar,2020-01-21 04:14:29+00:00,"Initial kvitems implementation for C backend

This implementation follows the same logic of the python kvitems
function, reusing the builder_t object used by the items function.
Performance wise, kvitems is slightly faster than items, which is what
we expected in the first place.

This commit provides a first implementation for #21.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,177,173,4,0.14893617021276595,0.46808510638297873,0.7127659574468085,1781,994,1266,59,2.4958677685950414,72.40368375705712,22.5,35.285714285714285,192.94584108785472,2.489474625784816,948.760154376525,52.70889746536249,0.06431528036261826
193,9e4020772ce830d83233b23f98453110b6f7841e,Rodrigo Tobar,2020-01-28 09:12:24+00:00,"ijson 2.6.0

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,3,2,,,,1781,994,1266,59,2.4958677685950414,72.40368375705712,22.5,35.285714285714285,192.94584108785472,2.489474625784816,948.760154376525,52.70889746536249,0.06431528036261826
194,1be2df4b9d0ce8e5c67ddc255f598e967515ec3a,Rodrigo Tobar,2020-02-03 07:54:06+00:00,"Adding benchmark with decimal values

This is useful to see the difference between parsing ints and Decimals,
and to exercise more code in general.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,4,4,0,1.0,1.0,1.0,1785,997,1269,59,2.4918032786885247,72.34293001930236,22.928571428571427,35.92857142857143,197.9934812901328,2.4884687469820355,964.0265595215023,53.5570310845279,0.06599782709671094
195,eff2dc3f12c284eb5c96b89adebf06c7fd64932a,Rodrigo Tobar,2020-02-03 07:58:56+00:00,"ijson 2.6.1

This is a small patch release that fixes a warning in python 3.8;
otherwise it's identical to 2.6.0.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,8,7,1,,,,1785,997,1269,59,2.4918032786885247,72.34293001930236,22.928571428571427,35.92857142857143,197.9934812901328,2.4884687469820355,964.0265595215023,53.5570310845279,0.06599782709671094
196,99406712523406a15a443f45c53b61a9946fe13d,Rodrigo Tobar,2020-02-06 08:33:17+00:00,"Print a progress message when generating data

Otherwise users may have the impression that some actual ijson parsing
work is going on when in reality we are only generating the data that
will be parsed.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,26,24,2,0.9230769230769231,0.9230769230769231,0.9230769230769231,1807,1012,1284,59,2.4488188976377954,72.14987574465766,23.071428571428573,36.142857142857146,199.69030011436558,2.4881650110298232,969.1568220863315,53.842045671462856,0.0665634333714552
197,3f1e2eb79ca9a0e7a76fd592ba8f22b64f0a5d24,Rodrigo Tobar,2020-02-06 08:34:04+00:00,"New benchmarks for empty lists/dicts

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,8,8,0,1.0,1.0,1.0,1815,1018,1290,59,2.441860465116279,72.05410778768298,23.642857142857142,37.0,206.5448105947141,2.487080706340205,989.8733013804807,54.99296118780448,0.06884827019823804
198,2d90b080ff0df5adf593dbfeec93cc831932b8b0,Rodrigo Tobar,2020-02-06 08:34:23+00:00,"Allow changing the buffer size in benchmarks

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,8,7,1,0.0,0.0,0.6666666666666666,1821,1020,1296,59,2.441860465116279,72.01240635392489,24.0,37.42857142857143,210.16280014642012,2.5241608526654464,1039.3241693718826,57.740231631771245,0.07005426671547337
199,f078a8e48e3ca46e72fe9c0ecd3512b3c96d715b,Rodrigo Tobar,2020-02-06 08:34:41+00:00,"Print the method under test

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,6,3,3,,,,1821,1020,1296,59,2.441860465116279,72.01240635392489,24.0,37.42857142857143,210.16280014642012,2.5241608526654464,1039.3241693718826,57.740231631771245,0.07005426671547337
200,3ec6f4950eb75d904cecc5ad7b8d230f53685207,Rodrigo Tobar,2020-02-07 05:56:38+00:00,"New JSON_PARSE_EVENTS constant

This holds the list events we expect the parse() generator to produce
for the given JSON input.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,49,49,0,,,,1870,1021,1345,59,2.441860465116279,71.95555229719768,24.0,37.42857142857143,210.16280014642012,2.5241608526654464,1039.3241693718826,57.740231631771245,0.07005426671547337
201,c32bcc7fa66833bba511b21704a82df0118bcb1a,Rodrigo Tobar,2020-02-07 05:57:47+00:00,"Testing parse() directly

We didn't have an explicit test for the parse() generator until now,
which got otherwise tested implicitly by the different calls for
items() and kvitems(). This new test should catch any problems that we
*might* have in parse() itself.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,4,4,0,1.0,1.0,1.0,1874,1024,1348,59,2.4307692307692306,71.93351194693484,24.0,37.42857142857143,210.16280014642012,2.5241608526654464,1039.3241693718826,57.740231631771245,0.07005426671547337
202,6b81755b73cbc3322a34f357fd2ada518ec8480b,Rodrigo Tobar,2020-02-07 06:00:13+00:00,"Using global constant for comparison

There was no need for having this duplicated object sitting here; in
fact it can potentially make further modifications on the JSON
content used by the unit tests more difficult.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,25,1,24,1.0,0.0,0.0,1851,1023,1325,59,2.4307692307692306,71.96049926725226,24.0,37.42857142857143,210.16280014642012,2.5241608526654464,1039.3241693718826,57.740231631771245,0.07005426671547337
203,d7ce2e85b17d09499a5e6214dc4efc865a8cd41d,Rodrigo Tobar,2020-02-07 06:03:46+00:00,"Adding small test case for empty lists

The big JSON content used by our unit tests didn't have such a
construct, so let's add one.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,19,18,1,1.0,1.0,1.0,1868,1023,1342,59,2.4307692307692306,71.94269168756686,24.0,37.42857142857143,210.16280014642012,2.5241608526654464,1039.3241693718826,57.740231631771245,0.07005426671547337
204,b5ccfcbbb2c567094b7832961ad21115d2eb1635,Rodrigo Tobar,2020-02-07 06:04:49+00:00,"Encapsulating test class creation

Firstly, this avoid polluting the module's namespace, but it also makes
this code reusable if we want to apply a similar approach for other
classes (which we will in the future, once we implement the new
asyncio-enabled generators).

Also, let's move from the *Parse suffix to *Tests, which is a more
meaningful name.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,39,21,18,0.0,0.0,1.0,1871,1025,1344,59,2.4580152671755724,71.93442387311104,24.0,37.42857142857143,210.16280014642012,2.5241608526654464,1039.3241693718826,57.740231631771245,0.07005426671547337
205,6889c00fcccb8b7d83cbd93f3bc58879e3178af1,Rodrigo Tobar,2020-02-07 06:07:12+00:00,"Remove unused variable

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,2,1,1,,,,1871,1025,1344,59,2.4580152671755724,71.93442387311104,24.0,37.42857142857143,210.16280014642012,2.5241608526654464,1039.3241693718826,57.740231631771245,0.07005426671547337
206,46b00b4ba9dc3fc303534de73fb53b64a1f9bf82,Rodrigo Tobar,2020-02-07 07:10:35+00:00,"Making utils useful again

Until now the utils module hasn't seen any usage in ijson, and thus its
code can be considered dead. However, with the new design we are
planning for turning generators into coroutines, we will start using it
again. Or at least the coroutine decorator will be useful, the rest can
go. Taking the place of the removed functions are new ones that will aid
us on creating the coroutine pipelines we want to offer with ijson, as
well as code turning these new coroutine pipelines into the old-style
generators.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,84,45,39,0.0,1.0,0.0,1877,1025,1342,59,2.4166666666666665,73.28986351386723,22.642857142857142,35.92857142857143,203.79090887625475,2.2933916218962156,1018.7380591144253,56.59655883969028,0.06793030295875158
207,d24325418031b9f770f127dfc1b4917920b01ec8,Rodrigo Tobar,2020-02-07 07:36:03+00:00,"Adding new string_reader utility function

This is the inverse function of bytes_reader(), as it ensures the
file-like object reads (unicode) strings, not bytes. This check is
currently done by the python backend, which works on unicode strings
rather than bytes, but since we are planning to remove I/O from the
generators (and turn them into coroutines) the check now needs to be
somewhere else.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,7,7,0,1.0,1.0,1.0,1884,1031,1347,59,2.4135338345864663,72.9552908991022,22.785714285714285,36.142857142857146,204.61163923308854,2.2933916218962156,1019.558789471259,56.6421549706255,0.06820387974436284
208,b5ad189c9f992da1fe342e902b66a3bb9244c026,Rodrigo Tobar,2020-02-09 10:00:05+00:00,"New parse, kvitems and items coroutines

These have a _coro suffix in their names to distinguish them from the
originals. Although they are almost exact copies from the corresponding
generator, they receive values and dispatch their results to a target
(which should be a coroutine-like object) rather than pull values from
another generator and yield their results.

Just like the generators contained in this module, these coroutines are
meant to be reused by almost all backends (with the exception of the C
backend, which will re-implement them in the name of performance).

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,110,110,0,0.5510204081632653,0.5510204081632653,0.4489795918367347,1994,1090,1400,60,2.485294117647059,72.39345309864574,24.142857142857142,39.0,224.73078538315758,2.291198639440075,1116.16672659857,62.00926258880943,0.07491026179438584
209,dfb347755398314e9b259910cfbe3831b9c0a0c3,Rodrigo Tobar,2020-02-09 10:00:45+00:00,"New backend enriching mechanism

Until now backends offer their own copies of parse, items and kvitems by
calling into the version of the generator contained in this module. This
commit lays out the changes required for the backends to not have to
repeat themselves in this process: instead of each one having their own
copy of the same code, they will all call into common.enrich_backend,
which will add any missing component (coroutines, generators, etc.) into
the backend, with the backend only needing the basic_parse_basecoro
coroutine to be implemented. If a backend (like the C backend) wants to
provide their own implementation of some of these routines then
enrich_backend doesn't overwrite them with the generic ones.",False,94,93,1,1.0,1.0,0.4084507042253521,2086,1136,1467,60,2.4246575342465753,72.24214077221416,24.714285714285715,40.0,232.38148539716863,2.3936870032066344,1239.2783232494746,68.84879573608193,0.0774604951323895
210,449ca1b8025ffa3be6a0eb9958b1a56032bfd066,Rodrigo Tobar,2020-02-09 10:02:03+00:00,"yajl backend ported to be coroutine-based

The only function it provides is basic_parse_basecoro, which sets up
yajl with a set of callbacks that send the (event, value) tuples down to
the target.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,38,9,29,0.45454545454545453,0.45454545454545453,0.8181818181818182,2066,1124,1458,60,2.4335664335664338,72.43948349082198,24.428571428571427,39.42857142857143,230.06211757485227,2.3299114930025526,1232.9893909257758,68.49941060698755,0.07668737252495074
211,8f6d5435838ac71fa88de87302d44f6fce998338,Rodrigo Tobar,2020-02-09 10:02:14+00:00,"yajl2 backend ported to be coroutine-based

The only function it provides is basic_parse_basecoro, which sets up
yajl with a set of callbacks that send the (event, value) tuples down to
the target.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>

MERGE yajl2 backend",False,36,8,28,0.45454545454545453,0.45454545454545453,0.8181818181818182,2046,1113,1449,60,2.45,72.56033334228532,24.142857142857142,39.07142857142857,228.4539910272934,2.300574758308675,1228.6548040904647,68.25860022724802,0.07615133034243113
212,32b2f7391623a734614447ce5e8c2e33d793c6f8,Rodrigo Tobar,2020-02-09 10:02:20+00:00,"yajl2_cffi backend ported to be coroutine-based

The only function it provides is basic_parse_basecoro, which sets up
yajl with a set of callbacks that send the (event, value) tuples down to
the target.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>

MERGE yajl2_cffi backend",False,54,12,42,1.0,1.0,1.0,2016,1099,1439,56,2.4671532846715327,72.43881274470934,23.857142857142858,38.714285714285715,226.84586447973453,2.271238023614798,1224.3202172551535,68.01778984750851,0.0756152881599115
213,99dd5ca59bd9234e1c54ca4e1e132a7b2d9ead3d,Rodrigo Tobar,2020-02-09 10:02:27+00:00,"python backend ported to be coroutine-based

Since this backend implements a lexer and a parser, it was a bit more
difficult to port to be coroutine-based. The main problem was that as
previously implemented, the backend had recursive calls into the parsing
functions, which doesn't work in a coroutine-based world. Hence we have
to translate the parsing functions into a single coroutine, where state
is explicitly kept in the coroutine instead of relying on the call stack
to keep it for us.

Differently from the other backends, this one relies on receiving
unicode strings rather than byte strings, and needs to signal this
accordingly when calling enrich_backend.

Because of all these differences, it doesn't make sense to keep the old
Stream tests anymore. They could potentially be rewritten, but it
doesn't make too much sense, given that the python backend is always
unit tested anyway.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,284,160,124,0.0,0.0,1.0,2052,1120,1461,64,2.565891472868217,72.58943619330962,24.142857142857142,40.57142857142857,238.69179321266412,2.3367961617636746,1378.9933958013758,76.61074421118755,0.07956393107088804
214,1c16424c05a70d71ef9e33858e05dc1487e1603b,Rodrigo Tobar,2020-02-10 07:13:33+00:00,"yajl2_c backend ported to be coroutine-based

The new C extension provides an implementation for each of the four base
coroutines and generators, and is simpler to integrate into the
wrapping python module, which we had to slightly modify to expose all
the underlying functionality. By switching which C sources make up the
extension, plus changing the thin python module that calls into it, we
effectively change the implementation of the yajl2_c backend.

This new broken-down C extension has now header files that are not
automatically included in source distributions; let's add those to the
MANIFEST file.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,44,34,10,1.0,1.0,0.5,2075,1137,1479,63,2.518796992481203,71.34164832016651,24.785714285714285,41.42857142857143,241.40887178532896,2.37251044747796,1380.3519350877084,76.68621861598379,0.080469623928443
215,c54ef20484a393a3db2ca54edf635f3cecabf947,Rodrigo Tobar,2020-02-10 07:14:23+00:00,"New pre-chained, user-facing coroutines

Now that we implemented coroutines for all modules, we can expose them
(in addition of the old generators) at the top-level ijson module from
the default backend. Users should not be offered the low-level
coroutines implementing the different parsing bits of logic though; if
they wanted to use them they would have to chain them themselves, making
it a bit awkward to work with them. Instead we offer pre-chained
co-routines that users can invoke directly, which receive data chunks on
one end, and spit the corresponding event on the other.

These user-facing coroutines are named *_coro, which is why the actual
coroutines implementing the logic bits are called *_basecoro.

Also, since we are giving users the ability to work with coroutines
directly, we should also make it easier for them to prime *their*
target coroutines. For this we are now exposing the utils.coroutine
decorator at the top-level ijson module for easy import in user code.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,45,45,0,1.0,1.0,0.7222222222222222,2120,1162,1516,63,2.4817518248175183,71.07670749869312,24.928571428571427,42.07142857142857,245.78465305818918,2.38836602047639,1422.1327399079532,79.00737443933073,0.08192821768606307
216,7d119f1a5188bcbfadc0aeb4d82c388b26d50044,Rodrigo Tobar,2020-02-10 07:14:23+00:00,"Check when running python 3.5+

This will be needed for all asyncio-related additions, which we plan to
support only for 3.5+ pythons (to take advantage of the ""async for""
constructs).

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,1,1,0,,,,2121,1164,1517,63,2.4817518248175183,70.93145305324546,25.142857142857142,42.285714285714285,246.82130873130686,2.4240803061906755,1424.6520091319157,79.14733384066197,0.0822737695771023
217,61aa91e56ff0c95452cac7e7390233480c01b5b0,Rodrigo Tobar,2020-02-10 07:14:23+00:00,"New async iterable versions of generators

When using python 3.5+ we further enrich a backend by adding a set of
*_async asynchronous iterables (usable in ""async for"" loops)
corresponding to each of the four coroutines offered by ijson. This
means we now have built-in support for ""async for"" iteration in asyncio
event loops, given that the file-like object can be asynchronously read
of course.

The way we iterate over the results in our async_iterator class means we
pop them out from the beginning of the collection rather than the end,
which for lists is a costly operations requiring moving all remaining
elements in memory. We thus use a deque instead, with an additional
send method (a la sendable_list). An alternative would have bee to use
sendable_list and then iterate over the results, keeping track of which
had been returned to eventually empty the list and start again (like we
do in coros2gen), but after some experimentation it turned out it didn't
perform as well.

Like with the coroutines, we are also making these async iterators
available at the top-level ijson module.",False,88,86,2,0.42105263157894735,0.42105263157894735,0.6140350877192983,2205,1222,1580,63,2.458904109589041,72.65190810200615,23.6,39.86666666666667,233.237642583472,2.267434768747731,1353.0386387869537,75.16881326594186,0.07774588086115733
218,12cfb1e0f3e7672249377b1e054642c7dbe73f48,Rodrigo Tobar,2020-02-10 07:14:23+00:00,"Removing old generators found in common

These generators are now created on demand, based on the coroutines
implemented by each backend. There is no need to test them separately
anymore either.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,146,0,146,0.6829268292682927,0.6829268292682927,0.4268292682926829,2059,1139,1497,62,2.3840579710144927,73.12069855821899,22.2,37.0,212.07476605074226,2.2802825453685025,1224.6432536717214,68.03573631509559,0.07069158868358076
219,1834614113fa61ec442fd1378ff6f0980cb77169,Rodrigo Tobar,2020-02-10 07:14:23+00:00,"Adding initial asyncio iterator tests

Also, let's actually run them automatically in Travis when possible.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,73,72,1,1.0,1.0,0.8979591836734694,2124,1191,1549,63,2.3175675675675675,74.80065489833031,20.8125,34.6875,198.82009317257086,2.1377648862829712,1148.1030503172387,63.78350279540212,0.06627336439085696
220,41a286ce7efb910ddb8903b50a2242b2ebbb6b76,Rodrigo Tobar,2020-02-10 07:14:23+00:00,"Adding benchmarking for async methods

Since we want a single source file for the benchmarks that loads in all
python versions we use exec() to add the 3.5+ code when needed.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,63,56,7,0.36363636363636365,0.36363636363636365,0.5,2173,1213,1586,67,2.3378378378378377,74.71098404248588,21.125,35.1875,202.85199313591448,2.17259059823561,1200.8909056971675,66.7161614276204,0.06761733104530483
221,2140c7faf184a29b6edf3874a362577f23b25ef2,Rodrigo Tobar,2020-02-10 07:14:24+00:00,"Small import cleanup

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,3,1,2,,,,2172,1212,1585,67,2.3378378378378377,74.71711358993464,21.125,35.1875,202.85199313591448,2.17259059823561,1200.8909056971675,66.7161614276204,0.06761733104530483
222,69341274add9ef0854744f0ff524ca2fc00fa44a,Rodrigo Tobar,2020-02-10 07:14:24+00:00,"Adding yajl to the list of backends to import

This was a bit oversight from the time I changed how the default backend
gets selected, I simply left the yajl backend out of the list for some
reason.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,2,1,1,,,,2172,1212,1585,67,2.3378378378378377,74.71711358993464,21.125,35.1875,202.85199313591448,2.17259059823561,1200.8909056971675,66.7161614276204,0.06761733104530483
223,d265795687b822107e350cd5cedef0333cfcb8fd,Rodrigo Tobar,2020-02-10 07:14:30+00:00,"ijson 3.0rc1

This is the first publicly released version of ijson containing the new
underlying design for the parsing logic, plus async support out of the
box. This is going out in the form of a release candidate mainly to
allow users to give some feedback before doing a final release, but also
because there are still known gaps in the code that need to be
addressed.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,3,2,1,,,,2172,1212,1585,67,2.3378378378378377,74.71711358993464,21.125,35.1875,202.85199313591448,2.17259059823561,1200.8909056971675,66.7161614276204,0.06761733104530483
224,13cd7aac948ec7f6b916fd0d97da9466729a57ea,Rodrigo Tobar,2020-02-21 03:55:36+00:00,"Specific python implementations/versions list

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,11,9,2,,,,2179,1212,1592,67,2.3378378378378377,74.67746556658969,21.125,35.1875,202.85199313591448,2.17259059823561,1200.8909056971675,66.7161614276204,0.06761733104530483
225,53c131c5406151b322b3b6b05e0e6ac4527a4315,Rodrigo Tobar,2020-02-24 07:43:27+00:00,"Making deprecation warning reusable

This will enable us to easily call it from util35 without having to
import too many names.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,7,5,2,1.0,1.0,1.0,2182,1214,1594,67,2.3288590604026846,74.62358325205751,21.125,35.1875,202.85199313591448,2.17259059823561,1200.8909056971675,66.7161614276204,0.06761733104530483
226,855b8b2af0e7882f2c7a4b70d0d17ac2b8a2038b,Rodrigo Tobar,2020-02-24 07:45:05+00:00,"Preparing for file opening mode checking

We do a check on how file-like objects were opened in the case of the
original synchronous to automatically correct the type of data they read
(ijson expects bytes mostly, but some users still give string readers,
which is mostly important in python 3). These new functions will allow
us to do the same in our *_async functions.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,30,29,1,1.0,1.0,1.0,2210,1233,1610,67,2.3181818181818183,73.0711843516242,21.375,35.5625,203.60199313591448,2.214257264902277,1201.3909056971675,66.74393920539819,0.06786733104530483
227,abe7015ef3474b2a4843a21617baee9c87223bb5,Rodrigo Tobar,2020-02-24 07:59:07+00:00,"Ensuring the correct reader is used by *_async

Just like their synchronous counterparts, the *_async functions now
check the data read by the given file-like object, and adjust it
accordingly to meet the requirements of the backend.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,25,15,10,0.4,0.4,0.6,2215,1238,1615,67,2.324675324675325,72.88184434531381,21.5,35.6875,204.14447438627505,2.25071559823561,1202.5065072601183,66.80591707000656,0.06804815812875836
228,5e84cce6f8f306d14a4e35eea7094b65f53134ce,Rodrigo Tobar,2020-02-24 07:59:59+00:00,"Using single type of reader in async tests

The code now automatically adjusts the type of reader depending on the
type of data used by each backend, so there's no further need to do it
manually in the tests.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,19,6,13,0.0,0.0,0.7142857142857143,2208,1231,1608,67,2.311688311688312,72.88184434531381,21.5,35.6875,204.14447438627505,2.25071559823561,1202.5065072601183,66.80591707000656,0.06804815812875836
229,9b8feac15a2d9f63b29d8962df8ca15cbc866fdb,Rodrigo Tobar,2020-02-24 09:45:53+00:00,"Fixing double priming of coroutines

User-facing coroutines had a bug in them as they were being primed
twice; i.e., next() was being called *twice* on them instead of only
once, meaning that the second call produced a None buffer being sent to
the underlying *_basecoro objects.

This was caught while trying to adjust the unit tests that are currently
in place for the old generators, and trying to reuse them for the
coroutines as well.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,8,4,4,,,,2208,1231,1608,67,2.311688311688312,72.88184434531381,21.5,35.6875,204.14447438627505,2.25071559823561,1202.5065072601183,66.80591707000656,0.06804815812875836
230,107c4a93aca4dd3c3357a91e7d0a0316d7fa2f71,Rodrigo Tobar,2020-02-25 05:26:17+00:00,"Correct pipeline constructed

This was clearly a copy/paste typo that didn't get noticed until we
started unit testing the coroutines.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,2,1,1,,,,2208,1231,1608,67,2.311688311688312,72.88184434531381,21.5,35.6875,204.14447438627505,2.25071559823561,1202.5065072601183,66.80591707000656,0.06804815812875836
231,7e42874698610f8665132dfdacc6e128180220b7,Rodrigo Tobar,2020-02-25 07:32:47+00:00,"Removing unused imports from tests

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,1,0,1,,,,2207,1230,1607,67,2.311688311688312,72.88588878793922,21.5,35.6875,204.14447438627505,2.25071559823561,1202.5065072601183,66.80591707000656,0.06804815812875836
232,c54b89a6df14e9a96100e1038d60b55616bcd0f3,Rodrigo Tobar,2020-02-25 13:36:21+00:00,"Complete revamping of unit tests

Because old versions of ijson offered only generators, all unit tests
were written using that method to iterate over JSON content and do
certain checks. We had already written some async-specific basic unit
tests, but they didn't come even close to the amount of coverage the
original set provided.

This commit completely redesigns the way we do unit testing over the
different methods offered by the library. There is a base class that
contains all tests that are common to all methods (coroutines,
generators and async generators), which is combined with a different set
of classes implement the value accumulation logic for each type of
parsing iterator (Coroutine, Generator and Async) to offer the same
suite of tests for all iterators. On top of that, we still generate
individual test classes for each backend. This de-coupling of parsing
accumulation and the corresponding checks makes most of the tests valid
for all methods, and ensures we actually test our new coroutines and
async generators as thoroughly as we did our old generators.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,309,185,124,1.0,0.7777777777777778,0.0,2268,1266,1645,67,2.3395061728395063,72.6690895936636,21.625,36.25,207.63349987131446,2.271387432860933,1228.5929419586942,68.25516344214967,0.06921116662377148
233,a417f3b55fd7f22c001d923857ccbeebb7978cf9,Rodrigo Tobar,2020-02-25 13:41:37+00:00,"Simplifying test execution

Because tests for the async iterators are in a different module, so far
we have required users to run both tests.py and tests_async.py to run
the whole test suite. Although a way to automate this is having an
actual test/ package and have auto-discovery of tests, etc., a different
way is to import tests_async from tests and generate the Async* classes
inside the tests module directly. This way users only need to execute
tests.py, which simplifies things quite a bit in general, specifically
to achieve better coverage with tox, and to simplify our Travis CI
script.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,16,5,11,,,,2267,1267,1646,67,2.3395061728395063,72.6505963473967,21.625,36.25,207.63349987131446,2.271387432860933,1228.5929419586942,68.25516344214967,0.06921116662377148
234,27def7634d9972d16f1a8927a9c147ddd6f271c4,Rodrigo Tobar,2020-02-28 03:08:09+00:00,"Removing unused callbacks

When the yajl_number callback is defined, yajl_integer and yajl_double
are ignored. All callbacks have defined these two callback functions
anyway, and therefore our code coverage is suffering because of this.

This commit removes unused callbacks in the yajl2_cffi and yajl2_c
backends, where they are defined as stand-alone functions that are not
invoked. In the yajl and yajl2 backends the situation is different (they
are defined as lambdas as part of a list of tuples) and it's more
difficult to remove them, so instead of removing them altogether, we
remove the logic inside of them to make it more explicit how they do
*not* add value to the parsing process.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,36,6,30,0.0,0.0,0.0,2255,1259,1638,67,2.35625,72.72198499213108,21.625,36.25,207.63349987131446,2.271387432860933,1228.5929419586942,68.25516344214967,0.06921116662377148
235,e81cfab143afff6f200881ecc99e9e0d7e8492a1,Rodrigo Tobar,2020-02-28 04:37:32+00:00,"Testing coroutines with benchmark tool

This doesn't work yet with files, only with data generated from the
benchmark functions, but we can fill that later.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,26,24,2,0.5652173913043478,0.5652173913043478,0.6521739130434783,2297,1304,1680,67,2.40625,72.34337531694175,21.875,36.5625,210.49280030852643,2.262091503267974,1236.8199136861895,68.71221742701053,0.07016426676950882
236,6484db6d30b8b8f2c586f51a495f54dd72dc7d20,Rodrigo Tobar,2020-02-28 04:37:32+00:00,"Improving coroutine protocol for users

If users decide to use the user-facing coroutines directly previously
needed to feed manually a final empty bytes string (or unicode string in
the case of the python backend) to trigger the finalisation of the
parsing process. This was unintuitive and didn't play well with the
protocol generators/coroutines offer out of the box in python. A better
solution, implemented in this commit, is to offer users the opportunity
to call the close() method once they are finished, which will internally
trigger the final iteration on the coroutine and provoke them to exit.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,76,52,24,0.0,0.0,1.0,2275,1280,1658,67,2.3875,72.51498767787626,21.625,36.0625,206.55951478608384,2.260276321749822,1218.0599326783586,67.6699962599088,0.06885317159536128
237,9a0b5085ea5bde7926a35bbfa91c74e898ec01c2,Rodrigo Tobar,2020-03-03 09:31:27+00:00,"ijson 3.0rc2

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,3,2,,,,2297,1304,1680,67,2.40625,72.34337531694175,21.875,36.5625,210.49280030852643,2.262091503267974,1236.8199136861895,68.71221742701053,0.07016426676950882
238,b0305c026b5ff2483f2095566fa275d10193305d,Rodrigo Tobar,2020-03-09 05:16:42+00:00,"allow_comments argument added to python backend

When its value is True we raise an exception though, because comments
are actually not supported by the Lexer and parse_value coroutines. This
addition is only to have the API being more correctly aligned across
different backends.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,4,3,1,1.0,1.0,0.0,2299,1306,1682,67,2.4125,72.32349606700065,21.875,36.5625,210.49280030852643,2.262091503267974,1236.8199136861895,68.71221742701053,0.07016426676950882
239,97fdc19e5faeab39e060a97bb9f1494add314c15,Rodrigo Tobar,2020-03-09 05:20:27+00:00,"Testing support for comments in all backends

The python backend doesn't support comments though, and therefore must
be treated specially.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,8,8,0,0.875,0.875,1.0,2307,1313,1690,67,2.4161490683229814,72.26701609656683,21.875,36.75,211.56678539375704,2.273202614379085,1247.3529229665253,69.2973846092514,0.07052226179791901
240,3eec07f9eb1fb383c9986904fb23f83786333653,Rodrigo Tobar,2020-03-09 06:00:04+00:00,"Supporting str literals in self.all/self.first

When users give a string stream (as opposed to a bytes stream) to one of
the methods accepting a file-like object, almost all backends will
perform automatic encoding of the stream on-the-fly, while emitting a
warning about it. We had a test for this situation with the original
methods, but because of how it was written it was impossible to reuse it
for the *_async methods, which so far haven't been tested against this
(but should work).

This change adds the necessary infrastructure to make the existing test
reusable across the async and non-async tests.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,18,14,4,1.0,1.0,1.0,2317,1321,1698,67,2.425925925925926,70.37876729289822,22.1875,37.125,213.235206825846,2.302088548185232,1252.9889488922247,69.61049716067913,0.07107840227528199
241,ef4f49988fabbb33a71591976a544166d8846f45,Rodrigo Tobar,2020-03-09 06:00:23+00:00,"Reusing string stream test

Moving the test into a new base class from which Async and Generator
inherit makes the test now reusable across both method families, making
sure we are indeed doing the correct conversion in the async case, and
hence increasing our coverage.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,24,14,10,,,,2321,1323,1700,67,2.4294478527607364,70.37223474494252,22.1875,37.125,213.235206825846,2.302088548185232,1252.9889488922247,69.61049716067913,0.07107840227528199
242,c2fa2ede46f8aee325d0def21027492f9a4d6305,Rodrigo Tobar,2020-03-26 07:53:17+00:00,"Compile files in alphabetical order

This doesn't change the end product, of course, but makes it easier to
follow the compilation of the package, specially now that we are
planning to add more source code files.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,2,1,1,,,,2321,1323,1700,67,2.4294478527607364,70.37223474494252,22.1875,37.125,213.235206825846,2.302088548185232,1252.9889488922247,69.61049716067913,0.07107840227528199
243,1d50507fbc92d5ff4a46a96d8578a9de1b6ddaec,Rodrigo Tobar,2020-03-26 07:54:55+00:00,"Proper implementation of string_reader_async

The previous implementation didn't react well to edge cases when the
bytes read from the underlying utf8 bytes stream didn't yield exactly a
unicode codepoint.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,18,14,4,1.0,1.0,0.5714285714285714,2331,1331,1708,67,2.4390243902439024,70.14381050894107,22.3125,37.3125,214.00522557548544,2.2968802148518983,1253.779597329274,69.65442207384854,0.07133507519182847
244,841ab83c268cb61b9486cff5c790bfe829de6a43,Rodrigo Tobar,2020-03-26 07:55:26+00:00,"Testing different buffer sizes

This increases the robustness of our codebase, and in particular it
uncovered the bug in our previous implementation of the
string_reader_async class.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,5,0,1.0,1.0,1.0,2336,1335,1712,67,2.4363636363636365,70.11407993757194,22.3125,37.3125,214.00522557548544,2.2968802148518983,1253.779597329274,69.65442207384854,0.07133507519182847
245,f9fc07f431fecb6fc5880a139123aed2c03b726e,Rodrigo Tobar,2020-03-26 08:11:10+00:00,"Preparing checking awaitable for reusability

Now that we are planning to write the asynchronous iterators in C for
the yajl2_c backend we'll need to call this method from our C code.
Although in its previous form it would have worked, this will save us a
few lines of C code.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,19,9,10,1.0,1.0,0.0,2335,1334,1711,67,2.4363636363636365,70.12777940205935,22.3125,37.3125,214.00522557548544,2.2968802148518983,1253.779597329274,69.65442207384854,0.07133507519182847
246,f5ac24fa7e6611a794ba791869bdf113e9de284a,Rodrigo Tobar,2020-03-26 08:36:36+00:00,"Allowing backend-specific *_async functions

The C backend will offer its own implementation of the *_async
functions, which we don't want to overwrite with the generic one.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,3,2,0.0,0.0,1.0,2336,1335,1712,67,2.4424242424242424,70.10923697673927,22.3125,37.5,215.09889245314133,2.3085989648518983,1268.9542252567494,70.49745695870828,0.07169963081771377
247,d07499807256cec0173118a59851da4ecf91b485,Rodrigo Tobar,2020-03-26 08:47:59+00:00,"basic_parse_async implementation in yajl2_c

This asynchronous iterable type simply creates a async_reading_generator
iterable and assigns the corresponding basic_parse coroutine pipeline to
it. Each call to __anext__ returns a new reference to the
async_reading_generator, which does all the heavy lifting.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,103,103,0,0.9583333333333334,1.0,0.5833333333333334,2340,1338,1715,67,2.433734939759036,69.95753410698387,22.4375,37.6875,215.96466584453208,2.3085989648518983,1269.3871119524447,70.52150621958025,0.07198822194817735
248,df13b910f0522c7a636353d175deae2839c16401,Rodrigo Tobar,2020-03-26 08:48:06+00:00,"parse_async implementation in yajl2_c

This asynchronous iterable type simply creates a async_reading_generator
iterable and assigns the corresponding parse coroutine pipeline to it.
Each call to __anext__ returns a new reference to the
async_reading_generator, which does all the heavy lifting.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,105,105,0,0.96,1.0,0.56,2344,1341,1718,67,2.4251497005988023,69.82286650510805,22.5625,37.875,216.88444338496834,2.3085989648518983,1269.8470007226629,70.54705559570348,0.0722948144616561
249,b9e4ec6934ad754b0bf54fee6a667100887b97c1,Rodrigo Tobar,2020-03-26 08:48:14+00:00,"kvitems_async implementation in yajl2_c

This asynchronous iterable type simply creates a async_reading_generator
iterable and assigns the corresponding kvitems coroutine pipeline to it.
Each call to __anext__ returns a new reference to the
async_reading_generator, which does all the heavy lifting.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,109,109,0,0.9642857142857143,1.0,0.39285714285714285,2348,1344,1721,67,2.4166666666666665,69.70124729953844,22.6875,38.0625,217.84924260879578,2.3085989648518983,1270.3294003345766,70.57385557414312,0.07261641420293193
250,f16fa62ba42c2da21fe50334bdc419ab9b3aa35b,Rodrigo Tobar,2020-03-26 08:48:28+00:00,"items_async implementation in yajl2_c

This asynchronous iterable type simply creates a async_reading_generator
iterable and assigns the corresponding items coroutine pipeline to it.
Each call to __anext__ returns a new reference to the
async_reading_generator, which does all the heavy lifting.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,109,109,0,0.9642857142857143,1.0,0.39285714285714285,2352,1347,1724,67,2.408284023668639,69.5901435027952,22.8125,38.25,218.85264296393512,2.3085989648518983,1270.8311005121461,70.60172780623033,0.07295088098797836
251,54c6b5b79176e4594e6cad8a18dd1f0423545152,Rodrigo Tobar,2020-03-30 02:19:57+00:00,"New ability to build ijson including yajl sources

Having a ""fat"" build of the C extension that includes the yajl sources
is an easy way to be able to build a binary wheel without external
dependencies, and that therefore doesn't need to be ""fixed"" later on by
embedding the external library using audit-wheel, delocate-wheel or
similar tools. This, in turn, opens the door to build binary wheels for
Windows, where such wheel patching looks to be problematic (or at least
that's the impression I got from reading on Internet).

The source code layout that is needed by for these changes to work is
quite specific, and hence I don't really expect users to be using it
directly.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,19,15,4,,,,2363,1358,1735,67,2.408284023668639,68.8797692980248,23.5,39.125,222.6007770997361,2.414848964851898,1279.5822024080132,71.0879001337785,0.07420025903324536
252,bb733941d7dc3f4e7c34e0a5399d45a76e879c21,Rodrigo Tobar,2020-03-30 02:53:50+00:00,"ijson 3.0rc3

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,3,2,,,,2363,1358,1735,67,2.408284023668639,68.8797692980248,23.5,39.125,222.6007770997361,2.414848964851898,1279.5822024080132,71.0879001337785,0.07420025903324536
253,3a2f92f333a367fedbabfcca0232205dc5d2ddda,Rodrigo Tobar,2020-04-03 04:20:16+00:00,"Re-compile if headers change

I didn't know about this option until I saw it in another package, but
always wanted it!

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,3,2,1,,,,2364,1358,1736,67,2.408284023668639,68.87535688070268,23.5,39.125,222.6007770997361,2.414848964851898,1279.5822024080132,71.0879001337785,0.07420025903324536
254,5366e7b49dc9597eb4482cbd3a16a12a2a4dfb74,Rodrigo Tobar,2020-04-03 04:20:16+00:00,"Expose the default backend's name as ijson.backend

This might be useful for people to know what backend they are using
without too much fuzz.

I initially thought about offering this only at ijson's __init__.py
level, but it makes more sense that each backend offers this information
separately and we later copy it into ijson's top-level package. This
maintains that fact that ""import ijson.backend.my_backend as ijson""
doesn't affect any user code.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,3,2,1,0.0,0.0,1.0,2365,1359,1737,67,2.408284023668639,68.86617962138628,23.5625,39.25,223.5117979634872,2.4117399087294493,1283.789725815628,71.32165143420154,0.07450393265449572
255,c6077dd5b53e09ae0e3e0c3b604db17da13ff4ff,Rodrigo Tobar,2020-04-03 04:20:16+00:00,"Proper wording in pydoc string

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,2,1,1,,,,2365,1359,1737,67,2.408284023668639,68.86617962138628,23.5625,39.25,223.5117979634872,2.4117399087294493,1283.789725815628,71.32165143420154,0.07450393265449572
256,56f1a5185cd2084bf5c58286da68c91c98cf835e,Rodrigo Tobar,2020-04-03 04:31:03+00:00,"Exposing sendable_list to users

This might be useful for some, but it's hard to judge. It won't hurt
anyway.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,2,1,1,,,,2365,1359,1737,67,2.408284023668639,68.86617962138628,23.5625,39.25,223.5117979634872,2.4117399087294493,1283.789725815628,71.32165143420154,0.07450393265449572
257,df31f05e32f9b37dc35da6fe3929289ebe523567,Rodrigo Tobar,2020-04-03 07:33:26+00:00,"ijson 3.0

This is it -- the official release of ijson 3.0! I think I've tackled
all the changes I wanted to include in this very first version.
I haven't heard any complains throughout the several rc releases, which
people seem to have been using according to the PyPI download stats, so
I feel fairly confident I won't be breaking anyone's life with this.

Fingers crossed...

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,3,2,,,,2365,1359,1737,67,2.408284023668639,68.86617962138628,23.5625,39.25,223.5117979634872,2.4117399087294493,1283.789725815628,71.32165143420154,0.07450393265449572
258,17d89c15cc4cd07beac9b99606a13792b83d0c61,Rodrigo Tobar,2020-04-15 14:42:42+00:00,"Reintroduce common.* functions

This commit re-introduces the common.* functions that were removed
during the redesign of ijson 3. In ijson 2.X these functions were the
building blocks over which the backend-specific functions were built
upon. However, with the redesign of the library in version 3 they were
not needed anymore and they were removed.

It turns out users around the globe used these methods, as they iterated
over events in ways we didn't anticipate. Thus, there is value in adding
these functions back, even if it's not in a fully-performant way. With
time we can think of moving these functions into each backend so they
use the backend's underlying function, which is important for
performance.

Tests have been added to double-check that the behavior is the expected
one. In the case of items and kvitems we event skip through a few events
before reading the rest, which cannot be safely done with parse, as its
state machine depends on reading all events in order.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,86,86,0,1.0,1.0,0.5833333333333334,2451,1396,1803,68,2.361581920903955,68.6644913217041,23.8125,39.625,226.2811776625922,2.4075680272108846,1294.8927029721983,71.93848349845545,0.07542705922086405
259,0070f9ebba95b2aa2224abe2e874ec98dc222cea,Rodrigo Tobar,2020-04-17 08:33:31+00:00,"Simplify asyncio benchmark code

There was a left-over in the asyncio benchmarking code from when the
python backend was not dealt with properly yet, but that is covered now.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,9,3,6,,,,2448,1396,1800,68,2.361581920903955,68.67479962889168,23.6875,39.4375,224.73510198546413,2.4078916518063536,1288.6611208707607,71.59228449282003,0.07491170066182137
260,716b2865ede8c1a67650f97e4deef3cbd2ed6afd,Rodrigo Tobar,2020-04-17 08:49:53+00:00,"Release ijson 3.0.1

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,3,2,,,,2448,1396,1800,68,2.361581920903955,68.67479962889168,23.6875,39.4375,224.73510198546413,2.4078916518063536,1288.6611208707607,71.59228449282003,0.07491170066182137
261,ddc69540e396507f99c662c25c997319869b89a9,Rodrigo Tobar,2020-04-22 06:26:36+00:00,"Release ijson 3.0.2

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,3,2,,,,2448,1396,1800,68,2.361581920903955,68.67479962889168,23.6875,39.4375,224.73510198546413,2.4078916518063536,1288.6611208707607,71.59228449282003,0.07491170066182137
262,4366bc99b5208035d1043378004112f06f2bb69b,Rodrigo Tobar,2020-04-23 02:00:28+00:00,"Add test cases with top-level array JSON values

These new tests have higher chances of identifying issues like that
exposed in #29, and in fact they helped reproducing the problem and
finding the solution.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,38,38,0,1.0,1.0,1.0,2486,1416,1828,69,2.3241758241758244,68.53635601633765,24.4375,40.5625,233.23949791138,2.398554583645756,1322.8602903192693,73.4922383510705,0.07774649930379333
263,191be837ff999e2321f5ed0ec0041ccd0cde3c91,Rodrigo Tobar,2020-04-23 04:27:52+00:00,"Release ijson 3.0.3

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,3,2,,,,2486,1416,1828,69,2.3241758241758244,68.53635601633765,24.4375,40.5625,233.23949791138,2.398554583645756,1322.8602903192693,73.4922383510705,0.07774649930379333
264,78946d181c93350309a589fc303dc55ff9d8d621,Rodrigo Tobar,2020-05-08 07:29:47+00:00,"Add new JSON tests with empty members

These are just to double-check that unmatched closing tokens generate
errors at the lowest level possible (i.e., in basic_parse).

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,4,3,1,,,,2488,1416,1830,71,2.3241758241758244,68.56296427069795,24.4375,40.5625,233.23949791138,2.398554583645756,1322.8602903192693,73.4922383510705,0.07774649930379333
265,3c0f2346abea1dae7c54a9abd9b89cd64ba589b4,Rodrigo Tobar,2020-05-08 07:29:48+00:00,"Fix items and kvitems to work with empty members

The implementation of items and kvitems, both their pure python and in C
variants (the latter being based on the former), used the path coming
from the parse() events as part of the conditions used to enter the
object building and accumulation logic, and to finish the building of a
particular object (and communicate it furthern down the pipeline). This
is possible as long as one assumes the path always changes when entering
into a new object or array in the JSON document.

Alas, this change in path does not *always* happens. The exception to
this is when the top-level JSON value is an object with an empty-named
member (e.g., {"""": 1}). In these cases the events generated from parse()
will contain an empty path for the top-level object itself and *also*
for the events generated in the context of the empty member (in the
example above, when communicating the value ""1"" parse() will generate a
(path, event, value) tuple == ("""", ""number"", 1). This exception breaks
the assumptions made so far by the items and kvitems implementations,
having different unexpected results: the python kvitems implementation
raised an AttributeError due to invalid usage of the ObjectBuilder
object, the C kvitems implementation crashed with a segmentation fault,
and both the python and C items implementations produced wrong results
in particular cases.

This commit changes the implementation of the kvitems() and items()
functions, both in python and in C, using the same logic. In all cases
in order to check if the building of the object is complete we don't
compare the incoming path to the prefix anymore (because we know now it
is not a correct comparison in all cases); instead we manually keep
track of the additional depth introduced by incoming events, and finish
building our objects when that depth goes back to the expected base
value. Although slightly more complex, these new implementations
actually carry out less (or at least shorter) string comparisons, and
hence are slightly faster.

Note that a limitation that is made clear by the ""emtpy member at the
top-level"" exception is that such elements cannot currently be selected
by a prefix, because empty prefixes refer to the top-level object and
not any of its members. Therefore selecting """" from {"""": 1, ""a"": 2}
yields the whole object instead of just ""1"", but selecting ""a"" yields
""2"". This is a problem that will need further thinking, but probably
a limitation we can live with anyway.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,70,46,24,0.0,0.0,0.5,2501,1427,1843,71,2.368131868131868,68.36645795421717,25.375,43.5,253.8279733902953,2.493863540561856,1560.8298200610934,86.71276778117186,0.08460932446343176
266,88bd704478b04a91314b6a4645055ee823cc4337,Rodrigo Tobar,2020-05-08 07:29:51+00:00,"Add test cases with empty member names

These new test cases highlight the problem previously present with the
kvitems and items functions. Now that they have been fixed it is safe to
have them added; previously they resulted in unexpected errors and
segmentation faults.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,47,47,0,1.0,1.0,1.0,2548,1443,1883,71,2.3315508021390374,68.26645050438206,25.375,43.5,253.8279733902953,2.493863540561856,1560.8298200610934,86.71276778117186,0.08460932446343176
267,e9a2a640cecb225c656e20f7619ea05f17d9c6ce,Rodrigo Tobar,2020-05-11 08:04:27+00:00,"Release ijson 3.0.4

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,3,2,,,,2548,1443,1883,71,2.3315508021390374,68.26645050438206,25.375,43.5,253.8279733902953,2.493863540561856,1560.8298200610934,86.71276778117186,0.08460932446343176
268,2a2f82a1934eaac17b9d5eed83d835458efbc7e6,Rodrigo Tobar,2020-05-25 06:53:53+00:00,"Fix Coroutines.first method in tests

After closing a coroutine we can still have an event to return, which we
weren't previously checking.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,2,2,0,1.0,1.0,0.0,2550,1445,1885,71,2.336898395721925,68.2529875334526,25.375,43.5,253.8279733902953,2.493863540561856,1560.8298200610934,86.71276778117186,0.08460932446343176
269,48a0042a34f13daf9771076cfc4b4f39b33b8ed6,Rodrigo Tobar,2020-05-25 09:21:38+00:00,"Rename number function

This function takes a string an returns either an integer or a Decimal
object. We are planning to support an option to return float() values
instead of Decimal objects for non-integer values we will be adding a
similar function, and in this new context the original name will be
confusing.

This function has never been meant to be publicly exposed, but some
users might be using it anyway, so I kept it with a DeprecationWarning
for temporary backwards-compatibility. A new test checks that this is
true.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,34,29,5,1.0,1.0,1.0,2569,1458,1897,72,2.331578947368421,68.20916286163799,25.375,43.5,253.8279733902953,2.493863540561856,1560.8298200610934,86.71276778117186,0.08460932446343176
270,f3763590f8dc154d53a34eb24da78415250e11dd,Rodrigo Tobar,2020-05-25 09:21:42+00:00,"Add integer_or_float function

This is similar to the integer_or_decimal function except it returns a
float object for non-integer values.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,9,9,0,1.0,1.0,1.0,2578,1463,1901,72,2.3403141361256545,68.1569905469147,25.875,44.4375,261.2999669787966,2.478633270049895,1606.5021904250154,89.25012169027865,0.0870999889929322
271,3ed9d12eae93d75e299fef0adcac587c9b2bdbc0,Rodrigo Tobar,2020-05-25 09:21:42+00:00,"Organize import statements

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,2,1,1,,,,2578,1463,1901,72,2.3403141361256545,68.1569905469147,25.875,44.4375,261.2999669787966,2.478633270049895,1606.5021904250154,89.25012169027865,0.0870999889929322
272,eae5969be729a19a9fb17c9e44e6a5b86ded2c7e,Rodrigo Tobar,2020-05-25 09:21:42+00:00,"De-duplicate ctypes yajl handling

The yajl and yajl2 backends, both based on ctypes, need very similar
code to register callbacks, retrieve the library, and setup the
environment for correctly calling into the DLL. This code was basically
duplicated across both modules.

This commit removes the duplicated code from each of the modules and
puts it under a new common module that both backends can use to set
themselves up.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,198,82,116,1.0,1.0,1.0,2544,1447,1867,67,2.3092783505154637,71.06173785972777,24.352941176470587,41.8235294117647,245.9293806859262,2.332831312988137,1512.0020615764852,84.00011453202696,0.08197646022864206
273,fb4cac64e821d59e6a32e8f74b5600db74eda4b7,Rodrigo Tobar,2020-05-25 09:21:43+00:00,"Add support for new use_float option

The new use_float option (defaults to False for backwards compatibility)
instructs the basicparse routines of each parser to return float()
values instead of Decimal.Decimal() values for non-integer numbers found
during the parsing process.

The way we implement this change in the yajl-based backends is by not
providing a ""number"" callback, in which case the ""integer"" and ""double""
callbacks are called. By then the string has already been parsed by yajl
into C ""long long"" and ""double"" values respectively, so the only thing
that is left to us is to wrap those values into their Python objects.
This has a few consequences: first, integer parsing works faster in this
regime because yajl does a better work than us at it; secondly, creating
python float() values out of C doubles is way faster than creating
Decimal() values out of C strings, so again performance increases.
Finally, since yajl does the string->double conversion for us, we have
no control on how precision is lost, and when. In particular, underflow
is fine (very small numbers are returned as 0), but big numbers result
in an overflow error state from which one cannot recover. The python
backend will happily create a float ""inf"" value from these values
though, so we have to manually check for this and raise an error as well
to keep behavior consistent across all backends.

This loss in precision is probably something most users can deal with
though, and the overflows are rare, so in the future we will probably
change the default value of use_float to True given its better
performance.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,132,97,35,0.6666666666666666,0.8809523809523809,0.0,2570,1465,1887,64,2.3214285714285716,69.43788380913072,24.941176470588236,42.529411764705884,249.74881602857354,2.3736198209046724,1523.3046391617172,84.6280355089843,0.08324960534285786
274,5ec3902b064a86ee27f82054015d011f01b551ca,Rodrigo Tobar,2020-05-25 09:21:43+00:00,"Add tests for new use_float option

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,26,22,4,1.0,1.0,0.5294117647058824,2588,1481,1902,64,2.316326530612245,69.39910439192775,25.11764705882353,42.88235294117647,252.33725873479804,2.4145520912487073,1565.5477415113287,86.97487452840716,0.084112419578266
275,4a4b52e562a13e8642d2e2736faf147ed576de57,Rodrigo Tobar,2020-05-25 09:21:43+00:00,"Add -f option to benchmark to use floats

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,3,3,0,0.0,0.0,0.6666666666666666,2591,1482,1905,64,2.316326530612245,69.3901079587108,25.11764705882353,42.88235294117647,252.33725873479804,2.4145520912487073,1565.5477415113287,86.97487452840716,0.084112419578266
276,7778c3538a11b0331ad4e2e9e05b26502059afc1,Rodrigo Tobar,2020-06-09 06:40:40+00:00,"Centralize repeated code

The way we get the buf_size in the different yajl2_c backend's methods
is always the same, so there's no reason to not share that oneliner.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,19,11,8,,,,2594,1484,1906,64,2.316326530612245,69.8960470433329,24.294117647058822,41.64705882352941,246.84642222374836,2.4145520912487073,1562.8023232558037,86.82235129198911,0.08228214074124944
277,3866612aa5bb4ff674fbed3052d93381e0fe5ca5,Rodrigo Tobar,2020-06-09 06:49:02+00:00,"Port kvitems/items to use new parse mode

Now that yajl2_c's parse method supports a new mode of operation where
paths are not concatenated anymore we can port kvitems and items to use
this method. This requires only flipping a flag to False, which
otherwise defaults to True for the old behavior.

Because this additional flag that needs to be passed down to parse we
cannot use common._make_kvitems/items_coro functions anymore (i.e.,
because the other parse functions don't have this flag). Even if we
extend to accept an optional parse_args parameter we still have the
issue that the backend they'd need to receive is _yajl2_c (not yajl2_c),
where the different basecoro __init__ functions have slightly different
signatures from the standard ones (to keep the C code simpler). The
simplest solution then is to provide our own pipeline definition for
kvitems and items, keeping it as non-repetitive as possible.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,42,32,10,0.0,1.0,0.0,2608,1490,1919,64,2.3096446700507616,69.53653799634456,24.41176470588235,41.76470588235294,247.24964298682323,2.4439638559545895,1563.3453936512954,86.85252186951641,0.08241654766227441
278,e7f27907a10e760432331c94b731432bbb0c526e,Rodrigo Tobar,2020-06-15 09:01:45+00:00,"Centralize backend importing logic

A few places in the code imported backends at runtime via importlib.
It's easier if we centralize this small nugget of logic in a small
function, as we are planning to import specific backends in yet a new
different place.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,27,22,5,1.0,1.0,1.0,2613,1494,1922,64,2.303030303030303,69.46528502465696,24.235294117647058,41.411764705882355,244.56939060122076,2.440908051943347,1548.521432012429,86.02896844513494,0.08152313020040693
279,97468f5196c4725f00ffc493ab68a7113a65fe56,Rodrigo Tobar,2020-06-15 09:02:19+00:00,"Add new IJSON_BACKEND environment variable

This is a new mechanism to choose the backend to use at runtime, which
makes it easier to choose specific backends when ijson is deeply
embedded into users applications.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,11,9,2,1.0,1.0,1.0,2616,1497,1925,64,2.308080808080808,69.16072286639275,24.41176470588235,41.588235294117645,245.20203104252445,2.470319816649229,1549.2939220861495,86.07188456034163,0.08173401034750817
280,c1244d5d38c74889a900967c7832436577f09c82,Rodrigo Tobar,2020-06-25 03:55:36+00:00,"Port python backend to work with bytes

The python backend was the only one that internally still required
strings (and therefore a string reader) rather than bytes, which
complicated things a bit around testing and overall maintenance.

With this change we are changing how the python backend works, now
dealing with bytes rather than strings, and therefore requiring a bytes
reader just like the rest of the backends. To be as least invasive as
possible we implemented this as an additional coroutine that comes
before the Lexer and incrementally decodes bytes into UTF-8 strings;
these strings are are then passed down to the rest of the machinery,
which doesn't require any further changes.

Benchmarks with python 3.8 show no change in performance before and
after this change (only within noise).

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,59,30,29,0.0,1.0,1.0,2617,1502,1931,64,2.326530612244898,69.07881273882641,24.705882352941178,41.88235294117647,247.7398375135338,2.4557519072662246,1554.37434224204,86.35413012455778,0.0825799458378446
281,2178e522a0f5c63f3e02ab3f4aede5d215a3f2a8,Rodrigo Tobar,2020-06-25 03:55:40+00:00,"Remove internal ""use_string_reader"" flag

This flag was used by the python backend to signal that it worked with
string readers rather than byte readers, which in turn made a few things
work differently. Now that the python backend works with byte streams
(in hindsight it was way easier to implement the latter...) there is no
need to keep the code supporting this feature around.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,84,25,59,0.0,0.0,0.6363636363636364,2583,1475,1906,64,2.3125,69.67752055812741,24.41176470588235,41.35294117647059,245.71782492904967,2.445947985697597,1551.6469221748896,86.20260678749386,0.08190594164301655
282,16332d191d89e6489298d36f8b6aa1ad6d7a923c,Rodrigo Tobar,2020-06-25 03:55:40+00:00,"Adjust expectations as python works with bytes now

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,2,1,1,,1.0,,2583,1475,1906,64,2.3072916666666665,69.69577394531677,24.294117647058822,41.0,243.25364338101087,2.438988249931633,1534.1918123282203,85.2328784626789,0.08108454779367029
283,a2de738b712f81a10d8241e467672ccf038383c2,Rodrigo Tobar,2020-06-25 03:56:42+00:00,"React uniformly to incorrect UTF-8 bytes

The way the library has so far reacted to invalid UTF-8 byte sequences
has not been ideal, as different types of errors are raised by different
backends, with more or less information about the underlying reason of
the failure.

With this commit invalid UTF-8 byte sequences are now always reported as
IncompleteJSONError exceptions. In the case of the yajl2-based backends
we also take care of constructing the exception with a bytes() object
instead of a str() when failing when building the error message (because
of the decoding that takes place). Previously these message conversions
meant that UnicodeDecodeError exceptions were raised, making it less
clear to users the context in which the invalid byte sequences were
found, which is more obvious from the yajl error message.

Thanks to this new uniformity we can now actually test that invalid
UTF-8 byte sequences are rejected with a JSONError.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,45,38,7,0.32,0.0,0.44,2599,1490,1922,65,2.328125,69.51902474992401,24.294117647058822,41.0,243.25364338101087,2.438988249931633,1534.1918123282203,85.2328784626789,0.08108454779367029
284,564c474ebb22aae9bd99f0f5b450cac3c419f9df,Rodrigo Tobar,2020-06-25 03:56:44+00:00,"Fail when requesting multiple_values to yajl backend

The yajl backend has never supported multiple values, and therefore has
never even exposed the option in its basic_parse routines. This commit
adds the option to align the basic_parse signature with the rest of the
backends, but immediately raises an error if multiple_values is
requested. A unit test is included to make sure this behavior works.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,9,7,2,0.0,0.5,0.5,2604,1495,1926,65,2.3333333333333335,69.44944910796261,24.294117647058822,41.0,243.25364338101087,2.438988249931633,1534.1918123282203,85.2328784626789,0.08108454779367029
285,441a7ca91af83d5bbe30d93b4593739ed691e9e9,Rodrigo Tobar,2020-06-25 03:56:45+00:00,"Remove unused type

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,1,0,1,,,,2603,1494,1925,65,2.3333333333333335,69.45174030540744,24.294117647058822,41.0,243.25364338101087,2.438988249931633,1534.1918123282203,85.2328784626789,0.08108454779367029
286,0fe7be79806c1e99a50a58bb88bf22a0bb00eae0,Rodrigo Tobar,2020-06-25 03:56:45+00:00,"Add functions to identify source type

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,16,16,0,1.0,1.0,1.0,2619,1504,1932,65,2.3230769230769233,69.39348004320993,24.470588235294116,41.23529411764706,245.3070828182033,2.431430982639486,1542.174249861133,85.67634721450739,0.08176902760606776
287,3261dd9f7b2e4137bc2837f215563b186d18b9fa,Rodrigo Tobar,2020-06-25 03:56:45+00:00,"Align returned function name

The rest of the _make_*_coro functions return a function called *_coro,
and this was the exception to the rule.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,4,2,2,,,,2619,1504,1932,65,2.3230769230769233,69.39348004320993,24.470588235294116,41.23529411764706,245.3070828182033,2.431430982639486,1542.174249861133,85.67634721450739,0.08176902760606776
288,47459751001e0bb848e5b21a663f31592c223214,Rodrigo Tobar,2020-06-25 03:56:46+00:00,"Deprecate ijson.common.* event-based functions

These are now better served by the backend-specific, enriched entry
point functions, which now accept iterables and assume they result in
events coming from the underlying coroutines of the pipeline.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,26,22,4,1.0,1.0,0.7777777777777778,2727,1572,2022,64,2.2585365853658534,68.98109867904854,25.11764705882353,42.294117647058826,254.16410344881837,2.4630098303948045,1654.8831773159784,91.93795429533213,0.08472136781627278
289,4e2c3edf66de1bb5bae985e5a4bb3f84e469aad9,Rodrigo Tobar,2020-06-25 03:56:46+00:00,"Add warning_catcher class

It encapsulates the simple logic of properly catching warnings in python
2.7 and 3.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,23,18,5,1.0,1.0,1.0,2713,1562,2009,64,2.2585365853658534,69.01303941728976,25.11764705882353,42.294117647058826,254.16410344881837,2.4630098303948045,1654.8831773159784,91.93795429533213,0.08472136781627278
290,7ef8e273a24354dadf4c89a3118fc0a335210ce9,Rodrigo Tobar,2020-06-25 03:56:46+00:00,"Add new, enriched entry-level functions

Until now the basic set of functions offered by ijson took always a file
object and returned a generator. If users wanted to use an async file
object they would need to invoke the respective *_async function, which
returns an asynchronous iterable, but otherwise looks identical from an
invocation perspective.  Because the invocation is identical in these
two cases, it makes sense to have a higher-level implementation of these
""entry-level"" functions that inspects what the source object is (is it a
file? is it an async file?) and internally invokes and returns the
corresponding lower-level function.

This commit introduces these new enriched entry-level functions. They
are able to idenfity both asynchronous and synchronous file objects,
dispatching the call to the corresponding backend function. Because they
handle file objects they actually replace the old ""basic_parse"",
""parse"", ""items"" and ""kvitems"" functions in the backend, providing users
with a simpler calling convention. The old generators have been renamed
to *_gen in case users want to be explicit about calling those.

Note that the yajl2_c backend needed its *_basecoro functions to be put
back as the new generic, enriched entry-level functions rely on the
*_basecoro functions being defined. This was not strictly needed because
common.enrich_backend() will add missing *_basecoro functions, but on
the other hand we would not be getting the performance given by the C
backend's own function. In general it might be good to work in the
future to align the _yajl2_c extension's functions with the rest of the
backends' and expose them directly (instead of having this small salad
layer in the yajl2_c module), we'll have a think about that.

In addition to supporting both flavours of file objects, the new
functions also support iterables, which are assumed to be events
generated from previous steps in the pipeline. In other words, they come
to replace the old ijson.common.{parse,items,kvitems} functions, which
will be marked as deprecated and eventually removed. Note that
basic_parse does not support this extra type of input as its input is
always raw JSON data.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,103,92,11,0.9577464788732394,0.9577464788732394,0.2112676056338028,2700,1553,2001,65,2.283582089552239,69.06853219679704,25.11764705882353,42.294117647058826,254.16410344881837,2.4630098303948045,1654.8831773159784,91.93795429533213,0.08472136781627278
291,50c4ad8608bdca45790bce24a4d2cd67bf5a956e,Rodrigo Tobar,2020-06-25 03:56:46+00:00,"Rename variable for improved code readibility

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,16,8,8,,,,2619,1504,1932,65,2.3230769230769233,69.38960808568532,24.58823529411765,41.411764705882355,246.80456568138882,2.4267242635364816,1548.6191962611863,86.03439979228811,0.08226818856046293
292,10bdd385d7c914a56af4519f4393d3de688f3ae9,Rodrigo Tobar,2020-06-25 03:56:46+00:00,"Rename _make_* functions to _make_*_gen

This change will open the door for adding a new set of _make_* functions
that will returned the enriched version of basic_parse et al., which
internally will do dispatching to the different function flavours
depending on the type of the input.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,26,13,13,,,,2619,1504,1932,65,2.3230769230769233,69.38960808568532,24.58823529411765,41.411764705882355,246.80456568138882,2.4267242635364816,1548.6191962611863,86.03439979228811,0.08226818856046293
293,e209344564c80deab9421b31907ada16b330e3e6,Rodrigo Tobar,2020-06-25 03:56:47+00:00,"Move tests to test/ directory

This is the first effort in moving again from single-file testing and to
refactor a bit how tests are organized.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,14,7,7,,,,2727,1572,2022,64,2.2585365853658534,70.70437097465695,23.72222222222222,39.94444444444444,240.04387547943952,2.326175950928426,1562.945223020646,86.83029016781369,0.08001462515981318
294,725e1c97d24748da78c68c1de73ed6d0f9a7e582,Rodrigo Tobar,2020-06-25 03:56:47+00:00,"Break up big test module into smaller ones

Breaking up the big, single test module we previously had makes the code
easier to maintain. The async-specific code still lives in its own
""hidden"" module (i.e., doesn't get automatically loaded the unit test
runners) that then gets conditionally imported depending on the python
version executing the tests (to avoid code import failures in python <
3.5).

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,411,215,196,,,,2746,1579,2031,64,2.2585365853658534,74.37736929392725,19.5,32.54545454545455,191.5573832274896,2.004267926792679,1241.63879102335,68.97993283463057,0.06385246107582987
295,dfa58c5a4dc31edee14b4c0c7dba1d65885d4d8e,Rodrigo Tobar,2020-06-25 03:56:47+00:00,"Rename all/first to get_all/get_first

This is to avoid clashing with the built-in ""all"" function, as we are
planning to move some of these member functions to be free-standing.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,78,39,39,,,,2746,1579,2031,64,2.2585365853658534,74.37736929392725,19.5,32.54545454545455,191.5573832274896,2.004267926792679,1241.63879102335,68.97993283463057,0.06385246107582987
296,938004ac65e9f2eb2e2ed75619a5d10f44963b73,Rodrigo Tobar,2020-06-25 03:56:47+00:00,"Move specific functionality out of test_base

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,27,13,14,1.0,0.0,0.0,2745,1579,2030,64,2.2585365853658534,74.40800120314769,19.5,32.54545454545455,191.5573832274896,2.004267926792679,1241.63879102335,68.97993283463057,0.06385246107582987
297,50bbb56a17b0bdc53b84733af9a7f9ccb7d0ea1c,Rodrigo Tobar,2020-06-25 03:56:48+00:00,"Add new tests for enriched top-level functions

There is a test for each function, which are then run against all
backends to ensure things are working properly.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,56,54,2,1.0,1.0,0.3142857142857143,2807,1616,2070,68,2.2009345794392523,73.40567304760897,19.772727272727273,32.90909090909091,193.62549499571043,2.0243977969225493,1250.641947941277,69.48010821895986,0.0645418316652368
298,fae5045e22788b8f195d01068e9bcf2223b193a9,Rodrigo Tobar,2020-06-25 03:56:48+00:00,"Allow more generic backend-specific test classes

This support will allow us to generate backend-specific classes that do
not inherit from IJsonTestsBase, and therefore test other types of
behavior that need to be checked across all backends.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,66,42,24,1.0,1.0,0.0,2755,1579,2032,65,2.2450980392156863,74.57449198656906,19.681818181818183,32.81818181818182,193.53458590480133,2.001670524195277,1250.5964933958226,69.47758296643461,0.06451152863493378
299,226ed77b5f21f6ac01800dcd6eab72b8724fb593,Rodrigo Tobar,2020-06-25 03:56:48+00:00,"Add new version-specific texttype

This will allow us to distinguish text type data (str in python 3,
unicode in python 2) and react to it accordingly.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,2,2,0,,,,2809,1618,2072,68,2.2009345794392523,73.36194996474455,19.772727272727273,32.90909090909091,193.62549499571043,2.0243977969225493,1250.641947941277,69.48010821895986,0.0645418316652368
300,8528372c1e8b9e9c060d8135a2f25f32aec39b78,Rodrigo Tobar,2020-06-25 03:56:48+00:00,"Make get_all/get_first free-standing functions

This will make them reusable in places other than the classes where they
were previously defined without having to resort to more complex class
hierarchy tricks.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,132,79,53,1.0,1.0,0.0,2771,1589,2040,64,2.213270142180095,74.35578940379631,19.5,32.54545454545455,191.5573832274896,2.004267926792679,1241.63879102335,68.97993283463057,0.06385246107582987
301,37f2f77d99b4619e970869ce0804ab9e19e0767a,Rodrigo Tobar,2020-06-25 03:56:48+00:00,"Remove unnecessary classes in tests

Having the free-standing versions of the get_all/get_first functions
available at the module level makes it unnecessary to keep the
associated classes exposing the same information. This commit removes
that middle step, therefore simplifying the type hierarchy for the test
case classes.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,58,12,46,0.0,0.0,0.0,2737,1568,2023,65,2.2524752475247523,74.54688400656997,19.59090909090909,32.68181818181818,192.54247076283494,2.0029139616089267,1246.1007578717165,69.22781988176203,0.06418082358761167
302,0eb32b07a2ba8623e6acdcb53e74dda8ec718727,Rodrigo Tobar,2020-06-25 03:56:49+00:00,"Support bytes and str in rich entry points

Now that we have a rich set of entry points there's no reason to hold
back supporting other types of inputs. The main one is obviously bytes
and strings, which we can easily convert into their corresponding file
objects. New tests ensure this is happening correctly.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,34,34,0,1.0,1.0,0.20689655172413793,2843,1647,2101,68,2.197247706422018,72.88991817842572,19.818181818181817,33.0,193.82276090493244,2.0243977969225493,1250.7405808958881,69.48558782754935,0.06460758696831083
303,b8848bf5e079159ec0ea7a3683d8bff02ea97129,Rodrigo Tobar,2020-06-26 02:11:37+00:00,"Release ijson 3.1

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,3,2,,,,2843,1647,2101,68,2.197247706422018,72.88991817842572,19.818181818181817,33.0,193.82276090493244,2.0243977969225493,1250.7405808958881,69.48558782754935,0.06460758696831083
304,79643a657e0074e6431d66422128eb4324c19826,Rodrigo Tobar,2020-06-26 02:27:00+00:00,"Exclude test package from binary distribution

We still include it in the source distribution though via the
MANIFEST.in file.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,2,1,1,,,,2843,1647,2101,68,2.197247706422018,72.88991817842572,19.818181818181817,33.0,193.82276090493244,2.0243977969225493,1250.7405808958881,69.48558782754935,0.06460758696831083
305,2414de2624e616c6b7b37c4e92bd3046bf426094,Rodrigo Tobar,2020-06-26 03:53:56+00:00,"Release ijson 3.1.post0

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,7,6,1,,,,2843,1647,2101,68,2.197247706422018,72.88991817842572,19.818181818181817,33.0,193.82276090493244,2.0243977969225493,1250.7405808958881,69.48558782754935,0.06460758696831083
306,18ef068602ca43151f2266196c23016d0b391a56,Rodrigo Tobar,2020-08-01 17:13:03+00:00,"Simulate more complex read() function

Adding an extra asyncio.sleep() call and awaiting on it effectively
yields the execution of the coroutine, turning it into a more realistic
test and example. The previous simpler version masked a problem we had
in our C backend, and therefore this change should prevent that
particular problem from creeping in again.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,1,1,0,1.0,1.0,1.0,2844,1648,2102,68,2.197247706422018,72.86898161610699,19.818181818181817,33.0,193.82276090493244,2.0243977969225493,1250.7405808958881,69.48558782754935,0.06460758696831083
307,cbfa2b656b5e62f505c3c9893946c0d80604abfa,Rodrigo Tobar,2020-08-02 10:02:31+00:00,"Generalize async test infrastructure

We are planning to add other reader classes to test the async
infrastructure against (to ensure that our code works correctly against
@type.coroutine functions), and therefore we need to refactor the code
to be reusable in that sense.

Here we separate the code we'll reuse into the _test_async_common.py
module, which _test_async.py uses to define its get_first/get_all
methods based on its own reader.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,65,40,25,1.0,1.0,1.0,2859,1659,2113,69,2.197247706422018,74.50826742651178,18.956521739130434,31.565217391304348,185.39568434384842,1.9363805014041777,1196.3605556395453,66.46447531330807,0.061798561447949485
308,198a1fe2771646fd0d750f0c2b82bf100b892bf2,Rodrigo Tobar,2020-08-02 10:02:31+00:00,"Add tests for @types.coroutine-based read function

This test reproduces the read() function as currently implemented by the
aiofiles package, where instead of it being an `async def` coroutine, it
is defined as a generator decorated with @types.coroutine.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,36,36,0,1.0,1.0,1.0,2895,1683,2137,72,2.184684684684685,75.75054516453801,17.56,29.16,170.75422509642712,1.8014700612918435,1100.7468089384247,61.15260049657917,0.05691807503214237
309,5afd4cd0250bb89f573991a7857e6d8638611fa4,Rodrigo Tobar,2020-08-04 07:27:54+00:00,"Fix 32-bit behavior on cffi backends

The cffi backend, when running in python 2.7 and being use_float=True,
always yielded long() objects, even if the values were small,
breaking the current set of expectations of our tests. With this change
the values returned by this backend will be int() if they are small
enough, of long() if they go beyond the underlying native int C type,
when running on python 2.7.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,2,1,1,,,,2895,1683,2137,72,2.184684684684685,75.75054516453801,17.56,29.16,170.75422509642712,1.8014700612918435,1100.7468089384247,61.15260049657917,0.05691807503214237
310,08c78c3e94be494bdd7e6bcece543cf099fca763,Rodrigo Tobar,2020-08-04 07:36:49+00:00,"Fix yajl2 backend integer callback declaration

The two ctypes-based yajl backends (for versions 1 and 2, respectivelly)
used the same definition for their integer callback, while in reality
this is different between the two different major versions of yajl:
version 1 of yajl gives values to the callback using a ""long"" integer
type, while in yajl 2 this value is passed as a ""long long"" instead. Our
callback erroneously declared ""long"" as the value type for both major
versions.

This change fixes the declaration of the integer callback, making it
depend on the major version of yajl being wrapped by ctypes. When yajl
version 2 is wrapped, the callback now declares its values to be passed
with a ""long long"" type as they should. At the same time, an extra
int(v) call is made on the value to force an ""int"" type when possible in
python 2.7, rather than yielding ""long"" python objects otherwise.

Together with this change, I'm also simplifying a bit the setup
infrastructure for these callbacks to avoid some code duplication.

Depending on the platform and architecture, this change is significant,
because ""long"" is ""at least"" 32 bits in size (but it's 64 bits in x64_64
Linux/MacOS), while ""long long"" is defined to be ""at least"" 64 bits in
size. This affects the range of values that can be represented by yajl
itself, and therefore passed to our library.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,49,26,23,1.0,1.0,0.7058823529411765,2898,1686,2140,72,2.184684684684685,75.6389745195396,17.64,29.28,171.21383409625403,1.8014700612918435,1101.2064179382517,61.17813432990289,0.057071278032084664
311,b29313bf1875704d78a21724a393785248ad64a7,Rodrigo Tobar,2020-08-04 07:37:33+00:00,"Add missing long_description_content_type

This was flagged as a small note/warning by twine.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,1,1,0,,,,2913,1696,2152,74,2.1936936936936937,75.59019193468518,18.28,30.08,177.40452063810196,1.8113807755775577,1139.6290270841462,63.31272372689702,0.05913484021270065
312,e5f90687b65020715d0a04a7afba853489233310,Rodrigo Tobar,2020-08-04 07:37:33+00:00,"Move yajl patching process to setup.py

When building ijson in yajl embedded mode (IJSON_EMBED_YAJL=1) we
previously had to manually get a copy of yajl, and move files around so
yajl and ijson could be compiled together into a single shared library.
This made it less clear that these two processes had to be performed,
making the setup process a bit more difficult to maintain.

This commit brings the patching process of yajl into setup.py. Instead
of getting a copy of yajl via git clone we use the new git submodule as
the yajl sources, which we first copy into a writable location, and then
modify them as needed. This means that users who want to build an ijson
package in yajl embedded mode only need to ensure that the submodule is
present, and that the environment variable is set.

This commit also updates the AppVeyor pipeline to use this new
procedure.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,26,20,6,1.0,1.0,1.0,2929,1706,2161,77,2.188340807174888,75.62323466708342,18.28,30.08,177.40452063810196,1.8113807755775577,1139.6290270841462,63.31272372689702,0.05913484021270065
313,ff4407ab2563f1311d7bff9f9cc404e2470ca14f,Rodrigo Tobar,2020-08-04 07:37:33+00:00,"Signal when a backend doesn't handle 64bit int

This will be used to test what happens when we try to parse a JSON
stream with such integers when using `use_float=True`.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,4,3,1,0.0,0.0,0.0,2900,1687,2142,72,2.189189189189189,75.61301563293817,17.92,29.72,174.43574206028163,1.7982557755775577,1115.8791844635753,61.9932880257542,0.05814524735342721
314,476907b7c18e7912583b9a776a60dc1692245d9e,Rodrigo Tobar,2020-08-04 07:37:33+00:00,"Test 64bit integer parsing when use_float=True

When using a backend that supports this (almost all, except yajl) the
parsing should be successful, otherwise it should fail.

To help simplifying this a bit I've refactored some code out of
assert_numbers into its own small, utility function.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,18,15,3,0.0,1.0,1.0,2912,1696,2151,74,2.1936936936936937,75.59297321154537,18.28,30.08,177.40452063810196,1.8113807755775577,1139.6290270841462,63.31272372689702,0.05913484021270065
315,6671d4c0751382213f4278994fc262a872b6cd7b,Rodrigo Tobar,2020-08-04 10:07:00+00:00,"Release ijson v3.1.1

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,3,2,,,,2929,1706,2161,77,2.188340807174888,75.62323466708342,18.28,30.08,177.40452063810196,1.8113807755775577,1139.6290270841462,63.31272372689702,0.05913484021270065
316,81229e707b24d64655817e6df0bbbf8b83d48017,Rodrigo Tobar,2020-08-13 07:33:02+00:00,"Clarify parse_value's state_stack's state

The previous version of this code had 3 lines missing from the coverage.
These lines were missing because they were after an ""if state_stack""
condition, which I initially thought could be true or false depending on
the program execution. Extensive testing has showed us that these lines
are never touched, and closer code inspection also reveals that the
state_stack list is never empty before entering into the main ""if/elif""
control block, as this is ensured in the previous try/catch block.

This commit therefore removes the conditions resulting in missing lines,
and instead adds an assert expression after the try/catch block to show
more explicitly the state of the execution.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,13,4,9,1.0,1.0,1.0,2924,1701,2156,77,2.1748878923766815,75.64992199874062,18.28,30.08,177.40452063810196,1.8113807755775577,1139.6290270841462,63.31272372689702,0.05913484021270065
317,183fe165e7024a1172052617d0467170854a27fa,Rodrigo Tobar,2020-09-25 06:07:30+00:00,Test building extensions in non-CPython impls,False,2,1,1,,,,2924,1701,2156,77,2.1748878923766815,75.68085959060578,18.2,29.96,176.82309829150665,1.8133807755775577,1138.4502768716566,63.24723760398094,0.058941032763835555
318,e1b77281ddaa7f439c0365afb1bbc4a3395aa152,Rodrigo Tobar,2020-09-29 02:36:23+00:00,"Remove conditional around C extension inclusion

After testing the building of the C extension in pypy environments, we
can now safely remove the full conditional around the inclusion of the
extension in the setup process.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,42,20,22,,,,2922,1700,2155,76,2.1748878923766815,75.65792020441665,18.2,29.96,176.82309829150665,1.8133807755775577,1138.4502768716566,63.24723760398094,0.058941032763835555
319,812dca959c8ddf9eff00ea0c56ceaa36f0d25edb,Rodrigo Tobar,2020-09-29 02:45:01+00:00,"Release ijson v3.1.2

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,3,2,,,,2922,1700,2155,76,2.1748878923766815,75.65792020441665,18.2,29.96,176.82309829150665,1.8133807755775577,1138.4502768716566,63.24723760398094,0.058941032763835555
320,1d284d1706427318458085462d1fd7ebf38b7649,Rodrigo Tobar,2020-10-18 02:08:28+00:00,"Align package description with other texts

Both the GitHub repository description and the README file speak about
""interfaces"" in plural since the addition of asyncio and push support,
but the package description was missing.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,2,1,1,,,,2922,1700,2155,76,2.1748878923766815,75.65792020441665,18.2,29.96,176.82309829150665,1.8133807755775577,1138.4502768716566,63.24723760398094,0.058941032763835555
321,fc86e0135661d40612d1eca0054a6e4c45bd5982,Rodrigo Tobar,2020-10-18 02:08:28+00:00,"Release ijson 3.1.2.post0

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,3,2,,,,2922,1700,2155,76,2.1748878923766815,75.65792020441665,18.2,29.96,176.82309829150665,1.8133807755775577,1138.4502768716566,63.24723760398094,0.058941032763835555
322,98b8bc3b0d76315ddbba6a481d2047209ce31749,Rodrigo Tobar,2020-11-21 14:42:55+00:00,"Raise error on invalid numbers in python backend

The python backend was incorrectly *not* failing when some invalid JSON
numbers were found. The JSON specification constrains which numbers are
accepted, with leading zeros not allowed, and fractions needing at
least one digit before and after the decimal point.

This commit prevents invalid JSON numbers from being successfully parsed
by the python backend. The new checks add <10% of performance overhead
(when compared locally using the big_int_object and big_decimal_object
benchmarks, both of which are purposefully numerically heavy), but there
might be ways to improve it. However the python backend should be always
the last resource, as its speed is between 20 and 30 times that of the
fastest backends. And in any case, correctness comes before performance
anyway.

Part of this issue (leading zeros) was originally reported in #40.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,7,7,0,0.0,0.0,0.0,2929,1704,2160,78,2.210762331838565,75.57722563582885,19.36,31.8,192.12745692334727,1.8357129614639605,1302.927003594113,72.38483353300629,0.06404248564111575
323,016862ff1f6b51d85163e927c45283b42ffc01cd,Rodrigo Tobar,2020-11-21 15:08:11+00:00,"Add tests for invalid JSON numbers

These new unit tests will ensure errors are raised by all backends, old
and new, when invalid JSON numbers are found in the stream.

During the development of these tests it also became clear that the yajl
backend also doesn't detect leading zeros appropriately; we therefore
simply expose this behavior explicitly during the tests, but otherwise
won't care about dealing with it.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,18,18,0,1.0,0.07142857142857142,0.9285714285714286,2947,1717,2174,81,2.232142857142857,75.5207059017154,19.6,32.4,196.4020056215057,1.8458022471782463,1333.7511088054907,74.09728382252727,0.06546733520716858
324,6d0bd23ef7e5d9cc10bfcb38e35590e4b3eef5a4,Rodrigo Tobar,2020-11-24 02:27:28+00:00,"Detect @types.coroutine read() as async files

Most of python awaitables are native coroutines (async def functions),
but the definition of an awaitable includes also generator functions
decorated with the @types.coroutine function, named generated-based
coroutines.

This small difference has bitten us already in the past (see #32 for
example), and while doing other work I realized we hadn't seen the end
of it. In particular, the automatic detection of the file object given
to the main entry point functions of ijson (basic_parse, parse, kvitems
and items) didn't recognize file objects with a generator-based read
coroutine as asynchronous file objects, and therefore incorrectly routed
them to be parsed using the synchronous family of functions, which of
course fails.

This commit adds detection of file objects with generator-base read()
coroutines on the main entry point functions of all backends, correctly
routing them through the corresponding *_async function.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,17,14,3,1.0,1.0,1.0,2958,1720,2184,81,2.2355555555555555,75.48909071325406,19.88,32.76,199.62463661373982,1.8680403424163416,1392.4046868116152,77.35581593397863,0.06654154553791326
325,52a170d06df76adc17969f8ee286fcbef0dfdacc,Rodrigo Tobar,2020-11-24 02:27:28+00:00,"Add tests for generator-based coroutine detection

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,8,8,0,1.0,1.0,0.0,2966,1727,2191,81,2.234513274336283,75.33944505200944,19.92,32.84,199.85104261362446,1.8680403424163416,1392.5178898115576,77.36210498953098,0.06661701420454147
326,3323e3aaa7a07089c8a31444202f43126bdb6aad,Rodrigo Tobar,2020-11-24 02:46:01+00:00,"Release ijson v3.1.3

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,3,2,,,,2966,1727,2191,81,2.234513274336283,75.33944505200944,19.92,32.84,199.85104261362446,1.8680403424163416,1392.5178898115576,77.36210498953098,0.06661701420454147
327,9004f802d372f670a63942f3dcc18611474ce25f,Rodrigo Tobar,2021-02-25 03:20:51+00:00,"Recognise incomplete JSON content on python backend

As pointed out in #42, the python backend failed to properly recognise
valid but incomplete JSON content when the incomplete bits were the
beginning of the ""true"", ""false"" or ""null"" tokens.

This commit adds support for recognising these cases, and adds test
cases that will ensure these cases are properly recognised by all
backends, including the python one.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,50,50,0,0.7777777777777778,0.7777777777777778,0.6666666666666666,3008,1736,2232,81,2.251101321585903,75.26242096407913,20.08,33.2,202.62186481712916,1.8685711484348568,1411.3462660873438,78.40812589374133,0.06754062160570971
328,1ebf1d4cd6cbdb95545cd7a78d209136ae3479bc,Rodrigo Tobar,2021-03-02 07:28:25+00:00,"Revert non-concatenating parse implementation

The new parse implementation that avoids concatenating path elements to
form a prefix against which items/kvitems can compare doesn't work when
an element name contains a dot in them (e.g., selecting prefix ""0.1"" in
{""0.1"": 1}). This is because on the one hand parse() creates a list of
element names (in this case, [""0.1""]), while on the case of the prefix
it is converted into a list by always splitting on the dot (in this
case, [""0"", ""1""]).

This reverts commits 833a088 and 3866612, which introduced the new
functionality and ported the kvitems and items routines to use it,
correspondingly.

This change addresses #41.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,121,24,97,1.0,0.29850746268656714,1.0,2984,1724,2213,81,2.267857142857143,75.58108739521698,20.0,33.12,202.34767469823822,1.8485711484348568,1410.9769782184094,78.38760990102276,0.06744922489941273
329,f949477feae6faf92c5d039efa4f3c4fa9c14db5,Rodrigo Tobar,2021-03-02 07:28:28+00:00,"Add tests for keys with "".""

This will prevent issues like #41 surface again.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,12,12,0,1.0,1.0,1.0,2996,1735,2224,81,2.2622222222222224,75.55457172668348,20.0,33.12,202.34767469823822,1.8485711484348568,1410.9769782184094,78.38760990102276,0.06744922489941273
330,ed2182e0b4dcbd1778ceb799eb21361a12dafb20,Rodrigo Tobar,2021-03-02 09:59:40+00:00,"Release ijson v3.1.4

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,3,2,,,,2996,1735,2224,81,2.2622222222222224,75.55457172668348,20.0,33.12,202.34767469823822,1.8485711484348568,1410.9769782184094,78.38760990102276,0.06744922489941273
331,d17ff4f73dbbbd15909d00992094fc539d0dc348,Rodrigo Tobar,2021-05-18 06:55:20+00:00,"Remove unused imports from test modules

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,6,0,6,,,,2990,1730,2219,81,2.2622222222222224,75.66642486462098,20.0,33.12,202.34767469823822,1.8485711484348568,1410.9769782184094,78.38760990102276,0.06744922489941273
332,851e3a8d6fea3ec6106217cd9c6bfea5ccb9d202,Rodrigo Tobar,2021-05-18 07:27:33+00:00,"Add ijson.dump utility

This new utility might give some clarity to users that want to use the
library. Instructions on how to use it are included in the
documentation, and small, simple set of unit tests (against non-ascii
JSON though) are also included.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,128,128,0,0.5106382978723404,0.5106382978723404,1.0,3078,1792,2285,84,2.2660944206008584,75.09461072483249,19.48148148148148,31.77777777777778,191.77510802731777,1.875661116275661,1320.2061915127358,73.34478841737422,0.0639250360091059
333,0bf95e894df31f2dacbe5024c7f3b646d2fe5c4a,Rodrigo Tobar,2021-06-25 14:08:31+00:00,"Add multiple_values option to ijson.dump utility

This allows us to quickly test some cases that were not possible before.
Unit tests have been updated to ensure we test this option.",False,23,19,4,0.0,0.6923076923076923,0.0,3093,1805,2298,85,2.2735042735042734,74.87327309182903,19.59259259259259,31.88888888888889,192.25731358319385,1.8941796347941793,1321.2167179021856,73.40092877234365,0.06408577119439793
334,f2ed122298a24b748f7a7f3c5dd197bba16b4421,"Kian-Meng, Ang",2021-10-28 22:31:53+00:00,Fix typos,False,14,7,7,,,,3093,1805,2298,85,2.2735042735042734,74.87327309182903,19.59259259259259,31.88888888888889,192.25731358319385,1.8941796347941793,1321.2167179021856,73.40092877234365,0.06408577119439793
335,b67b90fd8d071a6f033c93f56e0c5a43440ea937,Rodrigo Tobar,2022-03-16 02:00:14+00:00,"Formalise support for Python 3.10

This includes adding tests on Travis, and adding the classifier in the
package description.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,4,1,,,,3094,1805,2299,85,2.2735042735042734,74.87072262045274,19.59259259259259,31.88888888888889,192.25731358319385,1.8941796347941793,1321.2167179021856,73.40092877234365,0.06408577119439793
336,7f551668282cc340139cd2a9575db60ed16f28a6,Rodrigo Tobar,2023-01-03 12:14:11+00:00,"Mark Python 3.11 as explicitly supported

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,3,2,1,,,,3095,1805,2300,85,2.2735042735042734,74.86820591221633,19.59259259259259,31.88888888888889,192.25731358319385,1.8941796347941793,1321.2167179021856,73.40092877234365,0.06408577119439793
337,a2b63cd0b813ccbaf6fcd0160fb54f410e588f4a,Rodrigo Tobar,2023-01-03 12:16:24+00:00,"Release ijson 3.2.0

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,3,2,,,,3095,1805,2300,85,2.2735042735042734,74.86820591221633,19.59259259259259,31.88888888888889,192.25731358319385,1.8941796347941793,1321.2167179021856,73.40092877234365,0.06408577119439793
338,a62c4b35d58775fbedd0308b4685f1b497a7a917,Rodrigo Tobar,2023-01-03 19:22:11+00:00,"Release ijson 3.2.0.post0

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,3,2,,,,3095,1805,2300,85,2.2735042735042734,74.86820591221633,19.59259259259259,31.88888888888889,192.25731358319385,1.8941796347941793,1321.2167179021856,73.40092877234365,0.06408577119439793
339,92a851eadc249857d036ac28050032aa169686d8,Rodrigo Tobar,2023-05-29 11:24:27+00:00,"Mark Python 3.12 as explicitly supported

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,5,0,,,,3096,1805,2301,85,2.2735042735042734,74.86572223790216,19.59259259259259,31.88888888888889,192.25731358319385,1.8941796347941793,1321.2167179021856,73.40092877234365,0.06408577119439793
340,f69f13abc9c5d47d9ac9da4631d2e4fca1e18d87,Rodrigo Tobar,2023-06-12 13:20:34+00:00,"Release ijson 3.2.1

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,3,2,,,,3096,1805,2301,85,2.2735042735042734,74.86572223790216,19.59259259259259,31.88888888888889,192.25731358319385,1.8941796347941793,1321.2167179021856,73.40092877234365,0.06408577119439793
341,d5e6eae20532a0f079a197de8a24c0891eb639ba,Michał Górny,2023-06-14 08:24:09+00:00,"Add an explicit test for loading the yajl2_c extension (#99)

Following the discussion in #98, add an explicit test that verifies
that the yajl2_c extension can be loaded successfully if it was built.
If the extension module is not present, the test is skipped.

Signed-off-by: Michał Górny <mgorny@gentoo.org>",False,10,10,0,1.0,1.0,1.0,3106,1813,2309,85,2.2808510638297874,74.70928918884042,19.703703703703702,32.0,192.7486541127686,1.9126981533126979,1321.9302806539827,73.44057114744348,0.06424955137092285
342,a5c60df0f72cf9f1f159c771187784a545ce461b,Rodrigo Tobar,2023-06-16 01:34:47+00:00,"Handle case when distutils is no more

Python 3.12 has officially removed distutils from the python standard
library. While in practice it still seems to work somehow in local
tests, we should be prepared to use setuptool's copy instead.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,13,9,4,,,,3111,1817,2313,85,2.2808510638297874,74.67204429841075,19.703703703703702,32.0,192.7486541127686,1.9126981533126979,1321.9302806539827,73.44057114744348,0.06424955137092285
343,ec8481415b01a4bf348fd98e824bddadf92c7b0b,Michał Górny,2023-06-20 14:08:18+00:00,"Add an environment variable to control building yajl2_c

Add a IJSON_BUILD_YAJL2C environment variable to make it possible
to override whether yajl2_c is being built.  The default is to build it
if either yajl2 is found or embedding is enabled.  However, the envvar
can be used to either force building (i.e. effectively make the build
fail if yajl2 is not detected) or disable building it even if yajl2
is installed.

The primary use case is to make it possible to disable building
the extension for PyPy3 where it is currently known to be broken.

Signed-off-by: Michał Górny <mgorny@gentoo.org>",False,4,3,1,,,,3113,1819,2315,85,2.2808510638297874,74.62619933465231,19.74074074074074,32.111111111111114,193.2196911571502,1.919899799403233,1323.443151376741,73.52461952093007,0.06440656371905004
344,2e638b36557ed6366102443b688505f5655b5609,Rodrigo Tobar,2023-06-22 03:58:32+00:00,"Release ijson 3.2.2

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,3,2,,,,3113,1819,2315,85,2.2808510638297874,74.62619933465231,19.74074074074074,32.111111111111114,193.2196911571502,1.919899799403233,1323.443151376741,73.52461952093007,0.06440656371905004
345,3a94e5899ea88a406a94ddc217be687e9206be9c,Rodrigo Tobar,2023-07-22 05:16:07+00:00,"Release ijson 3.2.3

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,5,3,2,,,,3113,1819,2315,85,2.2808510638297874,74.62619933465231,19.74074074074074,32.111111111111114,193.2196911571502,1.919899799403233,1323.443151376741,73.52461952093007,0.06440656371905004
346,41a30e2c8d580dbf57f181faa178829f4b70475d,Rodrigo Tobar,2023-11-25 15:09:53+00:00,"Remove Python code for compatibility with < 3.5

Most of the compat module dealt with the differences between Python 2
and 3, and now that we don't formally support 2.7 anymore we can finally
remove it. Note that the module itself still contains code for a
different type of compatibility (between strings and bytes), which we
still need to retain.

Additionally, the module defined a flag that helped identifying when the
code was running under 3.5+. This is now always the case, which results
in some simplifications, most notably unconditional import of the
utils35 module, and the ability to define coroutines freely.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,78,25,53,1.0,1.0,0.25,3044,1770,2255,83,2.2100840336134455,75.71444382378034,19.0,31.22222222222222,188.70120348397285,1.8285800819586013,1308.491871645015,72.69399286916753,0.06290040116132427
347,f058475a0c70abd10bdee009aa20c01c76fc630c,Rodrigo Tobar,2023-11-25 15:09:53+00:00,"Remove tests support for Python < 3.5

Now that we don't plan to support Python 2.7 and 3.4 anymore, the tests
can be simplified, since they previously catered for these particular
versions in a few places (skipping some tests, adding some more, or
adjusting expectations, on a case-by-case basis).

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,103,32,71,0.12,0.92,0.64,3072,1787,2280,83,2.2489270386266096,75.0607817721418,19.37037037037037,31.59259259259259,190.60094052773312,1.8832726289732458,1315.3392550450108,73.07440305805619,0.06353364684257767
348,39b782080dc7ec6550f6d79bf005dcb3923925ed,Rodrigo Tobar,2023-11-25 15:09:53+00:00,"Remove Python 2.7 and 3.4 from supported versions

We are planning to remove support for these two versions, which are the
ones bringing the most maintainability overheads, and for very little
gain nowadays, since they both have been discontinued a long time ago.

Now that we only support 3.5+, we don't need to explicitly mention it
anywhere else.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,14,8,6,,,,3111,1819,2313,85,2.2808510638297874,74.63082768414425,19.74074074074074,32.111111111111114,193.2196911571502,1.919899799403233,1323.443151376741,73.52461952093007,0.06440656371905004
349,99fc2b263dc20860972a44bdc84afd4f72f09200,Rodrigo Tobar,2023-11-30 06:40:02+00:00,"Make reader re-creation possible

As it was, the current code made it hard to re-create a reader for the
data we run our benchmark against. This change moves the creation of the
reader object into a small inner function that we now call in a with
block to ensure it's always closed.

Moreover, the reader object has always been created, so there was some
code checking for its existence that shouldn't have been there in the
first place.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,33,15,18,1.0,1.0,1.0,3041,1766,2252,83,2.2016806722689077,75.73852995418879,18.925925925925927,31.11111111111111,187.79085803528935,1.8287875101088236,1304.82185605889,72.49010311438282,0.06259695267842975
350,f31f410de46591677cf4cc3c75f00737ab6aa257,Rodrigo Tobar,2023-11-30 06:40:02+00:00,"Allow multiple iterations of the same function call

Because of this we now report min/avg/median/max instead of just a
number.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,21,13,8,0.0,0.0,0.8,3046,1769,2257,83,2.2058823529411766,75.71887495180835,19.0,31.22222222222222,188.70120348397285,1.8285800819586013,1308.491871645015,72.69399286916753,0.06290040116132427
351,ec5c536cc78ddf521a9522498993dd87a1382314,Rodrigo Tobar,2023-11-30 06:40:02+00:00,"Print stats instead of individual results

When benchmarking, more than one iteration might be requested on a
method, so instead of reporting each individual result we print the main
result statistics.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,29,22,7,0.6923076923076923,0.6923076923076923,0.6923076923076923,3061,1780,2270,83,2.2041666666666666,75.64881937396636,19.59259259259259,32.44444444444444,198.40785810823698,1.856945849569845,1388.7370482760539,77.15205823755853,0.06613595270274562
352,09545471215b32d415e8160341719e3584c0fb93,Rodrigo Tobar,2023-11-30 06:40:03+00:00,"Turn exception into assertion

It should be the latter since we are the ones calling into this routine.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,3,1,2,1.0,1.0,1.0,3060,1779,2269,83,2.2,75.65160501557448,19.62962962962963,32.44444444444444,198.49130793091157,1.8776993617026674,1417.5392948196472,78.75218304553594,0.06616376931030382
353,acc0162c34dabc523f1fde56bb16ec48b5b19d1f,Rodrigo Tobar,2023-11-30 06:40:04+00:00,"Switch -m/-M to match ijson.dump

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,4,2,2,,,,3060,1779,2269,83,2.2,75.65160501557448,19.62962962962963,32.44444444444444,198.49130793091157,1.8776993617026674,1417.5392948196472,78.75218304553594,0.06616376931030382
354,ca62714454bc9f8b3808a35e3cd28d2ae707f33b,Rodrigo Tobar,2023-11-30 06:40:11+00:00,"Remove need for unnecessary -i argument

Since we don't have positional arguments, we can consider the first one
as being a file we want to benchmark.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,2,1,1,,,,3060,1779,2269,83,2.2,75.65160501557448,19.62962962962963,32.44444444444444,198.49130793091157,1.8776993617026674,1417.5392948196472,78.75218304553594,0.06616376931030382
355,6d4bbb11b30889de3d642b5b77bda121dc65ae3c,Rodrigo Tobar,2023-11-30 06:40:11+00:00,"Support multiple input filenames

There was no reason not to, so let's handle that properly.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,9,5,4,0.0,0.0,1.0,3061,1780,2270,83,2.2041666666666666,75.64365206856334,19.62962962962963,32.44444444444444,198.49130793091157,1.8776993617026674,1417.5392948196472,78.75218304553594,0.06616376931030382
356,6a6586de99e331431509120bb14de2d683a9a60f,Rodrigo Tobar,2023-11-30 06:41:33+00:00,"Use time.perf_counter for time measurements

This the reliable, multiplatform, recommended way to measure times when
doing benchmarks, and it is available unconditionally now that we
support Python 3.5+.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>

counter",False,5,3,2,0.0,0.0,0.0,3062,1781,2271,83,2.2041666666666666,75.64069727914206,19.62962962962963,32.44444444444444,198.49130793091157,1.8776993617026674,1417.5392948196472,78.75218304553594,0.06616376931030382
357,9cd01e2050407cd04783897cdd324f6958e8b401,Rodrigo Tobar,2023-11-30 06:41:41+00:00,"Fix Windows detection

The previous logic included ""darwin"" (i.e., macOS) and ""cigwin"", so it
wasn't really good at spotting what we wanted to.

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,2,1,1,,,,3062,1781,2271,83,2.2041666666666666,75.64069727914206,19.62962962962963,32.44444444444444,198.49130793091157,1.8776993617026674,1417.5392948196472,78.75218304553594,0.06616376931030382
358,f2f45e35e3430f5510170f57b2cf2dc0c6bdd915,Rodrigo Tobar,2023-11-30 06:41:41+00:00,"Add tests for benchmark utility

Signed-off-by: Rodrigo Tobar <rtobar@icrar.org>",False,66,66,0,0.627906976744186,1.0,0.627906976744186,3127,1831,2321,86,2.176,75.26343785311501,19.25,31.607142857142858,192.42123711241405,1.864210098784715,1368.4412481303552,76.02451378501974,0.06414041237080466
