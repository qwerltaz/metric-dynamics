ID,hash,author,date,commit_message,is_merge,lines_changed,insertions,deletions,dmm_unit_size,dmm_unit_complexity,dmm_unit_interfacing,radon_LOC,radon_LLOC,radon_SLOC,radon_comments,radon_avg_cc,radon_avg_MI,radon_avg_vocabulary,radon_avg_length,radon_avg_volume,radon_avg_difficulty,radon_avg_effort,radon_avg_time,radon_avg_bugs
0,bfbc714d4e5383348a43e63d12418360ba09bc91,Yury Selivanov,2016-06-14 21:53:37+00:00,"Initial commit

The driver can connect to PostgreSQL.",False,518,518,0,,,,29,3,27,0,,100.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
1,13029f655df257ede93f7dbc7cb82b08ffeda748,Yury Selivanov,2016-06-15 00:41:34+00:00,Implement Connection; rudimentary query support & error processing,False,299,271,28,1.0,1.0,0.2222222222222222,63,22,48,0,1.5,83.17001092886541,1.5,1.5,2.3774437510817346,0.25,1.1887218755408673,0.06604010419671485,0.0007924812503605782
2,29ca06fcc350b6bf13602cc73930d846ed8b8ce2,Yury Selivanov,2016-06-17 18:21:07+00:00,"Rudimentary implementation of bind, prepare, and describe",False,872,703,169,1.0,1.0,0.0,68,26,52,0,1.4,82.23913103995837,1.5,1.5,2.3774437510817346,0.25,1.1887218755408673,0.06604010419671485,0.0007924812503605782
3,e8339d89a3c69938ddd8ddb7c775edc56c8524ff,Elvis Pranskevichus,2016-06-17 21:00:23+00:00,Add a module to map Postgres encoding names to Python,False,57,57,0,1.0,1.0,1.0,125,31,101,0,1.3333333333333333,88.15942069330556,1.0,1.0,1.5849625007211563,0.16666666666666666,0.7924812503605781,0.04402673613114324,0.0005283208335737188
4,fa9ac5d97a75e5dee3b14f03d61dc81fa64890c2,Yury Selivanov,2016-06-17 21:03:25+00:00,Add encoding of arguments and decoding of results,False,332,282,50,1.0,1.0,0.6363636363636364,141,43,113,0,1.3,86.74450163846109,1.0,1.0,1.5849625007211563,0.16666666666666666,0.7924812503605781,0.04402673613114324,0.0005283208335737188
5,c787c5581aaaec1c79d3b247b88fd9563eee27ab,Yury Selivanov,2016-06-17 21:13:11+00:00,Connection.prepare no longer needs 'name' parameter,False,14,12,2,,,1.0,141,43,113,0,1.3,86.74450163846109,1.0,1.0,1.5849625007211563,0.16666666666666666,0.7924812503605781,0.04402673613114324,0.0005283208335737188
6,cc62a1eea746a7191b4a07a48dcf55f4c76787ee,Yury Selivanov,2016-06-17 21:45:35+00:00,Use loop.create_future if it exists,False,15,12,3,1.0,1.0,1.0,150,50,120,0,1.4545454545454546,86.09373456804262,1.0,1.0,1.5849625007211563,0.16666666666666666,0.7924812503605781,0.04402673613114324,0.0005283208335737188
7,0b307043b6823eb70e4cf43d93632cc1ebff4875,Yury Selivanov,2016-06-20 16:50:25+00:00,Implement basic unittests infrastructure,False,118,115,3,1.0,0.7457627118644068,0.864406779661017,258,123,195,0,1.8214285714285714,79.85508528064726,1.8333333333333333,2.3333333333333335,4.68086662723764,0.25,2.34043331361882,0.13002407297882332,0.0015602888757458796
8,01273d9fa70e9a72d3f20db0357c763705d71216,Yury Selivanov,2016-06-20 21:29:34+00:00,"Add user, password, dbname to connect(); suport UNIX sockets",False,164,122,42,0.0,0.0,0.022727272727272728,312,163,241,3,2.392857142857143,78.7332908556282,3.0,6.666666666666667,19.944371168832646,0.5625,40.07715894433304,2.2265088302407245,0.006648123722944215
9,e1ffb7b75ff4c1b4124b9af5bdd1b00230589129,Yury Selivanov,2016-06-20 21:32:20+00:00,"Add user, password, dbname to connect(); suport UNIX sockets",False,11,11,0,1.0,1.0,1.0,323,169,248,3,2.3333333333333335,81.77139216196703,2.5714285714285716,5.714285714285714,17.09517528757084,0.48214285714285715,34.35185052371404,1.9084361402063355,0.0056983917625236125
10,696ecddf2ff492954e3e46c552f17434bbd47542,Elvis Pranskevichus,2016-06-21 20:58:13+00:00,"codecs: Fix date/time coding/decoding, add codec tests",False,356,291,65,1.0,1.0,1.0,515,189,425,9,2.3636363636363638,79.50707631799447,6.0,15.5,66.48062963051393,1.059375,292.821860603086,16.267881144615888,0.022160209876837977
11,4cb226552fa8ea0ee4a25861e301ab4452f1148e,Elvis Pranskevichus,2016-06-21 21:57:24+00:00,"codecs: Add basic support for array coding/decoding, add OID[] codec",False,71,68,3,,,,519,189,429,9,2.3636363636363638,79.49268449031685,6.0,15.5,66.48062963051393,1.059375,292.821860603086,16.267881144615888,0.022160209876837977
12,f42628496650b6b31c5739c22cc73d57863b10ca,Elvis Pranskevichus,2016-06-23 14:38:06+00:00,"Initial implementation of error translation

The intended design is to have one exception class per SQL error code",False,44,42,2,1.0,1.0,0.2,556,212,452,10,2.2,78.83220954363726,6.333333333333333,14.777777777777779,63.27032980857997,1.1388888888888888,278.0323539869189,15.446241888162158,0.021090109936193327
13,cb31c9dbeacba2c54cfc75615e52c464d5a1d531,Elvis Pranskevichus,2016-06-23 14:38:06+00:00,"Add timeout parameter to asyncpg.connect()

Defaults to 60 seconds",False,30,13,17,1.0,1.0,1.0,552,208,446,10,2.15,78.95093410783676,6.333333333333333,14.777777777777779,63.27032980857997,1.1388888888888888,278.0323539869189,15.446241888162158,0.021090109936193327
14,aa64b757e7c185e5351fd96f2261e1e58e0c8b0b,Elvis Pranskevichus,2016-06-23 14:38:06+00:00,"tests: Run tests in a temporary Postgres cluster, unless specified otherwise

Tests are now run in a temporary one-off cluster, unless an environment
variable PGHOST is set.",False,360,357,3,0.5403225806451613,0.6048387096774194,0.8104838709677419,906,439,715,15,2.4027777777777777,73.98796439781106,12.6,24.2,122.45633201701169,1.5508620689655173,557.4879238260495,30.97155132366941,0.040818777339003895
15,05cac10a22c2f9dc8c88f9b8cadd57e45b456cf4,Yury Selivanov,2016-06-23 19:53:19+00:00,Reorganize code: create futures in protocol,False,52,34,18,0.0,0.0,0.0,907,435,716,15,2.4027777777777777,74.0299980418556,12.6,24.2,122.45633201701169,1.5508620689655173,557.4879238260495,30.97155132366941,0.040818777339003895
16,94f5593ec9c94fa53f46b3deebb1569498711d41,Yury Selivanov,2016-06-24 03:38:11+00:00,WIP support of runtime types introspection,False,259,184,75,1.0,1.0,0.9,948,446,753,15,2.4444444444444446,73.61507059780453,13.0,24.8,126.1472837157115,1.50371921182266,561.7920239584853,31.210667997693626,0.04204909457190383
17,148bec2a5e265e589638a72c65143d2155d69cda,Yury Selivanov,2016-06-24 03:38:33+00:00,cluster: Stop cluster in fast mode,False,3,2,1,1.0,1.0,1.0,955,447,760,15,2.4444444444444446,73.58568055391541,13.0,24.8,126.1472837157115,1.50371921182266,561.7920239584853,31.210667997693626,0.04204909457190383
18,30ec75dae8b933160b93a86eedffd3088d7855c7,Yury Selivanov,2016-06-24 03:38:33+00:00,"Add support for ""char"" type",False,8,8,0,,,,953,446,758,15,2.4444444444444446,73.601599783534,13.0,24.8,126.1472837157115,1.50371921182266,561.7920239584853,31.210667997693626,0.04204909457190383
19,0722139228d8e29575a7d09eb99684faa73cb8af,Yury Selivanov,2016-06-24 03:38:33+00:00,connect: Close failed transports,False,1,1,0,0.0,0.0,0.0,954,447,759,15,2.4444444444444446,73.58718291030294,13.0,24.8,126.1472837157115,1.50371921182266,561.7920239584853,31.210667997693626,0.04204909457190383
20,2191939e2f42d7cecb3e92e4373b73f55acacdf6,Yury Selivanov,2016-06-24 03:38:34+00:00,Implement rudimentary support of array (1 dim) datatypes,False,143,120,23,0.0,0.0,0.0,968,446,773,15,2.4444444444444446,73.49471609931555,13.6,26.4,136.62865272702305,1.4856546956936278,605.9077865587302,33.66154369770722,0.04554288424234102
21,cff779ee41edf2b833d685c5604c89dac3891c88,Yury Selivanov,2016-06-24 16:29:06+00:00,Implement Record,False,62,52,10,,,,968,446,773,15,2.4444444444444446,73.49471609931555,13.6,26.4,136.62865272702305,1.4856546956936278,605.9077865587302,33.66154369770722,0.04554288424234102
22,02277fa88ecc3983280a7fdf28fd29081d4299e6,Elvis Pranskevichus,2016-06-24 20:37:03+00:00,"Add support for encoding/decoding of composite types

Additionally, fix handling of NULL values in arrays",False,469,376,93,0.0,1.0,1.0,1082,456,873,13,2.410958904109589,72.67596839718121,13.6,26.4,136.62865272702305,1.4856546956936278,605.9077865587302,33.66154369770722,0.04554288424234102
23,23bd2640f66a0e840c75dd1abb41ee9e035ec61a,Elvis Pranskevichus,2016-06-24 20:50:51+00:00,"Add support for domains, simplify resolution of statement codecs",False,55,43,12,0.0,1.0,1.0,1112,469,891,13,2.3783783783783785,72.2502399709597,14.0,26.7,139.6824017756106,1.655732198835647,678.358819458399,37.68660108102216,0.0465608005918702
24,afce590424e12c1fb939e24f078a193cbfd977d5,Elvis Pranskevichus,2016-06-24 20:54:13+00:00,Fix codec tests,False,10,9,1,0.0,1.0,1.0,1120,475,897,13,2.3783783783783785,72.15198953027621,13.7,26.4,136.94200893575257,1.574940409979342,620.8950933727207,34.49417185404003,0.045647336311917516
25,60e23545b44bb9e1ebf24e4ff986ed5832ae915a,Yury Selivanov,2016-06-24 21:26:28+00:00,Move types introspection query into a separate module,False,224,112,112,1.0,1.0,1.0,1120,476,899,13,2.3783783783783785,74.95066298125619,12.454545454545455,24.0,124.4927353961387,1.431764009072129,564.4500848842915,31.3583380491273,0.04149757846537956
26,ffb7844067f61a7c32ead3cd68f8edce810c5c75,Yury Selivanov,2016-06-24 21:26:51+00:00,Fix unittest warnings,False,10,5,5,,,,1120,476,899,13,2.3783783783783785,74.95066298125619,12.454545454545455,24.0,124.4927353961387,1.431764009072129,564.4500848842915,31.3583380491273,0.04149757846537956
27,ff61f750c091b9f78c45f0799b640562eaf33206,Elvis Pranskevichus,2016-06-24 21:41:25+00:00,Add test for NULL return value,False,8,8,0,0.0,1.0,1.0,1128,479,904,13,2.3783783783783785,74.89495457024329,12.454545454545455,24.0,124.4927353961387,1.431764009072129,564.4500848842915,31.3583380491273,0.04149757846537956
28,8344066ec0457f31685492d0f8ec7f43f37c082d,Yury Selivanov,2016-06-24 21:44:01+00:00,tests: Fix asyncio unclosed transport warnings,False,3,3,0,1.0,1.0,1.0,1131,480,905,15,2.3783783783783785,75.32921470203193,12.454545454545455,24.0,124.4927353961387,1.431764009072129,564.4500848842915,31.3583380491273,0.04149757846537956
29,970ecb562c3f1c59dfee55e611698769f2bd480e,Elvis Pranskevichus,2016-06-24 21:59:36+00:00,Add support for UUID type,False,34,34,0,,,,1136,481,910,15,2.3783783783783785,75.30711142744586,12.454545454545455,24.0,124.4927353961387,1.431764009072129,564.4500848842915,31.3583380491273,0.04149757846537956
30,f022a793588ed484df345644805a1d90e3d4ea95,Elvis Pranskevichus,2016-06-24 22:13:43+00:00,Add support for JSON and JSONB types,False,65,53,12,,,,1144,481,918,15,2.3783783783783785,75.29738694294582,12.454545454545455,24.0,124.4927353961387,1.431764009072129,564.4500848842915,31.3583380491273,0.04149757846537956
31,68bf6a7059eba6642d73775ccfb64356e4896168,Elvis Pranskevichus,2016-06-27 14:34:07+00:00,Implement support for custom type codecs,False,101,101,0,1.0,1.0,0.6857142857142857,1203,510,960,15,2.3552631578947367,74.76061170427043,13.0,24.727272727272727,129.7487742618895,1.4800010058169748,621.802604171551,34.54458912064172,0.04324959142062985
32,6ff1659e62f1c66abbe09ef99d530cbf9fad0646,Yury Selivanov,2016-06-27 15:57:20+00:00,Implement Record.__len__ and Record.__iter__,False,13,12,1,1.0,1.0,1.0,1208,513,963,15,2.3552631578947367,74.76061170427043,13.0,24.727272727272727,129.7487742618895,1.4800010058169748,621.802604171551,34.54458912064172,0.04324959142062985
33,a9c405e47ffce23e25f3fa5d3436745247ddbb4c,Yury Selivanov,2016-06-27 19:29:19+00:00,Implement statement.get_attributes() and .get_parameters(),False,293,249,44,0.0,0.4473684210526316,0.7105263157894737,1262,552,1006,15,2.3846153846153846,76.3449939787702,12.416666666666666,23.416666666666668,123.40349350509887,1.3898312940304043,571.4573302572858,31.747629458738093,0.04113449783503295
34,39040657650dfa54b8e8c3d27ce20be2e7bb4aae,Elvis Pranskevichus,2016-06-27 22:09:53+00:00,Document Connection.set_type_codec(),False,25,19,6,1.0,0.5,0.5,1273,553,1004,15,2.3846153846153846,77.18006645543915,12.416666666666666,23.416666666666668,123.40349350509887,1.3898312940304043,571.4573302572858,31.747629458738093,0.04113449783503295
35,e62a424ea7f6adbd9eab9d73896112d36a968e5c,Yury Selivanov,2016-06-27 22:45:06+00:00,Close transport if connection has failed,False,8,6,2,0.0,0.0,0.0,1297,562,1022,15,2.371794871794872,77.14795589445201,12.166666666666666,22.916666666666668,120.32936890906065,1.395783674982785,559.0106117632448,31.05614509795804,0.040109789636353546
36,1916a3130b2db7a5851a150039771e4a47e99f16,Elvis Pranskevichus,2016-06-27 22:46:49+00:00,Prohibit custom codecs on non-scalar types,False,38,29,9,0.0,1.0,1.0,1293,559,1019,15,2.358974358974359,77.19833936252451,12.166666666666666,22.916666666666668,120.32936890906065,1.395783674982785,559.0106117632448,31.05614509795804,0.040109789636353546
37,553a4ee5edca6c12273067ab23231fa8361ce2d5,Elvis Pranskevichus,2016-06-27 22:52:55+00:00,"Fix treatment of empty environment variables

A variable can be ""unset"" by setting it to an empty value, e.g
PGHOST= ...",False,10,6,4,,,,1299,562,1022,18,2.371794871794872,77.28627586951781,12.166666666666666,22.666666666666668,119.14064703351978,1.3600693892684994,545.7648537215038,30.32026965119465,0.03971354901117326
38,ab16b4a13b2c2187f2ff538ed275484951dc95ce,Elvis Pranskevichus,2016-06-27 22:56:46+00:00,Fix ResourceWarnings in cluster code,False,3,2,1,0.0,0.0,1.0,1300,563,1023,18,2.371794871794872,77.28126289955944,12.166666666666666,22.666666666666668,119.14064703351978,1.3600693892684994,545.7648537215038,30.32026965119465,0.03971354901117326
39,e9212f2db7368dcf68c5f60fe1ef200ad2baa2ca,Yury Selivanov,2016-06-29 19:22:53+00:00,Implement connection.execute() & connection.execute_script() methods,False,65,58,7,1.0,1.0,0.23529411764705882,1330,578,1042,18,2.2857142857142856,80.47458694913789,10.428571428571429,19.428571428571427,102.12055460015982,1.1657737622301423,467.79844604700327,25.988802558166842,0.03404018486671993
40,638b29deebb1d1ed25b8408c545fddb186a95e22,Elvis Pranskevichus,2016-06-29 19:38:18+00:00,Test execute_script transactionality,False,13,13,0,1.0,1.0,1.0,1343,584,1053,18,2.2705882352941176,80.47458694913789,10.428571428571429,19.428571428571427,102.12055460015982,1.1657737622301423,467.79844604700327,25.988802558166842,0.03404018486671993
41,61e38eed562a6484cb2c7bacf5f5a5bca2ad1a4e,Yury Selivanov,2016-06-29 20:11:08+00:00,Fix None arguments for execute,False,16,14,2,1.0,1.0,1.0,1351,588,1059,18,2.255813953488372,80.47458694913789,10.428571428571429,19.428571428571427,102.12055460015982,1.1657737622301423,467.79844604700327,25.988802558166842,0.03404018486671993
42,92366eabc1917140688cd022da21c83b86e7b418,Yury Selivanov,2016-06-29 20:27:37+00:00,Handle unknown oid type,False,9,9,0,1.0,1.0,1.0,1355,591,1062,18,2.2413793103448274,80.47458694913789,10.428571428571429,19.428571428571427,102.12055460015982,1.1657737622301423,467.79844604700327,25.988802558166842,0.03404018486671993
43,6c4883d6e4e65c9d6618244d821ca44c59ca5d58,Yury Selivanov,2016-06-29 20:27:56+00:00,tests: Test that we handle None->NULL conversion for TEXT and BINARY,False,32,26,6,0.0,1.0,1.0,1375,598,1080,18,2.2873563218390807,77.94690499050137,10.642857142857142,19.642857142857142,102.46018942174292,1.201488047944428,467.9682634577948,25.998236858766372,0.034153396473914306
44,348dbf817dc1e284e008beb7d64002a9540bec93,Yury Selivanov,2016-06-29 23:55:11+00:00,Implement connection.transaction(),False,218,218,0,0.28378378378378377,0.6148648648648649,0.8040540540540541,1593,739,1245,19,2.52,75.19826043315676,12.266666666666667,22.266666666666666,119.77150806791217,1.2826983685576567,594.3890417979878,33.02161343322154,0.039923836022637396
45,eb805ef9edfceee4547c1955867a87923ac21cd9,Yury Selivanov,2016-06-30 16:21:29+00:00,Move protocol implementation into a separate sub-package,False,30,17,13,,,,1594,740,1246,19,2.52,76.74836915608446,11.5,20.875,112.28578881366765,1.2025297205228032,557.2397266856136,30.957762593645196,0.03742859627122256
46,90fd239f51551c1551ea64d6294363c995763f62,Elvis Pranskevichus,2016-06-30 16:29:48+00:00,"Use ""database"" keyword argument consistently to indicate target database",False,28,14,14,,,,1594,740,1246,19,2.52,76.74836915608446,11.5,20.875,112.28578881366765,1.2025297205228032,557.2397266856136,30.957762593645196,0.03742859627122256
47,d3ce8302693aa306f67f050b51e529caa257a0bf,Elvis Pranskevichus,2016-06-30 16:29:52+00:00,cluster: Allow passing settings to init() and server GUCs to start(),False,48,43,5,0.0,0.8,0.8666666666666667,1632,761,1269,22,2.5047619047619047,76.46363321167428,12.0625,21.8125,119.34711911979299,1.241763654692082,620.412027733921,34.46733487410671,0.039782373039931006
48,12d855f287c27f8c3a71127bcd9269c6514768d2,Yury Selivanov,2016-06-30 21:19:49+00:00,Factor out Transaction class in a separate module,False,262,134,128,0.3333333333333333,0.6666666666666666,1.0,1638,763,1274,22,2.5047619047619047,75.36967711651248,11.647058823529411,20.529411764705884,107.33670923105714,1.3564233374084047,518.2531093925838,28.791839410699104,0.03577890307701905
49,cc73b6f2a21d2cd1e78a2a37f5c34c465f20ef59,Yury Selivanov,2016-07-01 00:35:11+00:00,"Add rudimentary QueryResult; tweak API

1. Old Connection.execute() is gone;

2. Connection.execute_script() is renamed to Connection.execute();

3. PreparedStatement.execute() is gone; new way of how one should
   asynchronously iterate through results is to use 'async for'
   on the prepared statement:

   st = await con.prepare('SELECT ...')
   async for row in st(arg1, arg2):
       print(row)

4. New methods: PreparedStatement.get_value(*args, column=0) and
   PreparedStatement.get_first_row(*args)

5. New method PreparedStatement.get_list() returns all query results
   in one Python list.",False,262,153,109,1.0,1.0,0.8,1682,803,1315,22,2.482142857142857,72.32821569628126,11.722222222222221,20.38888888888889,104.40599254741363,1.339708460638802,491.1312798638372,27.28507110354651,0.03480199751580454
50,710a2a6d9c462041bae6c41f0578d99262c6a861,Yury Selivanov,2016-07-01 00:43:45+00:00,Test that con.execute() propagate Postgres exceptions,False,6,6,0,1.0,1.0,1.0,1688,806,1319,22,2.4690265486725664,72.32821569628126,11.722222222222221,20.38888888888889,104.40599254741363,1.339708460638802,491.1312798638372,27.28507110354651,0.03480199751580454
51,d99ccaa4503e88dd61c615443d729323a502a81b,Yury Selivanov,2016-07-01 01:16:06+00:00,"PreparedStatement.__call__() -> PreparedStatement.get_aiter()

It's decided to not to use __call__ for now, as it can be used either
for get_list() or get_aiter().",False,4,2,2,,,,1688,806,1319,22,2.4690265486725664,72.32821569628126,11.722222222222221,20.38888888888889,104.40599254741363,1.339708460638802,491.1312798638372,27.28507110354651,0.03480199751580454
52,19ba6ba7bdc7cf2c6610fb00b1113e193e13654d,Yury Selivanov,2016-07-01 04:18:02+00:00,Move Connection class into a separate module,False,187,94,93,,,,1689,808,1321,22,2.4690265486725664,72.6058740168844,11.263157894736842,19.31578947368421,96.5020052203767,1.3563828437173087,443.2878542924136,24.62710301624519,0.032167335073458904
53,db691dad211e093454109ddc9719e225f01ac838,Yury Selivanov,2016-07-01 04:20:57+00:00,connection: Use only module imports,False,21,9,12,0.0,0.0,1.0,1686,805,1319,22,2.482142857142857,72.66142115323564,11.263157894736842,19.31578947368421,96.5020052203767,1.3563828437173087,443.2878542924136,24.62710301624519,0.032167335073458904
54,00fd2cdf799924fd29cc2fca13dbb180d41177be,Yury Selivanov,2016-07-01 04:52:18+00:00,exceptions: Populate __all__ with asyncpg exceptions only,False,14,13,1,1.0,1.0,0.75,1641,807,1277,22,2.4867256637168142,72.53164017106846,11.421052631578947,19.473684210526315,97.1872446945164,1.382698633190993,444.72386547742116,24.706881415412276,0.03239574823150546
55,c26f923f38a4162ed9cedc930c7dce9115b7f312,Yury Selivanov,2016-07-01 05:03:12+00:00,transaction: Small refactoring,False,9,5,4,,,,1642,807,1277,22,2.4867256637168142,72.53164017106846,11.421052631578947,19.473684210526315,97.1872446945164,1.382698633190993,444.72386547742116,24.706881415412276,0.03239574823150546
56,11ace770914b78051542a6c8890e7e3697ab77e6,Elvis Pranskevichus,2016-07-04 14:01:05+00:00,"Add support for decoding of anonymous records

The types of anonymous record members are only known after Parse, so the
record decoder must have an ability to request codecs for member type OIDs.
To allow this, move data codec configuration to ConnectionSettings.",False,308,196,112,0.0,1.0,1.0,1650,810,1282,22,2.4867256637168142,72.51460148683086,11.421052631578947,19.473684210526315,97.1872446945164,1.382698633190993,444.72386547742116,24.706881415412276,0.03239574823150546
57,50dd0be26bec031c2c24c83f43a9f14017cc4fa9,Elvis Pranskevichus,2016-07-04 15:59:41+00:00,"Add support for non-pg_catalog codecs

Not all data types have predefined OIDs, but we still want to provide
efficient codecs for more popular extension types, such as hstore.

The only difference between ""builtin"" and ""extra"" codecs is that the
latter are registered using a unique name rather than an OID.  In order
to enable {en,de}coding of the desired type, an application must call
Connection.alias_type to specify the name and the schema of the type and
the unique name identifying the extra codec.

For example:

    conn = await asyncpg.connect()
    await conn.alias_type('hstore', schema='public',
                          alias_to='pg_contrib.hstore')

This commit also includes the implementation of the hstore codec.",False,308,262,46,0.39473684210526316,1.0,0.6052631578947368,1700,836,1320,22,2.5043478260869567,72.08815980755112,11.894736842105264,20.210526315789473,101.62404020683009,1.3749813928761296,456.2411887930157,25.346732710723085,0.03387468006894336
58,2716aae14bfb5acea956273a0a7329e02229fb68,Elvis Pranskevichus,2016-07-04 16:52:08+00:00,Rename Connection.alias_type() to set_builtin_type_codec(),False,32,21,11,0.0,1.0,0.5,1709,837,1322,22,2.5043478260869567,72.2430864165434,11.894736842105264,20.210526315789473,101.62404020683009,1.3749813928761296,456.2411887930157,25.346732710723085,0.03387468006894336
59,ccfd5fee17c43915104bc18b436c38c30004eb47,Yury Selivanov,2016-07-07 21:31:23+00:00,connect: Add DSN parsing and tests,False,355,325,30,0.01935483870967742,0.25806451612903225,0.5935483870967742,2004,975,1560,22,2.8360655737704916,68.0339585587118,13.736842105263158,25.736842105263158,129.2738901477161,1.9184361836993418,708.0839221072869,39.33799567262704,0.04309129671590537
60,f06960a3f37debd0c9bd601cf70acfd3c3d82bb6,Elvis Pranskevichus,2016-07-07 22:19:05+00:00,"Expose structured error fields as exception attributes

Exception instances can now have the following attributes:

 * severity
 * sqlstate
 * message
 * detail
 * hint
 * position
 * query
 * internal_position
 * internal_query
 * context
 * schema_name
 * table_name
 * column_name
 * data_type_name
 * constraint_name
 * server_source_filename
 * server_source_line
 * server_source_function

Refer to [1] for the meaning of these fields.

[1] https://www.postgresql.org/docs/current/static/protocol-error-fields.html",False,90,75,15,1.0,1.0,0.5,2064,1010,1613,22,2.888,67.3497199696493,14.0,26.210526315789473,131.37931454687694,1.9256132171921645,711.7339179543321,39.540773219685114,0.043793104848958986
61,4259eec148619658b69d6bbce411c8041eee24c3,Yury Selivanov,2016-07-08 17:45:41+00:00,"Implement async context manager protocol for prepared statements

Now there are two options how to work with prepared statements:

1. Use 'async with' directly on 'connection.prepare()':

   async with con.prepare('...') as stmt:
       await stmt.execute(...)

2. Use 'async with' or free statements manually:

   stmt = await con.prepare('...')
   try:
       await stmt.execute(...)
   finally:
       await stmt.free()",False,133,117,16,0.5333333333333333,1.0,0.9066666666666666,2165,1083,1690,23,2.8656716417910446,66.81599753400359,14.368421052631579,26.842105263157894,134.61229487839356,1.9279523984787144,710.237790521123,39.457655028951265,0.04487076495946452
62,b8374e20640630044f59e4b4733e588345e07ab5,Yury Selivanov,2016-07-08 18:34:41+00:00,Fix unittest in asyncio debug mode,False,4,2,2,,,,2165,1083,1690,23,2.8656716417910446,66.81599753400359,14.368421052631579,26.842105263157894,134.61229487839356,1.9279523984787144,710.237790521123,39.457655028951265,0.04487076495946452
63,c059fd11748d5f2672d01811daa915ba2f8060d8,Yury Selivanov,2016-07-08 18:36:28+00:00,Make close() asynchronous; add terminate(),False,15,9,6,1.0,1.0,1.0,2168,1085,1692,23,2.8444444444444446,66.77640303494768,14.368421052631579,26.842105263157894,134.61229487839356,1.9279523984787144,710.237790521123,39.457655028951265,0.04487076495946452
64,423b362f8e0daeb3af078d6a47f151da3c542eda,Yury Selivanov,2016-07-08 18:40:05+00:00,Fix code style to silence linters,False,37,17,20,1.0,1.0,0.0,2165,1085,1693,23,2.8444444444444446,66.77547758695883,14.368421052631579,26.842105263157894,134.61229487839356,1.9279523984787144,710.237790521123,39.457655028951265,0.04487076495946452
65,e0b5dc5a311cb4730eb611584e62bde394f3c3a3,Elvis Pranskevichus,2016-07-08 19:20:36+00:00,"Add a script to generate exception classes from errcodes.txt in Postgres source

Use the script to generate the list of possible server exceptions",False,1333,1281,52,0.0,0.023529411764705882,1.0,3394,1638,2394,37,1.7432432432432432,65.39669627880109,15.619047619047619,28.0,142.3772128120106,2.117519174592345,779.0226929122853,43.279038495126954,0.047459070937336874
66,69d0273767a578415da6b052c1e6feabf35f97b5,Elvis Pranskevichus,2016-07-08 19:45:06+00:00,"Fix exception name duplicates, add checks to prevent that from happening",False,303,165,138,0.0,0.0,0.0,3421,1651,2415,37,1.7648648648648648,65.0922606243545,16.0,28.714285714285715,146.5162038691942,2.158762745191317,802.6587207046379,44.59215115025765,0.04883873462306474
67,dacaf7cc048dfb3c61f48462027bf2c918d11e8b,Elvis Pranskevichus,2016-07-08 19:58:45+00:00,Fix exception names in cluster connection tester,False,3,2,1,0.0,0.0,1.0,3422,1651,2416,37,1.7648648648648648,65.09142785515033,16.0,28.714285714285715,146.5162038691942,2.158762745191317,802.6587207046379,44.59215115025765,0.04883873462306474
68,194a29eb5e9b6821441863fcbf4314112eefe309,Yury Selivanov,2016-07-08 20:03:33+00:00,Implement connection.close() properly,False,47,41,6,1.0,1.0,0.0,3419,1650,2415,35,1.7648648648648648,64.85243344842064,16.0,28.714285714285715,146.5162038691942,2.158762745191317,802.6587207046379,44.59215115025765,0.04883873462306474
69,b32928094e3cb4785a251729d2f648495cad12ab,Yury Selivanov,2016-07-08 20:57:25+00:00,Add tests for con.close() and con.terminate(); bug fixes.,False,130,113,17,1.0,1.0,0.9795918367346939,3492,1695,2467,35,1.76,64.58419124502672,16.095238095238095,28.857142857142858,147.3186704977717,2.158762745191317,804.6648872760816,44.70360484867119,0.04910622349925723
70,6eef1e042b762db79de260557ac254ae5c160809,Yury Selivanov,2016-07-08 21:04:37+00:00,Test that it's OK to call terminate/close more than one time,False,4,4,0,1.0,1.0,1.0,3496,1696,2468,37,1.76,64.98289076114314,16.095238095238095,28.857142857142858,147.3186704977717,2.158762745191317,804.6648872760816,44.70360484867119,0.04910622349925723
71,316dacac17435b019869aba8660cfd0a7e89cfaa,Yury Selivanov,2016-07-09 19:13:27+00:00,Properly implement Statement.close(); implement connection.reset(),False,75,72,3,1.0,1.0,0.95,3523,1717,2489,37,1.76657824933687,64.67231415081775,16.428571428571427,29.285714285714285,149.9327284629107,2.2136281696219586,821.1611216899522,45.620062316108445,0.04997757615430356
72,74f0e9e04c231659609285a17827d49b2ae5cce6,Yury Selivanov,2016-07-09 19:16:14+00:00,Run asyncpg tests with uvloop,False,5,5,0,1.0,1.0,1.0,3527,1720,2492,37,1.7718832891246685,64.63976341170687,16.428571428571427,29.285714285714285,149.9327284629107,2.2136281696219586,821.1611216899522,45.620062316108445,0.04997757615430356
73,590ff53fba5eae4695041e1654fe97f1c0c9bd4f,Yury Selivanov,2016-07-09 21:06:26+00:00,connect: Set TCP_NODELAY,False,9,8,1,0.0,0.0,0.0,3534,1726,2499,37,1.7771883289124668,64.58620339110855,16.476190476190474,29.38095238095238,150.62266949062908,2.2025170585108476,822.0450157264347,45.669167540357485,0.05020755649687635
74,f7b42cb8bbbe8e92377a4ad58e1dff55f1f7d6ea,Yury Selivanov,2016-07-10 02:48:47+00:00,buffer.read: Replace memoryviews with a faster specialized class,False,91,62,29,1.0,1.0,1.0,3543,1731,2506,37,1.7777777777777777,64.53615124971282,16.476190476190474,29.38095238095238,150.62266949062908,2.2025170585108476,822.0450157264347,45.669167540357485,0.05020755649687635
75,648e5e6bb8f03728c919beb71f23160b49d3aec6,Yury Selivanov,2016-07-10 04:38:17+00:00,tests: Stress test strings decoding,False,10,8,2,,,,3549,1731,2512,37,1.7777777777777777,64.49356352584249,17.0,30.523809523809526,158.83846074386443,2.237702802998917,886.3465804433959,49.24147669129977,0.052946153581288145
76,ea9564b42396ae34e4dd84ecbbfee220fb4c2bf5,Yury Selivanov,2016-07-10 04:53:11+00:00,tests: Stress test ReadBuffer.read_cstr(),False,14,14,0,1.0,1.0,1.0,3563,1737,2523,38,1.7757255936675462,64.26967806201372,17.238095238095237,30.80952380952381,159.89775181518996,2.261512326808441,887.5190831219159,49.30661572899532,0.05329925060506332
77,12ebf17a1afba78ac350c25272d2f8e622fa27b9,Yury Selivanov,2016-07-10 18:50:51+00:00,Drop Connection.reset() and 'async with' support for statements,False,163,34,129,0.4861111111111111,0.0,0.08333333333333333,3465,1666,2450,37,1.7567567567567568,64.77667521431094,16.571428571428573,29.80952380952381,154.40074197331964,2.2045305002613973,872.9040978267791,48.49467210148773,0.05146691399110655
78,31fbb09e4df30726d397107bf70a668e3cd749d4,Yury Selivanov,2016-07-10 18:50:51+00:00,Add LRU cache for prepared statements,False,148,124,24,0.0625,0.5,0.9166666666666666,3544,1717,2500,49,1.774798927613941,64.52063955693541,17.476190476190474,31.19047619047619,162.36541247307736,2.359885897552278,925.103182155025,51.394621230834716,0.05412180415769246
79,6791efcff26f4685fab6413b25d6c0a0d8e82411,Elvis Pranskevichus,2016-07-10 19:37:52+00:00,Optimize decoding of composite types and arrays by using tuples instead of lists,False,75,44,31,,,,3544,1717,2500,49,1.774798927613941,64.52063955693541,17.476190476190474,31.19047619047619,162.36541247307736,2.359885897552278,925.103182155025,51.394621230834716,0.05412180415769246
80,970578ade9f0b61ae55c1aa51a79355377f0fe7d,Elvis Pranskevichus,2016-07-10 19:38:13+00:00,Add initial performance benchmark,False,239,239,0,0.2066115702479339,0.33884297520661155,0.12396694214876033,3783,1837,2673,56,1.7973684210526315,63.79036651454419,19.863636363636363,34.90909090909091,186.4673928567912,2.6413743376156913,1152.3089212404473,64.01716229113596,0.06215579761893038
81,b69b67b4e0cfc1d8de7f162b004ef011feaf77b9,Yury Selivanov,2016-07-11 16:13:56+00:00,Add a test of uuid[] encoding/decoding,False,5,5,0,,,,3788,1837,2678,56,1.7973684210526315,63.78844198542084,19.863636363636363,34.90909090909091,186.4673928567912,2.6413743376156913,1152.3089212404473,64.01716229113596,0.06215579761893038
82,29af7549335fb19105c04fee4f5789e6cf69f2e3,Yury Selivanov,2016-07-11 16:55:05+00:00,Add tests for float4 and float8 data types,False,51,45,6,0.0,0.0,1.0,3827,1846,2716,56,1.8078947368421052,63.70788136459899,20.09090909090909,35.54545454545455,190.93880138417381,2.681948310896246,1209.8769711595612,67.21538728664228,0.06364626712805793
83,27440c6a5d4efadb0739a315141dc546b79724fd,Yury Selivanov,2016-07-11 16:55:13+00:00,Add a test to ensure that 'void' is decoded to None,False,4,4,0,1.0,1.0,1.0,3831,1849,2719,56,1.805774278215223,63.690959819746475,20.09090909090909,35.54545454545455,190.93880138417381,2.681948310896246,1209.8769711595612,67.21538728664228,0.06364626712805793
84,5f9ae2b6e8efaa7e5b6607f593b20740477dc9cd,Yury Selivanov,2016-07-11 17:28:31+00:00,Fix statements cache; add more tests,False,66,60,6,0.896551724137931,0.9655172413793104,1.0,3885,1878,2748,66,1.8098958333333333,63.5937102642788,20.454545454545453,35.95454545454545,193.8691886760609,2.7280369215009856,1240.9816283768757,68.94342379871533,0.06462306289202029
85,3ccca5d250ae02c44efcc941ef9400743d670272,Yury Selivanov,2016-07-11 17:36:42+00:00,tests/codecs: Test that None is handled for all types,False,5,5,0,0.0,0.0,1.0,3890,1881,2751,67,1.8098958333333333,63.614414909632394,20.454545454545453,35.95454545454545,193.8691886760609,2.7280369215009856,1240.9816283768757,68.94342379871533,0.06462306289202029
86,de546eecacd078d8ff3ec1fc8f3fcf1834ecb682,Yury Selivanov,2016-07-11 21:08:18+00:00,setup.py: Compile asyncpg with -O3,False,5,3,2,,,,3891,1881,2752,67,1.8098958333333333,63.614414909632394,20.454545454545453,35.95454545454545,193.8691886760609,2.7280369215009856,1240.9816283768757,68.94342379871533,0.06462306289202029
87,da4ceefc5243b8cdfc7c104aac87ddd90066b7a8,Yury Selivanov,2016-07-11 21:22:29+00:00,record: Add fast Record implementation,False,447,377,70,0.24043715846994534,0.453551912568306,0.9398907103825137,3972,1954,2818,67,1.813299232736573,63.03130353376094,19.73913043478261,34.65217391304348,185.96183264666695,2.6963831423052906,1188.0693836648375,66.00385464804654,0.06198727754888897
88,9273550fc5990495c9ff832c1d35f76c029b043b,Yury Selivanov,2016-07-11 22:14:51+00:00,record: Implement Record.values() and Record.__iter__(),False,193,182,11,0.4411764705882353,1.0,0.9264705882352942,3986,1966,2829,67,1.806615776081425,62.95770649106072,19.73913043478261,34.65217391304348,185.96183264666695,2.6963831423052906,1188.0693836648375,66.00385464804654,0.06198727754888897
89,4c30bd143dc9376d28d72f6319d7b201d3ffa556,Yury Selivanov,2016-07-11 22:34:15+00:00,record: Implement Record.__hash__(),False,70,69,1,0.4230769230769231,0.9807692307692307,1.0,3996,1977,2837,67,1.8045685279187818,62.902280819755156,19.73913043478261,34.65217391304348,185.96183264666695,2.6963831423052906,1188.0693836648375,66.00385464804654,0.06198727754888897
90,cfaf32f84ffc04fea427e37a75f9f762c5263899,Yury Selivanov,2016-07-11 23:14:56+00:00,record: Implement Record.__cmp__,False,146,145,1,0.102803738317757,0.35514018691588783,0.35514018691588783,4045,2021,2875,67,1.8005050505050506,62.60003686922368,19.869565217391305,34.91304347826087,186.90480043208828,2.739861403174856,1191.4200261515364,66.19000145286316,0.06230160014402942
91,c9477b14ef0ba8b61c32762dbeef5084c151c3a1,Yury Selivanov,2016-07-11 23:29:04+00:00,record: Implement Record.keys(),False,18,18,0,1.0,1.0,1.0,4050,2026,2879,67,1.7984886649874054,62.579835571294645,19.869565217391305,34.91304347826087,186.90480043208828,2.739861403174856,1191.4200261515364,66.19000145286316,0.06230160014402942
92,23b59f0dd5513d53ca24b2e154e425295cde7201,Yury Selivanov,2016-07-11 23:30:42+00:00,record: Add a test that Records aren't pickleable,False,7,7,0,1.0,1.0,1.0,4057,2032,2885,67,1.7964824120603016,62.55739882667134,19.869565217391305,34.91304347826087,186.90480043208828,2.739861403174856,1191.4200261515364,66.19000145286316,0.06230160014402942
93,8372c8fdecd2ba94b99e6f1f0aaed91ff033f2be,Yury Selivanov,2016-07-12 00:06:03+00:00,record: Implement Record.items(); fix bugs in tests,False,255,237,18,0.2782608695652174,1.0,0.9478260869565217,4094,2051,2913,68,1.794486215538847,62.709087122877946,19.869565217391305,34.91304347826087,186.90480043208828,2.739861403174856,1191.4200261515364,66.19000145286316,0.06230160014402942
94,bcc865414fb6ec8031352bc57352eb4e4266804b,Yury Selivanov,2016-07-12 00:30:19+00:00,record: Implement Record.__repr__(),False,130,125,5,0.010416666666666666,0.1875,1.0,4115,2066,2929,69,1.794486215538847,62.6375662857285,20.17391304347826,35.26086956521739,188.75083692671703,2.766431451484035,1198.9813677196078,66.61007598442266,0.062916945642239
95,718029b2d74ba1d8d0cf03a5b43371919c2b655e,Yury Selivanov,2016-07-12 00:40:32+00:00,record: Add support for slicing,False,41,41,0,0.2222222222222222,0.2222222222222222,1.0,4124,2080,2937,69,1.7925,62.56526671139662,20.26086956521739,35.43478260869565,189.61400655971042,2.757647964439678,1201.2551544158257,66.73639746754588,0.06320466885323679
96,0ee0e32d67be733568b2df86b2d52bd54846f3a6,Yury Selivanov,2016-07-12 00:48:32+00:00,tests/record: Fix code style; add a test for invalid record and .keys(),False,5,5,0,1.0,1.0,1.0,4129,2082,2939,70,1.7925,62.61908449396696,20.26086956521739,35.43478260869565,189.61400655971042,2.757647964439678,1201.2551544158257,66.73639746754588,0.06320466885323679
97,0f86c81f28a810d32a59a7a56b38b93f21441e5a,Yury Selivanov,2016-07-12 01:32:29+00:00,tests/record: Test that records can be casted to dict/odict,False,5,5,0,0.0,1.0,1.0,4134,2085,2943,70,1.7925,62.609645097845714,20.26086956521739,35.43478260869565,189.61400655971042,2.757647964439678,1201.2551544158257,66.73639746754588,0.06320466885323679
98,18c1600a0a11ea856c171e1d670b71cda9d4b58e,Yury Selivanov,2016-07-12 02:48:49+00:00,Tweak how prepared statements are GCed: mark them as closed asap,False,22,12,10,0.0,0.0,1.0,4136,2085,2946,70,1.795,62.58593419797699,20.130434782608695,35.17391304347826,187.55583014290298,2.780276756769557,1182.9228999399209,65.71793888555118,0.0625186100476343
99,863fa459c14cf5a1b247aa3d085b6c1f0fd9a65e,Yury Selivanov,2016-07-12 02:52:14+00:00,Fix code style,False,4,2,2,0.0,1.0,1.0,4136,2084,2946,70,1.795,62.592320361767555,20.130434782608695,35.17391304347826,187.55583014290298,2.780276756769557,1182.9228999399209,65.71793888555118,0.0625186100476343
100,4c5c5420818cfc348eaa22dbd1c90841fca2d70d,Yury Selivanov,2016-07-12 02:56:51+00:00,Fix linter warnings,False,8,4,4,,,,4136,2084,2946,73,1.795,62.70119034784468,20.130434782608695,35.17391304347826,187.55583014290298,2.780276756769557,1182.9228999399209,65.71793888555118,0.0625186100476343
101,0395157936beeaa55bc9d9c1a02d064f7a9ced46,Yury Selivanov,2016-07-12 04:24:15+00:00,record/tests: Fix tests to use ordered mappings,False,22,11,11,,,,4136,2073,2946,73,1.795,62.72390734467194,20.130434782608695,35.17391304347826,187.55583014290298,2.780276756769557,1182.9228999399209,65.71793888555118,0.0625186100476343
102,20ddac0f6c59536c8590642f70b0076968d4c912,Yury Selivanov,2016-07-13 17:30:59+00:00,exceptions: Add InterfaceError,False,9,7,2,,,,4141,2075,2948,73,1.7930174563591021,62.70007634995566,20.130434782608695,35.17391304347826,187.55583014290298,2.780276756769557,1182.9228999399209,65.71793888555118,0.0625186100476343
103,3ba2a1a20c0539052c8cb5c7eba18333ed99537d,Yury Selivanov,2016-07-13 17:55:25+00:00,Fix bugs in transactions implementation; add tests,False,173,139,34,0.7529411764705882,0.9764705882352941,0.9294117647058824,4246,2144,3033,73,1.7764127764127764,62.20416721034369,20.347826086956523,35.69565217391305,190.7097953465258,2.790711539378253,1201.7974653320796,66.7665258517822,0.06356993178217524
104,03f88f22ebe244e36b8eab9fa528a4b11ca0fcd4,Yury Selivanov,2016-07-13 17:58:14+00:00,transactions: Fix repr to use true __module__ if outside of asyncpg,False,11,9,2,1.0,1.0,1.0,4253,2148,3037,73,1.778869778869779,62.183496892220425,20.347826086956523,35.69565217391305,190.7097953465258,2.790711539378253,1201.7974653320796,66.7665258517822,0.06356993178217524
105,2483cb2aa892ef6df441c15258edb18d13c28f46,Yury Selivanov,2016-07-13 18:12:21+00:00,"statement: Rename: get_list -> fetch; get_value -> fetch_value, etc",False,56,28,28,,,,4253,2148,3037,73,1.778869778869779,62.183496892220425,20.347826086956523,35.69565217391305,190.7097953465258,2.790711539378253,1201.7974653320796,66.7665258517822,0.06356993178217524
106,e103096dacfd7d46dee199f9c04e054e632141ba,Yury Selivanov,2016-07-13 18:45:47+00:00,"Add fetch(), fetch_row() and fetch_value() to Connection object",False,40,37,3,1.0,1.0,0.35714285714285715,4287,2176,3065,73,1.779126213592233,61.92720026565627,20.608695652173914,36.08695652173913,193.32471222292165,2.789531619469786,1216.2314525148672,67.56841402860375,0.06444157074097387
107,ff0203b0bace5787218bf14a2456a78eea641c94,Yury Selivanov,2016-07-13 19:26:15+00:00,Refactor fetch_row() and fetch_value() to fetch only one row,False,39,25,14,1.0,1.0,1.0,4288,2176,3066,73,1.779126213592233,61.924749002177705,20.608695652173914,36.08695652173913,193.32471222292165,2.789531619469786,1216.2314525148672,67.56841402860375,0.06444157074097387
108,f40dc77cd95779dc0c2746a0e2c0bd0821d17596,Yury Selivanov,2016-07-13 19:47:58+00:00,record: Make Records comparable with tuples,False,71,37,34,,1.0,1.0,4295,2181,3073,73,1.779126213592233,61.9262706609583,20.608695652173914,35.95652173913044,192.80297309248687,2.7697687736199836,1212.7927173370017,67.37737318538899,0.06426765769749561
109,b926a5d0d4154e833b8d6a589042304289813b86,Yury Selivanov,2016-07-13 19:52:07+00:00,tests/record: Check that Records can be compared against namedtuples,False,8,8,0,0.0,1.0,1.0,4303,2187,3079,73,1.779126213592233,61.909418038619144,20.608695652173914,35.95652173913044,192.80297309248687,2.7697687736199836,1212.7927173370017,67.37737318538899,0.06426765769749561
110,96953caa844beae92440efb8dc6aa0977c24cb37,Yury Selivanov,2016-07-13 20:08:49+00:00,Add Statement.explain() method,False,44,44,0,0.34615384615384615,1.0,0.34615384615384615,4347,2213,3106,84,1.7801932367149758,62.530687700713166,20.782608695652176,36.34782608695652,194.60939034057697,2.8035851987407563,1216.8863096579487,67.60479498099716,0.06486979678019231
111,4b05e12dd5e1795e38e96d138e8f86b1adaa162e,Yury Selivanov,2016-07-13 20:13:44+00:00,Add Statement.get_query(),False,4,4,0,1.0,1.0,1.0,4351,2216,3109,84,1.7783132530120482,62.50099844629458,20.782608695652176,36.34782608695652,194.60939034057697,2.8035851987407563,1216.8863096579487,67.60479498099716,0.06486979678019231
112,49efcd91b4c137b05a2eb8ae1ccdd10d93319911,Yury Selivanov,2016-07-13 20:44:02+00:00,Add 'statement_cache_size' parameter to 'connect()'; more tests,False,71,54,17,0.7619047619047619,0.7619047619047619,0.8571428571428571,4388,2234,3130,91,1.78125,62.47638258431369,20.82608695652174,36.47826086956522,195.4215794409637,2.809555391781888,1223.5936827854664,67.97742682141481,0.06514052648032122
113,9520b6f730427aa00a672e847b591578088a0c55,Yury Selivanov,2016-07-13 20:47:24+00:00,transaction: Fix error messages; test that __aenter__ returns None,False,19,12,7,0.0,1.0,1.0,4393,2235,3131,94,1.78125,62.932975443314305,20.82608695652174,36.47826086956522,195.4215794409637,2.809555391781888,1223.5936827854664,67.97742682141481,0.06514052648032122
114,a914c599bc88a27fb3ee129baa317d37fb154246,Yury Selivanov,2016-07-13 22:04:59+00:00,Rename fetch_row -> fetchrow; fetch_value -> fetch_val,False,56,28,28,,,,4393,2235,3131,94,1.78125,62.932975443314305,20.82608695652174,36.47826086956522,195.4215794409637,2.809555391781888,1223.5936827854664,67.97742682141481,0.06514052648032122
115,6b94e5964f451d1efe82ef92139b819e27a34ed1,Elvis Pranskevichus,2016-07-13 22:10:00+00:00,Move benchmarks to a separate repo,False,239,0,239,0.7933884297520661,0.6611570247933884,0.8760330578512396,4154,2115,2958,87,1.7603911980440097,63.59108193508639,18.59090909090909,33.0,172.8221521012447,2.5485064741834567,1009.9556937287008,56.10864965159449,0.05760738403374822
116,9b5547ad6bb57ce18b3c010ce48decc4fa1608ee,Elvis Pranskevichus,2016-07-13 22:10:00+00:00,Decode anonymous records into tuples instead of lists,False,18,9,9,,,,4154,2115,2958,87,1.7603911980440097,63.59108193508639,18.59090909090909,33.0,172.8221521012447,2.5485064741834567,1009.9556937287008,56.10864965159449,0.05760738403374822
117,34e476ac628cb72815833253d2b8f2881c49fd28,Elvis Pranskevichus,2016-07-13 22:45:58+00:00,"Implement support for multidimensional arrays

Multidimensional arrays are decoded into nested tuples",False,359,317,42,0.0,1.0,1.0,4226,2144,3016,87,1.7634146341463415,63.47064019952113,18.59090909090909,33.0,172.8221521012447,2.5485064741834567,1009.9556937287008,56.10864965159449,0.05760738403374822
118,d0882dcc0188b8a3d8911cd4c155b9af6be50607,Yury Selivanov,2016-07-13 23:59:51+00:00,statement: Add Statement.get_statusmsg(),False,46,45,1,0.24,1.0,1.0,4256,2158,3040,87,1.7597087378640777,63.36016487725066,18.59090909090909,33.0,172.8221521012447,2.5485064741834567,1009.9556937287008,56.10864965159449,0.05760738403374822
119,6ffb53a5f61bff09e03ef9e7848d94893e9841c8,Yury Selivanov,2016-07-14 00:10:18+00:00,Improve statement.explain() tests,False,19,19,0,0.0,1.0,1.0,4275,2169,3052,92,1.7597087378640777,63.365764980665084,18.59090909090909,33.0,172.8221521012447,2.5485064741834567,1009.9556937287008,56.10864965159449,0.05760738403374822
120,2913a50e0e030e117183fa6e4e4903ff399155a4,Yury Selivanov,2016-07-14 00:12:51+00:00,tests: Test that multidimensional arrays handle None,False,6,4,2,0.0,1.0,1.0,4277,2169,3054,92,1.7597087378640777,63.36517621986564,18.59090909090909,33.0,172.8221521012447,2.5485064741834567,1009.9556937287008,56.10864965159449,0.05760738403374822
121,1a8d674f4ae93fa9edc8260d43450398c712f738,Yury Selivanov,2016-07-14 02:49:41+00:00,record: Fix Records to have equal hash with equivalent tuples,False,42,6,36,0.0,1.0,0.0,4280,2172,3057,92,1.7597087378640777,63.35658365740836,18.59090909090909,33.0,172.8221521012447,2.5485064741834567,1009.9556937287008,56.10864965159449,0.05760738403374822
122,8b2943f582e5a0ea4ebab01e034eaf2a6021287b,Yury Selivanov,2016-07-14 03:03:03+00:00,tests/prepare: Test that fetchval() and fetchrow() execute with a limit,False,11,11,0,1.0,1.0,1.0,4291,2177,3062,97,1.7597087378640777,63.38464053137364,18.59090909090909,33.0,172.8221521012447,2.5485064741834567,1009.9556937287008,56.10864965159449,0.05760738403374822
123,908dd8f7c42fb681edaeebdbf32a908acbf0d835,Elvis Pranskevichus,2016-07-14 14:59:54+00:00,"Add a few tests for invalid data input

This uncovered a bug in protocol, which caused the prepared statement
state to not be reset on errors during Bind.",False,39,38,1,0.0,1.0,1.0,4326,2185,3094,97,1.7627118644067796,63.33028809513859,18.727272727272727,33.22727272727273,174.64773411319942,2.540585777858505,1014.901906666444,56.38343925924689,0.05821591137106645
124,05cab72358c864c6184c9ab44ba6466ad53542ea,Yury Selivanov,2016-07-14 18:50:02+00:00,tests: Silence asyncio long execution warnings,False,19,18,1,1.0,1.0,1.0,4343,2199,3108,97,1.7608695652173914,63.19916913211662,18.772727272727273,33.31818181818182,175.02087161405169,2.540585777858505,1015.2750441672964,56.40416912040535,0.05834029053801721
125,39d7ea31c3c51958ee9b0fc05fa4b057a6bc532a,Elvis Pranskevichus,2016-07-14 18:51:58+00:00,Switch optimization back to -O2,False,2,1,1,,,,4326,2185,3094,97,1.7627118644067796,63.33028809513859,18.727272727272727,33.22727272727273,174.64773411319942,2.540585777858505,1014.901906666444,56.38343925924689,0.05821591137106645
126,c09a70e2ed06b493364c9c1b1ba98f4536dca774,Elvis Pranskevichus,2016-07-14 22:39:55+00:00,"Add support for range types

Range types are represented in Python by the newly added asyncpg.Range
class.",False,346,338,8,0.34615384615384615,0.8076923076923077,0.8846153846153846,4491,2276,3227,98,1.7757009345794392,60.391372702394285,20.772727272727273,36.45454545454545,192.33018171360894,2.726722141494869,1086.0894715961217,60.33830397756231,0.06411006057120297
127,a66a795cf88171e9bcb3f6a58ea2b7e7e811370b,Elvis Pranskevichus,2016-07-15 13:48:36+00:00,"Add a script to generate protocol/pgtypes.pxi

protocol/pgtypes.pxi, which contains builtin type OID and name
information is now generated from pg_catalog.pg_type by the script.",False,396,253,143,0.2830188679245283,1.0,1.0,4591,2315,3288,109,1.7790697674418605,60.8972182960107,20.869565217391305,36.26086956521739,190.26165131709658,2.734980599111034,1057.2246735223187,58.734704084573266,0.06342055043903218
128,336f7a65ecbd13d777d0d579c463b8a4d19eba08,Elvis Pranskevichus,2016-07-15 14:53:35+00:00,"Fallback to text I/O for unknown types

Types without an explicit codec will now be handled as text.  One
exception is unhandled types in Postgres ""manual assignment"" range:
these will continue to trigger NotImplementedError indicating lack of
direct support by asyncpg.",False,97,80,17,1.0,1.0,1.0,4612,2324,3304,109,1.777262180974478,60.86848857043568,20.869565217391305,36.26086956521739,190.26165131709658,2.734980599111034,1057.2246735223187,58.734704084573266,0.06342055043903218
129,b0b836b19f6c68d8aaa1c277518cbc4038d56b19,Yury Selivanov,2016-07-15 15:56:58+00:00,Rewrite protocol implementation,False,1378,621,757,0.0,0.0,0.0,4637,2327,3328,109,1.7842227378190256,60.81974875986917,20.956521739130434,36.73913043478261,193.0750589422613,2.820933776368559,1131.3651619990592,62.85362011105885,0.06435835298075375
130,191fe2b00e44196c765a092ed192b42611050429,Yury Selivanov,2016-07-15 17:33:59+00:00,Implement statement.cursor(),False,287,238,49,1.0,1.0,0.8809523809523809,4770,2410,3421,115,1.7918552036199096,62.027753261699985,19.76,34.32,179.43402111978642,2.675259074259074,1045.2420627981178,58.06900348878431,0.05981134037326212
131,130488958b91d3e27c6ed93d43755faa539b6b3a,Yury Selivanov,2016-07-15 17:45:13+00:00,Make sure NoData and EmptyQueryResponse are parsed,False,13,13,0,1.0,1.0,1.0,4775,2413,3424,116,1.7900677200902935,62.0197210398353,19.76,34.32,179.43402111978642,2.675259074259074,1045.2420627981178,58.06900348878431,0.05981134037326212
132,0e12f9b2376a05d9dbf7b8dcc594ce9372364d10,Yury Selivanov,2016-07-15 18:55:32+00:00,cursor: prefetch must be > 0,False,34,24,10,1.0,1.0,0.75,4789,2423,3436,117,1.795045045045045,61.16439500271535,19.96,34.52,180.21431826839319,2.715259074259074,1048.5174240959657,58.25096800533143,0.06007143942279771
133,1039e5a13d624ea7f756a40d978bff5cd0e7c870,Yury Selivanov,2016-07-15 20:08:25+00:00,Implement CursorFactory; introduce Cursor and CursorIterator,False,359,299,60,0.7666666666666667,1.0,0.9583333333333334,4958,2537,3564,118,1.8181818181818181,60.349147625969216,20.12,35.04,182.63528551272984,2.7680846834325092,1060.1445330633596,58.89691850351999,0.06087842850424326
134,62acb635c4ced7dff634292e1c16695a5678bae3,Yury Selivanov,2016-07-15 20:37:22+00:00,connection: Make execute() method return the status of the last SQL command,False,28,18,10,1.0,1.0,1.0,4962,2538,3564,118,1.8181818181818181,60.39173871910085,20.12,35.04,182.63528551272984,2.7680846834325092,1060.1445330633596,58.89691850351999,0.06087842850424326
135,93e61ddc0760f7901b7217b6a3452d9ca67293e5,Yury Selivanov,2016-07-15 20:37:46+00:00,Refactor cursor.forward() to use simple query,False,12,6,6,1.0,1.0,1.0,4962,2539,3565,118,1.8181818181818181,60.38824019318928,20.12,35.04,182.63528551272984,2.7680846834325092,1060.1445330633596,58.89691850351999,0.06087842850424326
136,b328131fcfbb649e7ccacd6cee566195793b8415,Yury Selivanov,2016-07-15 20:59:40+00:00,Fix Protocol.bind_execute and .execute to better handle return-status,False,81,35,46,1.0,1.0,0.625,4970,2543,3573,118,1.8203463203463204,60.268232079851096,20.24,35.16,183.30149493398778,2.789798969146795,1062.3646008697676,59.020255603875974,0.06110049831132924
137,9afe1397837c55100130607ceac50c7ccf10539f,Yury Selivanov,2016-07-15 21:43:32+00:00,tests: Test concurrent operations; test statament survives an error,False,35,35,0,1.0,1.0,1.0,5005,2563,3597,118,1.8172043010752688,60.17529467874554,20.24,35.16,183.30149493398778,2.789798969146795,1062.3646008697676,59.020255603875974,0.06110049831132924
138,7df33ef8684b7ee3baadc2bf23b3a012691b4c27,Yury Selivanov,2016-07-15 22:11:26+00:00,Add Connection.cursor() method (similar to statement.cursor()),False,62,50,12,1.0,0.5517241379310345,0.7931034482758621,5043,2589,3628,118,1.8247863247863247,59.93748309929788,20.56,35.76,187.03169943062755,2.792155210381017,1076.2133422821228,59.789630126784594,0.062343899810209165
139,c93cb64b5cd7237fe6e945f02a3a761aec263d28,Elvis Pranskevichus,2016-07-15 23:04:06+00:00,"Implement codec support for the remaining core types

The bulk of the remaining types are various system types, pseudotypes
and geometry types.  For the latter, add a number of shell classes for
Python representation.",False,1110,1039,71,0.6896551724137931,0.6896551724137931,0.7873563218390804,5412,2787,3898,119,1.8255813953488371,58.95391609084802,24.16,43.32,244.13942600324125,3.2567562204820266,2058.91579654451,114.38421091913948,0.08137980866774706
140,8847bd23885314a32c57aff4a460bf3d02cb0b26,Yury Selivanov,2016-07-15 23:59:07+00:00,Implement task cancellation support,False,477,362,115,0.7403846153846154,0.9519230769230769,0.9038461538461539,5545,2879,4002,120,1.8218390804597702,60.276186388751825,23.46153846153846,41.88461538461539,236.01952101457087,3.169957904309641,1983.851835816428,110.21399087869047,0.0786731736715236
141,9f65d3b57a05edf8f3e8a7e233e0627f5c8ad705,Yury Selivanov,2016-07-16 00:05:17+00:00,tests: Test that sending a cancellation request doesn't break anything,False,7,7,0,1.0,1.0,1.0,5552,2883,4008,120,1.8202676864244742,60.276186388751825,23.46153846153846,41.88461538461539,236.01952101457087,3.169957904309641,1983.851835816428,110.21399087869047,0.0786731736715236
142,fa0704db16d2a5455e086d3cd86ea77f81d09bcc,Yury Selivanov,2016-07-16 01:39:02+00:00,Implement 'timeout' parameter for almost every API,False,237,165,72,0.625,0.9375,0.0,5617,2922,4060,120,1.8210922787193973,61.70902305237385,22.59259259259259,40.333333333333336,227.27805727329047,3.052552056001877,1910.3758418973011,106.13199121651675,0.07575935242443013
143,0df681826592704157e4884f27d1742e5ae656a9,Yury Selivanov,2016-07-16 03:04:47+00:00,tests: Add tests for cursors supporting timeouts,False,61,61,0,0.38,1.0,1.0,5678,2965,4111,122,1.8183520599250935,61.70902305237385,22.59259259259259,40.333333333333336,227.27805727329047,3.052552056001877,1910.3758418973011,106.13199121651675,0.07575935242443013
144,a372451a3e0af1de5ee3690ecdb4d88f398ff7fc,Yury Selivanov,2016-07-16 13:20:59+00:00,cursor: Prefetch 50 records so that all of them fit in one prealloc deque,False,2,1,1,,,,5678,2965,4111,122,1.8183520599250935,61.70902305237385,22.59259259259259,40.333333333333336,227.27805727329047,3.052552056001877,1910.3758418973011,106.13199121651675,0.07575935242443013
145,b6c576e7f6284a81e7785ab5a6fe36debef83c7c,Yury Selivanov,2016-07-16 14:21:53+00:00,Move 'connect()' function into asyncpg.connection module.,False,390,194,196,1.0,1.0,1.0,5676,2965,4110,123,1.8183520599250935,63.15924363908036,22.40740740740741,40.333333333333336,232.60722278853098,2.882067863483786,2056.966241118416,114.27590228435646,0.07753574092951031
146,2a427d3be81eba4701d1ec9dce99caf9e7ba3806,Elvis Pranskevichus,2016-07-16 14:22:22+00:00,Fix linter warning,False,4,2,2,,,,5678,2965,4111,122,1.8183520599250935,61.70902305237385,22.59259259259259,40.333333333333336,227.27805727329047,3.052552056001877,1910.3758418973011,106.13199121651675,0.07575935242443013
147,6fe65af76889ac29528212353eb918d75f2abc35,Yury Selivanov,2016-07-16 14:30:08+00:00,Add queries_count property to Protocol,False,13,13,0,1.0,1.0,1.0,5682,2971,4116,123,1.8183520599250935,63.147742781826295,22.40740740740741,40.333333333333336,232.60722278853098,2.882067863483786,2056.966241118416,114.27590228435646,0.07753574092951031
148,84ed10d9ddb7c70a86e71ccc7453a78b98a29596,Elvis Pranskevichus,2016-07-16 15:09:21+00:00,Insert copyright headers,False,458,445,13,,,,5849,2971,4116,242,1.8183520599250935,66.80697983136106,22.40740740740741,40.333333333333336,232.60722278853098,2.882067863483786,2056.966241118416,114.27590228435646,0.07753574092951031
149,41d9ef6137426340475e7e702b178ee1c083d360,Yury Selivanov,2016-07-17 14:19:05+00:00,Fix a race condition between cancellation requests and API calls,False,118,80,38,0.0,1.0,1.0,5863,2982,4125,246,1.8220973782771535,66.79810216865168,22.40740740740741,40.333333333333336,232.60722278853098,2.882067863483786,2056.966241118416,114.27590228435646,0.07753574092951031
150,6b7477929cbc2501db7f7458f9384ff061442029,Yury Selivanov,2016-07-17 14:22:10+00:00,Tweak _cancel_current_command to handle exceptions,False,4,3,1,0.0,1.0,1.0,5865,2984,4127,247,1.8220973782771535,66.80181191762749,22.40740740740741,40.333333333333336,232.60722278853098,2.882067863483786,2056.966241118416,114.27590228435646,0.07753574092951031
151,e2fe5ec945c3d620f6c82384cddca7b3587ff353,Yury Selivanov,2016-07-17 15:06:49+00:00,Implement connection pool: asyncpg.create_pool(),False,245,237,8,0.6047904191616766,0.8383233532934131,0.8383233532934131,6093,3132,4306,248,1.8426763110307414,66.93705230008781,21.896551724137932,39.172413793103445,224.72788622112898,2.877325890317329,1961.376665591381,108.9653703106323,0.07490929540704297
152,9dc1c16bd7886f3443fa02bd08991685cb776a9f,Yury Selivanov,2016-07-17 15:08:39+00:00,Add license headers to pool.py and test_pool.py,False,14,14,0,,,,6115,3135,4312,258,1.8426763110307414,67.34457512427016,22.0,39.275862068965516,224.8918478591346,2.8945672696276743,1961.458646410384,108.9699248005769,0.07496394928637817
153,b586e3c0b9004d1f62cd8e2ace592e2b16e6a6de,Yury Selivanov,2016-07-17 15:09:57+00:00,Make test_pool_03 faster,False,2,1,1,,,,6115,3135,4312,258,1.8426763110307414,67.34457512427016,22.0,39.275862068965516,224.8918478591346,2.8945672696276743,1961.458646410384,108.9699248005769,0.07496394928637817
154,976d8897baac2af2d1cc99c7a9b80273c920ec96,Elvis Pranskevichus,2016-07-17 15:11:56+00:00,Require Python 3.5 or greater,False,22,15,7,,,,6101,3135,4312,248,1.8426763110307414,66.93705230008781,22.0,39.275862068965516,224.8918478591346,2.8945672696276743,1961.458646410384,108.9699248005769,0.07496394928637817
155,ee103851c420934c6f1efbeab6f9c912d6d2cc83,Elvis Pranskevichus,2016-07-17 15:11:56+00:00,Fix license in setup.py,False,4,2,2,,,,6101,3135,4312,248,1.8426763110307414,66.93705230008781,22.0,39.275862068965516,224.8918478591346,2.8945672696276743,1961.458646410384,108.9699248005769,0.07496394928637817
156,b5b1c994701aa340c16ed995b6b8cee1e62c1a48,Yury Selivanov,2016-07-17 15:28:25+00:00,pool: Untrack connection if it's closed in pool.release,False,21,20,1,1.0,1.0,1.0,6134,3147,4327,258,1.8429602888086642,67.31950580309996,22.0,39.37931034482759,225.38916043727846,2.9083603730759497,1967.459551519987,109.30330841777706,0.07512972014575947
157,309e67143144e23d63c4e144363fcc7a83a1719f,Yury Selivanov,2016-07-17 17:39:51+00:00,Make Connection.is_closed() check if protocol's connection state is alive,False,5,4,1,,,,6134,3147,4327,258,1.8429602888086642,67.31794562768053,22.03448275862069,39.44827586206897,225.93158724015788,2.905515682253725,1970.7297456168621,109.48498586760347,0.0753105290800526
158,1f5b86eefa8bd8cab67dbec69ba88517356d8cb6,Elvis Pranskevichus,2016-07-18 16:44:15+00:00,"Add support for password authentication (password and md5)

Other authentication protocols that require frontend intervention are
not supported yet.",False,341,314,27,0.6197183098591549,0.8169014084507042,0.8169014084507042,6319,3239,4471,260,1.8518518518518519,66.91321996490028,22.82758620689655,40.793103448275865,236.43732908527625,2.9255000082725333,2048.4679743515712,113.80377635286507,0.0788124430284254
159,19107b72156db6113dddca6a07df27cda572fcca,Elvis Pranskevichus,2016-07-18 16:51:10+00:00,Run test cluster on a random ephemeral port,False,36,35,1,0.041666666666666664,0.08333333333333333,0.8333333333333334,6353,3265,4498,260,1.8591549295774648,66.83477694951249,23.06896551724138,41.206896551724135,239.7647999121776,2.9248606748292074,2067.5810284340596,114.86561269078109,0.07992159997072584
160,a8c6437c51fcc08c91797ca81de7509f69f581c9,Elvis Pranskevichus,2016-07-18 22:55:52+00:00,Close connections properly in tests,False,11,7,4,1.0,1.0,1.0,6356,3268,4501,260,1.8591549295774648,66.82557966063573,23.06896551724138,41.206896551724135,239.7647999121776,2.9248606748292074,2067.5810284340596,114.86561269078109,0.07992159997072584
161,4f2eed58dba5a9c6c16d787006f72dda2f7f5550,Elvis Pranskevichus,2016-07-19 02:42:54+00:00,Put cluster sockets into /tmp to avoid possible permission issues,False,3,3,0,0.0,0.0,0.0,6359,3270,4503,260,1.8609154929577465,66.81549504311205,23.137931034482758,41.310344827586206,240.6236445184406,2.924187110363475,2071.8942515173735,115.10523619540966,0.08020788150614686
162,78066f0841cbe5f3b8ec60a4b1db45b81a90376c,Elvis Pranskevichus,2016-07-19 04:41:21+00:00,Initial documentation pass,False,246,246,0,0.0,1.0,0.0,6512,3321,4565,266,1.8609154929577465,67.56192978014668,22.433333333333334,40.0,232.66952303449258,2.843380873351359,2002.8644431334612,111.27024684074786,0.07755650767816417
163,685279f7b68289be70e2fa79e13e870f535c4493,Elvis Pranskevichus,2016-07-19 19:58:52+00:00,Rename CursorFactory to CursorInterface,False,13,7,6,1.0,1.0,0.0,6513,3321,4566,266,1.8609154929577465,67.56113409101775,22.433333333333334,40.0,232.66952303449258,2.843380873351359,2002.8644431334612,111.27024684074786,0.07755650767816417
164,16a0a4feaa4dbf7fe4e2e19fe531c5ba4c6d1c12,Elvis Pranskevichus,2016-07-19 21:15:55+00:00,Document more of asyncpg public API,False,532,499,33,0.18421052631578946,1.0,0.21052631578947367,6597,3334,4565,271,1.8609154929577465,68.16655904462628,22.433333333333334,40.0,232.66952303449258,2.843380873351359,2002.8644431334612,111.27024684074786,0.07755650767816417
165,aa2f1217596a15fd1e205fde922946896b033583,Elvis Pranskevichus,2016-07-19 21:24:53+00:00,Fix cursor prefetch regression,False,4,2,2,,,,6597,3334,4565,271,1.8609154929577465,68.16655904462628,22.433333333333334,40.0,232.66952303449258,2.843380873351359,2002.8644431334612,111.27024684074786,0.07755650767816417
166,392b1fba5c1032e159a979c9c179ad127d43fe59,Elvis Pranskevichus,2016-07-19 21:26:21+00:00,Release 0.5.1,False,2,1,1,,,,6597,3334,4565,271,1.8609154929577465,68.16655904462628,22.433333333333334,40.0,232.66952303449258,2.843380873351359,2002.8644431334612,111.27024684074786,0.07755650767816417
167,b68bfdc6d66aacd7c1d2e2dad21f512246915793,Elvis Pranskevichus,2016-07-20 15:39:12+00:00,"Enable Cython line tracing when building in debug mode

This is necessary for coverage testing",False,4,2,2,,,,6597,3334,4565,271,1.8609154929577465,68.16655904462628,22.433333333333334,40.0,232.66952303449258,2.843380873351359,2002.8644431334612,111.27024684074786,0.07755650767816417
168,bc8c0e996eed3806a7b5a6bb52040e07e0d3eea7,Elvis Pranskevichus,2016-07-20 16:11:52+00:00,"Improve test coverage for codecs, fix a few bugs found in the process",False,210,178,32,0.2826086956521739,0.9456521739130435,1.0,6728,3410,4674,272,1.8629173989455186,69.04524336525452,22.483870967741936,40.67741935483871,240.43773841787123,2.8116270267241212,2132.802419218579,118.48902328992106,0.08014591280595705
169,0c913fa5d458b1a87f0b779fb523351024e5b38a,Elvis Pranskevichus,2016-07-20 18:27:09+00:00,"Move CYTHON_TRACE defines to ""make debug"" target out of setup.py",False,5,3,2,,,,6728,3410,4674,272,1.8629173989455186,69.04524336525452,22.483870967741936,40.67741935483871,240.43773841787123,2.8116270267241212,2132.802419218579,118.48902328992106,0.08014591280595705
170,3d13b29086476d049ecdb2ab2423a2ac45c29552,Yury Selivanov,2016-07-26 18:03:05+00:00,record: Implement __contains__ (see issue #11),False,27,26,1,1.0,1.0,1.0,6741,3420,4684,272,1.8614035087719298,69.01836791914602,22.483870967741936,40.67741935483871,240.43773841787123,2.8116270267241212,2132.802419218579,118.48902328992106,0.08014591280595705
171,cfb1c80588661e186f22309662886cc74be105f6,Yury Selivanov,2016-07-26 18:13:14+00:00,docs: Fix documentation for `timeout` parameter (int -> float),False,14,7,7,,,,6741,3420,4684,272,1.8614035087719298,69.01836791914602,22.483870967741936,40.67741935483871,240.43773841787123,2.8116270267241212,2132.802419218579,118.48902328992106,0.08014591280595705
172,7088e97fe4ea19325d30fb0f85a9045d2fd07c77,Yury Selivanov,2016-07-26 18:16:52+00:00,Rename CursorInterface -> CursorFactory,False,18,9,9,,,,6741,3420,4684,272,1.8614035087719298,69.01836791914602,22.483870967741936,40.67741935483871,240.43773841787123,2.8116270267241212,2132.802419218579,118.48902328992106,0.08014591280595705
173,8edc2039af274faa9b35b3ee9de384a365eec29a,Yury Selivanov,2016-07-26 18:42:41+00:00,docs: Better document cursors,False,82,76,6,,,,6750,3421,4684,272,1.8614035087719298,69.03713185337763,22.483870967741936,40.67741935483871,240.43773841787123,2.8116270267241212,2132.802419218579,118.48902328992106,0.08014591280595705
174,63b6595dcdd8da4bf65ade2c48d4883c54083eb2,Yury Selivanov,2016-07-26 19:21:18+00:00,"docs: Document get_parameters, get_attributes etc",False,69,67,2,1.0,1.0,1.0,6806,3431,4693,272,1.8614035087719298,68.82222364811841,22.483870967741936,40.67741935483871,240.43773841787123,2.8116270267241212,2132.802419218579,118.48902328992106,0.08014591280595705
175,3c5bba425de6949b383e04b06a12cec964c889c6,Yury Selivanov,2016-07-26 19:21:20+00:00,types: Fix code style,False,4,2,2,,,,6806,3431,4693,272,1.8614035087719298,68.82222364811841,22.483870967741936,40.67741935483871,240.43773841787123,2.8116270267241212,2132.802419218579,118.48902328992106,0.08014591280595705
176,42812efe2cc641b80c9bbb765f4d6e175de45c98,Yury Selivanov,2016-07-26 21:56:26+00:00,pool: Make pool.acquire() compatible with 'async with',False,157,149,8,0.4838709677419355,0.989247311827957,0.43010752688172044,6947,3483,4750,272,1.8665511265164645,69.16602712310333,22.677419354838708,40.87096774193548,241.8470883936635,2.846842080487562,2151.03561877462,119.50197882081225,0.08061569613122115
177,2b17b14d89a2618602fe3e5e64d6db7c2c03b8e8,Yury Selivanov,2016-07-26 21:56:28+00:00,docs: Improve documentation,False,196,147,49,1.0,1.0,0.17857142857142858,7065,3527,4797,275,1.8674698795180722,69.15146879386634,22.375,40.0625,236.0239479992402,2.8047532654723257,2086.4176273647313,115.91209040915174,0.07867464933308004
178,d316004784d34815b39586bb69cd73613dd0fdf9,Yury Selivanov,2016-07-26 23:25:41+00:00,Add API for LISTEN; document get_settings(),False,229,198,31,0.5405405405405406,1.0,0.6351351351351351,7193,3599,4872,280,1.868020304568528,69.96514576546812,21.96969696969697,39.27272727272727,232.43082009439277,2.7004306856903453,2041.3781460874925,113.40989700486071,0.07747694003146423
179,32c7d708e91c4b05d7be3c07f7a42858d256a032,Yury Selivanov,2016-07-26 23:42:45+00:00,Add 'setup' parameter to pool.create_pool(); issue #4.,False,67,50,17,0.6296296296296297,0.07407407407407407,0.7037037037037037,7226,3617,4893,280,1.870151770657673,69.91963681897042,22.060606060606062,39.45454545454545,233.57391760911517,2.698326308585968,2049.0664355233957,113.8370241957442,0.0778579725363717
180,bc308c5b7893b1853aa1de8397989fa81f9d716d,Yury Selivanov,2016-07-26 23:45:10+00:00,Bump the version to v0.5.2,False,2,1,1,,,,7226,3617,4893,280,1.870151770657673,69.91963681897042,22.060606060606062,39.45454545454545,233.57391760911517,2.698326308585968,2049.0664355233957,113.8370241957442,0.0778579725363717
181,72bd926c3a53ce20f4d7c9553977b2a7a7384725,Yury Selivanov,2016-07-26 23:58:02+00:00,docs: Document 'database' param for 'connect()',False,3,3,0,,,,7229,3617,4893,280,1.870151770657673,69.92212820044948,22.060606060606062,39.45454545454545,233.57391760911517,2.698326308585968,2049.0664355233957,113.8370241957442,0.0778579725363717
182,a0cc7c3348fa42b61eb2861aa2db0a2d0da5e2ca,Elvis Pranskevichus,2016-07-28 14:06:07+00:00,Allow any non-trivial Container to be passed as an array argument,False,27,20,7,,,,7229,3617,4893,280,1.870151770657673,69.92212820044948,22.060606060606062,39.45454545454545,233.57391760911517,2.698326308585968,2049.0664355233957,113.8370241957442,0.0778579725363717
183,dc5f6fc5cf86b3ed0c5fb895fc9df06939aea733,Elvis Pranskevichus,2016-07-29 13:17:12+00:00,"Drop redundant connection test

This case is already covered by the authentication test suite",False,7,0,7,0.0,0.0,0.0,7222,3613,4888,280,1.871404399323181,69.93724275114141,22.060606060606062,39.45454545454545,233.57391760911517,2.698326308585968,2049.0664355233957,113.8370241957442,0.0778579725363717
184,c9de630397ab9a397234d50a48792e64cfb37c71,Elvis Pranskevichus,2016-07-29 13:17:12+00:00,Fix portability issues in Cluster,False,16,9,7,0.0,0.0,0.0,7224,3613,4888,280,1.8745762711864407,69.93002728157022,22.151515151515152,39.60606060606061,234.81294869439512,2.697482822175471,2055.3816101633247,114.18786723129583,0.07827098289813167
185,670fb109d6b1e427c4e4c63eeadcab14de7492af,Elvis Pranskevichus,2016-07-29 13:17:12+00:00,Make non-temp cluster usable with tests again,False,23,19,4,0.8,1.0,1.0,7239,3623,4898,280,1.8703703703703705,69.88470892729738,22.21212121212121,39.666666666666664,235.2454512163904,2.7208760955687445,2060.7547138799487,114.48637299333049,0.07841515040546343
186,da0bd51dd8dfc800beb41b705e984f7cb63da0fc,Elvis Pranskevichus,2016-07-29 13:17:12+00:00,Make pickle test less fragile,False,3,1,2,0.0,0.0,0.0,7238,3623,4897,280,1.8703703703703705,69.88545530504507,22.21212121212121,39.666666666666664,235.2454512163904,2.7208760955687445,2060.7547138799487,114.48637299333049,0.07841515040546343
187,14ab4f290001a3f6bc8b07c339d3d16238c34f85,Yury Selivanov,2016-08-02 21:51:10+00:00,Fix test_prepare_19_concurrent_calls test,False,5,3,2,1.0,1.0,1.0,7239,3623,4898,280,1.8703703703703705,69.88447933310374,22.21212121212121,39.666666666666664,235.2454512163904,2.7208760955687445,2060.7547138799487,114.48637299333049,0.07841515040546343
188,29bd451b52e99f229a5f16900d80ee4a83725652,Yury Selivanov,2016-08-03 16:15:06+00:00,Fix test_prepare_19_concurrent_calls,False,5,2,3,0.0,0.0,0.0,7238,3622,4897,280,1.8703703703703705,69.88681266615394,22.21212121212121,39.666666666666664,235.2454512163904,2.7208760955687445,2060.7547138799487,114.48637299333049,0.07841515040546343
189,740b93e1d335059fab5c2f23c3b76a7a717b8a4d,Elvis Pranskevichus,2016-08-05 15:47:55+00:00,"Fix pool connection failure when a password is present (#16)

Make sure that password does not get removed from initial connection
settings so that subsequent pool connections can reuse it properly.",False,50,48,2,0.12121212121212122,1.0,1.0,7282,3643,4929,281,1.8722689075630252,68.9400153252228,22.272727272727273,39.72727272727273,235.30605727699646,2.7360276107202597,2060.7850169102517,114.48805649501399,0.07843535242566545
190,eb8cb03bbcc1b616b986a1d860103234541ae08c,Elvis Pranskevichus,2016-08-05 15:47:55+00:00,asyncpg v0.5.3,False,2,1,1,,,,7282,3643,4929,281,1.8722689075630252,68.9400153252228,22.272727272727273,39.72727272727273,235.30605727699646,2.7360276107202597,2060.7850169102517,114.48805649501399,0.07843535242566545
191,cd0003a35089d8747c77080e1a903bfc07609a97,Yury Selivanov,2016-08-05 19:01:33+00:00,Update Connection.execute to accept query arguments,False,53,51,2,0.29545454545454547,1.0,0.4318181818181818,7331,3659,4954,281,1.8710217755443885,68.94324783681901,22.303030303030305,39.78787878787879,235.79022036316857,2.7341781299975394,2063.842960458766,114.65794224770924,0.07859674012105615
192,6b412be1878d43764bd7f5dd47b2da0454573188,Yury Selivanov,2016-08-05 19:09:58+00:00,Improve documentation for Connection.execute,False,3,2,1,0.0,1.0,0.0,7332,3659,4954,281,1.8710217755443885,68.94420747456697,22.303030303030305,39.78787878787879,235.79022036316857,2.7341781299975394,2063.842960458766,114.65794224770924,0.07859674012105615
193,c6179ccee297ba0e6d7be17b341db80828aa1729,Yury Selivanov,2016-08-05 19:54:51+00:00,Fix test_prepare_19_concurrent_calls,False,5,4,1,,,,7335,3659,4954,283,1.8710217755443885,68.95476754415353,22.303030303030305,39.78787878787879,235.79022036316857,2.7341781299975394,2063.842960458766,114.65794224770924,0.07859674012105615
194,1c08a7b2cbe53c35b3c08b703d9d1aa871568142,Yury Selivanov,2016-08-06 15:37:43+00:00,connection: Tighten up the code,False,23,10,13,0.3333333333333333,0.0,0.3333333333333333,7332,3653,4951,283,1.8710217755443885,68.96099617007714,22.303030303030305,39.78787878787879,235.79022036316857,2.7341781299975394,2063.842960458766,114.65794224770924,0.07859674012105615
195,7c5edb6027331f44c00cc3708938dd7823bca16f,Benjamin W. Smith,2016-08-06 15:38:30+00:00,"Typo in docstring

- poll vs pool",False,4,2,2,,,,7332,3653,4951,283,1.8710217755443885,68.96099617007714,22.303030303030305,39.78787878787879,235.79022036316857,2.7341781299975394,2063.842960458766,114.65794224770924,0.07859674012105615
196,440409b1fcead534f52fa9c646df11b5f7723138,Yury Selivanov,2016-08-06 16:16:56+00:00,Fix test_prepare_20_concurrent_calls,False,28,17,11,1.0,1.0,1.0,7338,3655,4954,283,1.8710217755443885,68.95537683381889,22.303030303030305,39.78787878787879,235.79022036316857,2.7341781299975394,2063.842960458766,114.65794224770924,0.07859674012105615
197,b61567d2d674383f53c3ec80e2bee8509284c79f,Yury Selivanov,2016-08-06 20:22:49+00:00,Add versionchanged tag to Connection.execute docstring,False,3,3,0,0.0,1.0,0.0,7341,3655,4954,283,1.8710217755443885,68.95720882101362,22.303030303030305,39.78787878787879,235.79022036316857,2.7341781299975394,2063.842960458766,114.65794224770924,0.07859674012105615
198,ecf8bed880e92a9aa05c58c6d4157531837eb2d5,John Kingsley,2016-08-14 20:51:29+00:00,Fixed copy-and-paste error in Line type,False,2,1,1,,,,7341,3655,4954,283,1.8710217755443885,68.95720882101362,22.303030303030305,39.78787878787879,235.79022036316857,2.7341781299975394,2063.842960458766,114.65794224770924,0.07859674012105615
199,c70a8f3a5e847b6edf57b2eb54cbf9a51c9de1e5,Elvis Pranskevichus,2016-08-28 23:00:55+00:00,Add a (failing) test for duplicate field names handling in Records,False,11,10,1,1.0,1.0,1.0,7350,3663,4961,283,1.8695652173913044,68.93766168651784,22.303030303030305,39.78787878787879,235.79022036316857,2.7341781299975394,2063.842960458766,114.65794224770924,0.07859674012105615
200,98006d64ba0d3b86135dde3613d05cd4fadf0e79,Yury Selivanov,2016-08-29 01:04:34+00:00,Allow duplicate field names in records (fixes #28),False,154,133,21,0.0,1.0,0.8235294117647058,7349,3662,4960,283,1.8695652173913044,68.93965290615876,22.303030303030305,39.78787878787879,235.79022036316857,2.7341781299975394,2063.842960458766,114.65794224770924,0.07859674012105615
201,ab315c2bb90e8ec1a4a6e1daae68e3381b742815,Elvis Pranskevichus,2016-09-14 15:53:47+00:00,asyncpg v0.5.4,False,2,1,1,,,,7349,3662,4960,283,1.8695652173913044,68.93965290615876,22.303030303030305,39.78787878787879,235.79022036316857,2.7341781299975394,2063.842960458766,114.65794224770924,0.07859674012105615
202,6fe46fd25e20f8f08f77e701bdd133421c643dab,Elvis Pranskevichus,2016-10-04 17:19:00+00:00,Make it possible to override cluster connection parameters,False,63,35,28,1.0,1.0,1.0,7356,3671,4966,283,1.8616666666666666,68.93277151240993,22.12121212121212,39.515151515151516,233.52144591976517,2.7359189423766495,2052.4517708802523,114.02509838223628,0.07784048197325501
203,93733dba6c09673660614c014bae955dda9e8796,Elvis Pranskevichus,2016-10-19 20:43:54+00:00,"Move compilation logic to setup.py

Use a custom build_ext command to cythonize and patch the protocol
source.  This makes it possible to build asyncpg from Cython source
with regular setup.py commands.  Cython dependency is still optional.",False,278,175,103,0.041666666666666664,0.5520833333333334,1.0,7501,3731,5077,288,1.890728476821192,67.67368683086161,22.727272727272727,40.21212121212121,236.9413769305324,2.811676518134226,2063.071782662718,114.6150990368177,0.07898045897684411
204,f58e44a3501c737f2e5439f4500e566f061e5cfe,Elvis Pranskevichus,2016-10-20 16:26:46+00:00,Add Windows support (#31),False,154,131,23,0.2777777777777778,0.0,0.6944444444444444,7563,3760,5122,294,1.8993399339933994,67.40941277453713,23.242424242424242,40.93939393939394,242.1190255723746,2.843891596143045,2091.9706936682055,116.2205940926781,0.08070634185745817
205,356849d61e189ac602fb0f778b392062481d9651,Elvis Pranskevichus,2016-10-20 16:26:49+00:00,asyncpg v0.6.0,False,2,1,1,,,,7563,3760,5122,294,1.8993399339933994,67.40941277453713,23.242424242424242,40.93939393939394,242.1190255723746,2.843891596143045,2091.9706936682055,116.2205940926781,0.08070634185745817
206,957b18ebe4643e3579dde92224054eb5bd34a19f,Elvis Pranskevichus,2016-10-20 16:54:06+00:00,Fix pool tests when running on a system database cluster,False,2,1,1,,,,7563,3760,5122,294,1.8993399339933994,67.40941277453713,23.242424242424242,40.93939393939394,242.1190255723746,2.843891596143045,2091.9706936682055,116.2205940926781,0.08070634185745817
207,910ed3544e9b70a2ea3f4a7940b60edddf444b45,Elvis Pranskevichus,2016-10-20 16:55:14+00:00,asyncpg v0.6.1,False,2,1,1,,,,7563,3760,5122,294,1.8993399339933994,67.40941277453713,23.242424242424242,40.93939393939394,242.1190255723746,2.843891596143045,2091.9706936682055,116.2205940926781,0.08070634185745817
208,ed9a430baadb41a32632ea14eab46831bd7fb421,Elvis Pranskevichus,2016-10-20 17:50:19+00:00,asyncpg v0.6.2,False,2,1,1,,,,7563,3760,5122,294,1.8993399339933994,67.40941277453713,23.242424242424242,40.93939393939394,242.1190255723746,2.843891596143045,2091.9706936682055,116.2205940926781,0.08070634185745817
209,ca93bb2f2affb66076027f3ddeedc9293a6ff855,Elvis Pranskevichus,2016-10-21 13:45:46+00:00,Update pyenv installation method on macOS under Travis CI,False,37,22,15,,,,7563,3760,5122,294,1.8993399339933994,67.40941277453713,23.242424242424242,40.93939393939394,242.1190255723746,2.843891596143045,2091.9706936682055,116.2205940926781,0.08070634185745817
210,27ce0aadd6c18263efe54a412b95fa898abb74b6,Elvis Pranskevichus,2016-10-27 15:34:22+00:00,setup.py: Support --cython-directives properly,False,5,4,1,1.0,1.0,1.0,7566,3761,5125,294,1.8993399339933994,67.40108815825494,23.242424242424242,40.93939393939394,242.1190255723746,2.843891596143045,2091.9706936682055,116.2205940926781,0.08070634185745817
211,192b6fed6ba98fbf7f9234af8721a51a0e758e1e,Yury Selivanov,2016-10-27 21:58:00+00:00,Allow empty Record objects.,False,65,46,19,0.8125,0.875,1.0,7580,3774,5138,294,1.8978583196046128,67.37027584299804,23.242424242424242,40.93939393939394,242.1190255723746,2.843891596143045,2091.9706936682055,116.2205940926781,0.08070634185745817
212,2a0b1bbae9da5404c582107f0f24b2c431a30b76,Elvis Pranskevichus,2016-10-27 23:56:26+00:00,"Decode arrays as lists, handle arrays of composite types

Arrays are now decoded as lists.  On the encoding side, any non-trivial
container type is still accepted, but tuples are treated as composite
types.  This is consistent with PL/Python handling of arrays [1].

Github-Issue: #33

[1] https://www.postgresql.org/docs/devel/static/plpython-data.html#PLPYTHON-ARRAYS
[2] https://github.com/postgres/postgres/commit/cfd9c87a54b0d414a59a912710c6633313174e51",False,128,76,52,1.0,1.0,1.0,7596,3779,5150,294,1.8963815789473684,67.3595015137366,23.242424242424242,40.93939393939394,242.1190255723746,2.843891596143045,2091.9706936682055,116.2205940926781,0.08070634185745817
213,04708930506ea70b4f0652f698d34d1d30948b7d,Yury Selivanov,2016-10-28 21:13:08+00:00,cluster: Fix how settings args are passed to 'init',False,5,3,2,0.0,1.0,1.0,7597,3780,5151,294,1.8963815789473684,67.35820556067823,23.242424242424242,40.93939393939394,242.1190255723746,2.843891596143045,2091.9706936682055,116.2205940926781,0.08070634185745817
214,26093585127b47609f7df9018d19715b8606aa5d,Yury Selivanov,2016-11-10 17:31:38+00:00,Enable 'setup.py test',False,8,8,0,1.0,1.0,1.0,7605,3785,5157,294,1.8949096880131362,67.3301782201197,23.242424242424242,40.93939393939394,242.1190255723746,2.843891596143045,2091.9706936682055,116.2205940926781,0.08070634185745817
215,38ad33bd7f637fefc5f6cdc383a043bd4042971d,Elvis Pranskevichus,2016-11-12 19:22:14+00:00,Ignore system and dropped attributes in composite types (#43),False,48,40,8,0.1,1.0,1.0,7631,3795,5179,294,1.8934426229508197,67.31362408935206,23.242424242424242,40.93939393939394,242.1190255723746,2.843891596143045,2091.9706936682055,116.2205940926781,0.08070634185745817
216,22ea663029589acecb8093c51e1f41ae4f7fc225,Chris Lamb,2016-11-13 16:29:41+00:00,"Fix parsing pg_ctl output in some locales

for example: ""pg_ctl : le serveur est en cours d'exécution (PID : 9286)"".

see also: https://bugs.debian.org/843967",False,2,1,1,,,,7631,3795,5179,294,1.8934426229508197,67.31362408935206,23.242424242424242,40.93939393939394,242.1190255723746,2.843891596143045,2091.9706936682055,116.2205940926781,0.08070634185745817
217,2707ca34df06c81382abd57cbfc7cb8a29bc3815,Elvis Pranskevichus,2016-11-14 21:45:39+00:00,"Fix handling of CIDR input to ""inet"" data type

PostgreSQL actually allows network addresses in ""inet"", so handle this.

Fixes: #37",False,18,15,3,,,,7637,3795,5185,294,1.8934426229508197,67.31280148843152,23.242424242424242,40.93939393939394,242.1190255723746,2.843891596143045,2091.9706936682055,116.2205940926781,0.08070634185745817
218,1f4f7df0bb7312694cc287d1fce397080e5653cf,Elvis Pranskevichus,2016-11-16 19:46:17+00:00,"Implement the Connection.executemany() method

The executemany() method runs an SQL command for each sequence
of arguments in the given iterable.

Closes: #36",False,212,201,11,0.10344827586206896,1.0,0.896551724137931,7693,3811,5214,295,1.8905228758169934,67.31363922841663,23.242424242424242,40.93939393939394,242.1190255723746,2.843891596143045,2091.9706936682055,116.2205940926781,0.08070634185745817
219,e2404e11becf507435203d4dcb5ac5789f5773cb,Elvis Pranskevichus,2016-11-17 14:02:44+00:00,asyncpg v0.7.0,False,3,2,1,,,,7694,3811,5215,295,1.8905228758169934,67.31235526681748,23.242424242424242,40.93939393939394,242.1190255723746,2.843891596143045,2091.9706936682055,116.2205940926781,0.08070634185745817
220,330dbcaae70947efc010d2a84618bb5201366eb3,Yury Selivanov,2016-11-22 01:07:35+00:00,cython: Make async def coroutines awaitable in cythonized coroutines,False,2,1,1,,,,7694,3811,5215,295,1.8905228758169934,67.31235526681748,23.242424242424242,40.93939393939394,242.1190255723746,2.843891596143045,2091.9706936682055,116.2205940926781,0.08070634185745817
221,2b104e0244f4801a3a828dc3ae8206c32e705819,Elvis Pranskevichus,2016-12-16 20:36:07+00:00,"Fix Connection.reset() on read-only connections

Fixes: #48",False,187,171,16,0.39655172413793105,1.0,0.8189655172413793,7849,3888,5341,295,1.891025641025641,66.89709912738897,23.484848484848484,41.39393939393939,245.34934061146498,2.8619579119439886,2113.589340595516,117.42163003308423,0.08178311353715496
222,d4a66cbd948c45d8ff43f5a383a7ce9b189f08b8,Elvis Pranskevichus,2016-12-21 17:46:46+00:00,Add compatibility with PostgreSQL server versions 9.1-9.3,False,237,226,11,0.24,0.46,0.72,8064,3948,5503,303,1.9074960127591707,67.26119556347118,23.735294117647058,41.5,246.4604945759258,2.9852153112285325,2204.754972784705,122.48638737692805,0.08215349819197522
223,9d27fe601876c1c74a266daaf5906e1c46f515f5,Elvis Pranskevichus,2016-12-21 17:46:46+00:00,travis: Also build on Python 3.6,False,13,12,1,0.0,1.0,1.0,8065,3948,5504,303,1.9074960127591707,67.26053657096436,23.735294117647058,41.5,246.4604945759258,2.9852153112285325,2204.754972784705,122.48638737692805,0.08215349819197522
224,2d86ac822219d7e1392f31651ea2e5fa2264d3b2,Yury Selivanov,2016-12-21 18:00:58+00:00,connection: Fix waiter wakeup code in _cancel_current_command,False,3,2,1,0.0,0.0,1.0,8066,3949,5505,304,1.9074960127591707,67.25892839455553,23.764705882352942,41.55882352941177,246.9325184348805,2.983434707094987,2207.9884854638112,122.66602697021169,0.08231083947829348
225,0185586bc274883db9c51ef3f3d3266bf5f4c409,Elvis Pranskevichus,2016-12-22 16:35:10+00:00,Fix setup.py metadata and README rst issues,False,10,8,2,,,,8072,3951,5509,304,1.9074960127591707,67.24661797965761,23.764705882352942,41.55882352941177,246.9325184348805,2.983434707094987,2207.9884854638112,122.66602697021169,0.08231083947829348
226,c9e9314eb4f038fc885e7877ba97d02dbae1cba9,Elvis Pranskevichus,2016-12-22 17:29:16+00:00,"ci: Switch to staged release process

Uploading release artifacts directly to PyPI from the build matrix is
bad, as this may result in an incomplete or broken release if any of
the platforms fail to build.

To fix the process, implement a ""staged"" build process whereby artifacts
are built from a dedicated ""releases"" branch and are uploaded to an S3
bucket.  Once all artifacts have been successfully built, the release
tag may be pushed to master, and the previously built artifacts will be
uploaded to PyPI as a single transaction.",False,487,376,111,0.20869565217391303,1.0,1.0,8076,3955,5514,304,1.9074960127591707,67.22820628972359,23.764705882352942,41.55882352941177,246.9325184348805,2.983434707094987,2207.9884854638112,122.66602697021169,0.08231083947829348
227,2fe0089d02dded486f7c29e664496baab3d3e808,Elvis Pranskevichus,2017-01-02 16:12:56+00:00,ci: Build wheels for Python 3.6,False,242,131,111,,,,8076,3955,5514,304,1.9074960127591707,67.22820628972359,23.764705882352942,41.55882352941177,246.9325184348805,2.983434707094987,2207.9884854638112,122.66602697021169,0.08231083947829348
228,bb8a94a40f9c32bf8a6b87266df5d9ba4e675b7a,Vitaly Burovoy,2017-01-02 16:14:17+00:00,Make TYPEMAP be stable and avoid extra endline at the end of pgtypes.pxi,False,140,70,70,,,,8076,3955,5514,304,1.9074960127591707,67.22820628972359,23.764705882352942,41.55882352941177,246.9325184348805,2.983434707094987,2207.9884854638112,122.66602697021169,0.08231083947829348
229,5ceb893b9ec51dacc4e22ccbb58a02dc008f0512,Vitaly Burovoy,2017-01-02 22:21:50+00:00,"Add codec tests for ""aclitem[]"" type

Postgres does not support sending ""aclitem"" type in the binary mode.  Add tests
(currently failing) for the decoding of ""aclitem[]"" array type.",False,90,90,0,0.0,1.0,1.0,8166,3964,5597,304,1.9076433121019107,67.20218121460988,23.764705882352942,41.55882352941177,246.9325184348805,2.983434707094987,2207.9884854638112,122.66602697021169,0.08231083947829348
230,343e98e5d7bcc51e68d199b7314657a68f1529bd,Elvis Pranskevichus,2017-01-03 15:44:30+00:00,Increase pool.acquire timeout in tests to avoid failures on Travis,False,2,1,1,,,,8166,3964,5597,304,1.9076433121019107,67.20218121460988,23.764705882352942,41.55882352941177,246.9325184348805,2.983434707094987,2207.9884854638112,122.66602697021169,0.08231083947829348
231,b8eac821f356f7cdfea109346d645af6a375dca9,Elvis Pranskevichus,2017-01-03 17:13:13+00:00,Increase test timeouts,False,25,14,11,,,,8169,3965,5598,304,1.9076433121019107,67.20218121460988,23.764705882352942,41.55882352941177,246.9325184348805,2.983434707094987,2207.9884854638112,122.66602697021169,0.08231083947829348
232,479a82f386fa8fd6f6d59e1789c352d437f1340a,Elvis Pranskevichus,2017-01-03 20:35:39+00:00,Attempt to fix spurious failures of test_auth_reject on Windows,False,17,15,2,0.0,1.0,1.0,8182,3974,5608,307,1.9156050955414012,67.20379845854463,23.852941176470587,41.64705882352941,247.5646647874087,3.0003873214740717,2214.652648515041,123.03625825083557,0.08252155492913622
233,678f6837ff060fe69307fd696f305aa9ccc899e7,Elvis Pranskevichus,2017-01-03 20:35:40+00:00,Use ssize_t for buffer sizes consistently,False,282,158,124,,,,8184,3976,5610,307,1.9156050955414012,67.19429451150584,23.852941176470587,41.64705882352941,247.5646647874087,3.0003873214740717,2214.652648515041,123.03625825083557,0.08252155492913622
234,12ab58d8b72c05e0f1686f2b3354bdfc85fb9d0d,Elvis Pranskevichus,2017-01-04 20:26:03+00:00,"Add infrastructure for multiformat data codecs

Current asyncpg codec architecture allows for only one codec per data
type.  This arrangement works most of the time, but fails utterly to
handle situations when the text format I/O is forced by the lack of
binary I/O support for one of the types in the composite type.

This commit is the preparation for the introduction of text format
parsing and allows to associate multiple format-specific codecs for each
type.",False,223,149,74,,,,8201,3976,5627,307,1.9156050955414012,67.19429451150584,23.852941176470587,41.64705882352941,247.5646647874087,3.0003873214740717,2214.652648515041,123.03625825083557,0.08252155492913622
235,72ecbf373b99f3a10b723e29ac8fadc9598fc904,Elvis Pranskevichus,2017-01-04 20:26:03+00:00,"Implement text array decoder

Asyncpg now supports decoding arrays of types that do not support
binary I/O.",False,513,508,5,,,,8200,3975,5626,307,1.9156050955414012,67.19529038673087,23.852941176470587,41.64705882352941,247.5646647874087,3.0003873214740717,2214.652648515041,123.03625825083557,0.08252155492913622
236,d2be6ecc95dc17a47ca47baf7961cbb2ac0965a4,Elvis Pranskevichus,2017-01-04 20:29:56+00:00,asyncpg-0.8.3,False,2,1,1,,,,8200,3975,5626,307,1.9156050955414012,67.19529038673087,23.852941176470587,41.64705882352941,247.5646647874087,3.0003873214740717,2214.652648515041,123.03625825083557,0.08252155492913622
237,ff68ca5cbba09685e6cc45b33b3f77c38660b582,Elvis Pranskevichus,2017-01-05 22:58:24+00:00,"Fix date/datetime negative infinity decoder regression

This was introduced in 678f6837ff060.

Fixes: #62",False,25,19,6,0.0,0.0,1.0,8213,3981,5638,307,1.9171974522292994,67.18183150508602,23.970588235294116,41.8235294117647,249.14584527359747,3.022853333050327,2268.2171697122553,126.01206498401416,0.08304861509119915
238,b27725de1c5f5e8fcc7bd79bc8bfc552c05076f4,Elvis Pranskevichus,2017-01-05 23:28:32+00:00,Test floating point edge case decoding with text input,False,10,8,2,,,,8219,3981,5644,307,1.9171974522292994,67.1797461967487,23.970588235294116,41.94117647058823,249.94053792091083,3.0268781008521843,2283.632115773694,126.86845087631636,0.08331351264030361
239,81365dca0361878476d3a589009671789820d690,Elvis Pranskevichus,2017-01-06 17:58:31+00:00,"Shorten the nested array decoder code

The current nested loop code, while correct and fast, is arguably ugly
and brittle (should ARRAY_MAXDIM ever change or become server version
specific).

Replace this with the implementation using a stack of sublists, like
textarray_decode already does.

There is no measurable impact on performance.",False,175,71,104,0.0,1.0,1.0,8223,3981,5648,307,1.9171974522292994,67.17930988304441,23.970588235294116,41.94117647058823,249.94053792091083,3.0268781008521843,2283.632115773694,126.86845087631636,0.08331351264030361
240,5706fe343743eb5c8281a1491a4d5d312207e180,Elvis Pranskevichus,2017-01-20 23:14:41+00:00,Add a test for ENUM type,False,25,25,0,0.0,1.0,1.0,8248,3989,5669,307,1.917329093799682,67.16229478729757,23.970588235294116,41.94117647058823,249.94053792091083,3.0268781008521843,2283.632115773694,126.86845087631636,0.08331351264030361
241,eb0caa712552f94137a136d6bc79dda54480b5d8,Vitaly Burovoy,2017-02-02 14:41:46+00:00,"Fix parsing server version string for non-final releases (devel, beta etc.)

It seems broken from the beginning:
d4a66cbd948c45d8ff43f5a383a7ce9b189f08b8

Detect numbers by both sides of a string in the last part
(they are not split[1][2] by '.').

[1] 9.4beta2
https://git.postgresql.org/pg/commitdiff/c85374626f680902c207285b986ac38a134535eb

[2] 10devel
https://git.postgresql.org/pg/commitdiff/ca9112a424ff68ec4f2ef67b47122f7d61412964",False,45,41,4,0.7142857142857143,0.7142857142857143,1.0,8285,4014,5701,310,1.9175911251980982,66.92947385042963,24.205882352941178,42.411764705882355,252.56874478385612,3.07022903096782,2305.7961404946373,128.09978558303544,0.0841895815946187
242,4a160e9db00a4057dbae714b490b7bc7c1b52bff,Yury Selivanov,2017-02-22 18:19:03+00:00,Add 'init' parameter to `create_pool()`. Addresses issue #80.,False,54,47,7,0.6857142857142857,0.9428571428571428,0.7428571428571429,8325,4034,5727,310,1.9208860759493671,66.77276144423867,24.470588235294116,42.76470588235294,254.39267882095598,3.1025586294738896,2314.513148648416,128.5840638138009,0.08479755960698532
243,3015f235eeeb2976bfab7dcc826be0159866d231,Yury Selivanov,2017-02-22 19:32:20+00:00,setup.py: Mark asyncpg as production/stable,False,2,1,1,,,,8325,4034,5727,310,1.9208860759493671,66.77276144423867,24.470588235294116,42.76470588235294,254.39267882095598,3.1025586294738896,2314.513148648416,128.5840638138009,0.08479755960698532
244,d207467ca3f26b18474cff48dcf748b081817711,Yury Selivanov,2017-02-22 20:44:57+00:00,Bump the version to v0.9.0,False,2,1,1,,,,8325,4034,5727,310,1.9208860759493671,66.77276144423867,24.470588235294116,42.76470588235294,254.39267882095598,3.1025586294738896,2314.513148648416,128.5840638138009,0.08479755960698532
245,71de129ba1c8a17211a7adcb47890a4bf89ee289,Elvis Pranskevichus,2017-03-01 18:37:37+00:00,"Allow overriding codecs for builtin types on a connection.

Connection.set_type_codec now allows overriding codecs for builtin
types.

Per complaint in #73.",False,46,33,13,1.0,1.0,1.0,8349,4050,5744,310,1.919431279620853,66.7538125095892,24.470588235294116,42.76470588235294,254.39267882095598,3.1025586294738896,2314.513148648416,128.5840638138009,0.08479755960698532
246,b329d02593a1ce956e03768316d530292d19bb97,Elvis Pranskevichus,2017-03-15 16:16:01+00:00,"tests: Workaround connection error race under Windows.

Appveyor test runs periodically fail with ConnectionDoesNotExist instead
of the actual connection error.  Try to mitigate that.",False,41,21,20,1.0,0.0,0.0,8350,4049,5743,310,1.916403785488959,66.75603007976898,24.470588235294116,42.76470588235294,254.39267882095598,3.1025586294738896,2314.513148648416,128.5840638138009,0.08479755960698532
247,a2e53ab0baa24e65cb0f98ad71f96c26e144f9a0,Elvis Pranskevichus,2017-03-16 15:51:08+00:00,"Add support for the text I/O fallback for arrays of unknown types.

Currently, asyncpg supports falling back to text I/O for types that do
not have a registered codec.  This commit extends this behaviour to
arrays of such types.

Additionally, add an explicit error for when the text I/O is attempted
for a range or a composite type, as these are not supported yet.

Fixes: #82.",False,366,323,43,0.0,1.0,1.0,8434,4076,5803,318,1.9165354330708662,66.77711526519943,24.529411764705884,42.85294117647059,255.18801848610175,3.099903112573695,2318.55555508221,128.80864194901167,0.08506267282870057
248,8d17eccb3b6277a2f055494058b8aaf582c14fcd,Elvis Pranskevichus,2017-03-16 17:32:11+00:00,"Handle exceptions in generators passed to Connection.executemany()

Fixes: #85",False,28,28,0,0.0,1.0,1.0,8454,4088,5819,318,1.9182389937106918,65.81053452960762,24.61764705882353,42.94117647058823,255.32786811851832,3.1146089949266362,2318.6254798984187,128.81252666102327,0.08510928937283943
249,e8bb3dc0a8dac3b044d6518ae55d3f665e9e474f,Elvis Pranskevichus,2017-03-17 20:40:04+00:00,"Add rudimentary server capability detection.

Add basic server capability detection mechanism based on server version
and parameters reported by the server through ParameterStatus messages.
This allows altering certain asyncpg behaviour based on the connected
server.

Specifically, this allows asyncpg to connect to CochroachDB servers.

Fixes #87.",False,97,78,19,0.13513513513513514,0.35135135135135137,0.8918918918918919,8510,4124,5861,320,1.9278996865203761,65.72799595654072,24.852941176470587,43.470588235294116,259.5231880630404,3.1118308234170686,2362.9372579985343,131.2742921110297,0.08650772935434677
250,2ad7c4c3d43c04ad700ed05c6adcc0386c8b37b0,Elvis Pranskevichus,2017-03-24 15:11:38+00:00,tests: Deal with timeouts under macOS in Travis.,False,13,10,3,,,,8517,4128,5865,321,1.9278996865203761,65.71687159102909,24.941176470588236,43.55882352941177,260.02196895330127,3.1265367057700097,2365.433600669317,131.41297781496206,0.0866739896511004
251,d42608f90b15b14c07057360041a163383e6e802,Elvis Pranskevichus,2017-03-24 16:37:04+00:00,"Make the Record type available as asyncpg.Record.

Fixes: #93.",False,58,41,17,1.0,1.0,1.0,8530,4138,5874,323,1.925,65.7457409609839,24.941176470588236,43.55882352941177,260.02196895330127,3.1265367057700097,2365.433600669317,131.41297781496206,0.0866739896511004
252,537c8c9f4850899f0618d1a031641dfd3ed6986c,Elvis Pranskevichus,2017-03-29 16:11:30+00:00,"Shield Pool.release() from task cancellation.

Use asyncio.shield() to guarantee that task cancellation
does not prevent the connection from being returned to the
pool properly.

Fixes: #97.",False,97,83,14,0.9743589743589743,0.9743589743589743,0.38461538461538464,8599,4163,5915,332,1.9151234567901234,65.75735470985467,24.941176470588236,43.55882352941177,260.02196895330127,3.1265367057700097,2365.433600669317,131.41297781496206,0.0866739896511004
253,3bf6103ebce091e2ddcf45ea733e8784b61f9acc,Yury Selivanov,2017-03-29 18:53:39+00:00,"pool: Track connections and prohibit using them after release.

Connection pool now wraps all connections in `PooledConnectionProxy`
objects to raise `InterfaceError` if they are used after being
released back to the pool.  We also check if connection passed
to `pool.release` actually belong to the pool and correctly handle
multiple calls to `pool.release` with the same connection object.

`PooledConnectionProxy` transparently wraps Connection instances,
exposing all Connection public API.

`isinstance(asyncpg.connection.Connection)` is `True` for Instances
of `PooledConnectionProxy` class.",False,239,217,22,0.828125,0.890625,0.7421875,8794,4274,6050,343,1.9221556886227544,65.38085408472077,25.91176470588235,45.05882352941177,271.5896318024766,3.128278196089744,2460.056541910188,136.66980788389938,0.09052987726749216
254,d1ee90ef33c082de9667b4dcd35179a116cca94d,Yury Selivanov,2017-03-29 23:12:15+00:00,"pool: Add another level of indirection to the pool internal logic

Make internal connection pool queue reference a new intermediate
object -- PoolConnectionHolder -- instead of Connections directly.

PoolConnectionHolder fully encapsulates the management of one
connection:

* connection logic;
* handling closed connections;
* handling connections that exceeded max-queries quota; etc.

The new logic guarantees that old and new connections are always
added back to the pool (1), removes a deadlock in pool.acquire (2),
uses a LIFO queue to take advantage of ""min_size"" pool
parameter (3).",False,386,261,125,0.5113636363636364,0.7954545454545454,0.8068181818181818,8930,4346,6136,371,1.9271916790490342,65.22522038167966,26.08823529411765,45.26470588235294,272.85461628602576,3.164027815086279,2465.4574445444796,136.9698580302489,0.09095153876200852
255,be55d5d20f89ac1542efb066aa88095c9932002d,Yury Selivanov,2017-03-30 02:02:27+00:00,pool: Make sure PoolConnectionProxy metaclass proxies only methods,False,14,9,5,0.0,0.0,0.0,8934,4349,6139,371,1.9286775631500743,65.2138673257562,26.11764705882353,45.3235294117647,273.2690303181847,3.1631634693479835,2468.063947642274,137.11466375790414,0.09108967677272818
256,0d19d9620452cb5ad7ac6a00e5972da93cb0fc93,Yury Selivanov,2017-03-30 02:46:40+00:00,"Rollback any active transactions in Connection.reset().

In detail:

1. If there is an active transaction, `Connection.reset()` will
   rollback it, along with issuing a warning.  Both transactions
   started with `Connection.transaction()` and manually started with
   `Connection.execute('BEGIN;')` are supported.

2. It's no longer possible to start a transaction using
   `Connection.transaction()` API if the connection is in a
   manually started transaction.

3. New `assertLoopErrorHandlerCalled` helper method for
   asyncpg TestCase.",False,110,104,6,0.3142857142857143,0.8285714285714286,1.0,9029,4414,6210,372,1.9321533923303835,64.79450782594958,26.176470588235293,45.23529411764706,272.50157554402233,3.1725436155834092,2448.269398222772,136.0149665679318,0.09083385851467407
257,660716681d5380e380bdb70c97f70f82172c4f3b,Yury Selivanov,2017-03-30 15:34:05+00:00,pool: Simplify code,False,4,1,3,1.0,1.0,1.0,9027,4414,6209,372,1.9321533923303835,64.79511397955712,26.176470588235293,45.23529411764706,272.50157554402233,3.1725436155834092,2448.269398222772,136.0149665679318,0.09083385851467407
258,2e346c12e5145ecde21c5ad41e80442c605a4587,Elvis Pranskevichus,2017-03-30 17:55:22+00:00,Fix inclusion of DETAIL and HINT in Postgres messages.,False,40,28,12,1.0,1.0,1.0,9043,4422,6224,372,1.93519882179676,64.79511397955712,26.176470588235293,45.23529411764706,272.50157554402233,3.1725436155834092,2448.269398222772,136.0149665679318,0.09083385851467407
259,0dd8fb6ce9eea8a71b6a9b4693a66e8cfd761d20,Elvis Pranskevichus,2017-03-30 19:13:42+00:00,"Fix running of setup.py test with recent setuptools.

Referencing ""setup"" in the ""test_suite"" setup() argument leads to
setup.py being executed twice, which leads to a broken command
behaviour.",False,44,24,20,0.5,0.5,1.0,9055,4426,6228,378,1.9396170839469808,65.89273168397087,25.428571428571427,43.94285714285714,264.71581624276456,3.081899512281026,2378.318843987836,132.1288246659909,0.08823860541425481
260,749d857a21f0b64a8274dafba7dd70b6266d339f,Elvis Pranskevichus,2017-03-30 19:54:41+00:00,"Invalidate statement cache on schema changes affecting statement result.

PostgreSQL will raise an exception when it detects that the result type of the
query has changed from when the statement was prepared.  This may happen, for
example, after an ALTER TABLE or SET search_path.

When this happens, and there is no transaction running, we can simply
re-prepare the statement and try again.

If the transaction _is_ running, this error will put it into an error state,
and we have no choice but to raise an exception.  The original error is
somewhat cryptic, so we raise a custom InvalidCachedStatementError with the
original server exception as context.

In either case we clear the statement cache for this connection and all other
connections of the pool this connection belongs to (if any).

See #72 and #76 for discussion.

Fixes: #72.",False,334,274,60,0.4818181818181818,0.9545454545454546,0.7545454545454545,9267,4533,6349,420,1.9378612716763006,66.68513611150937,25.22222222222222,43.52777777777778,262.89281148220374,2.9845444264069205,2341.8337555641224,130.10187530911793,0.08763093716073453
261,1674dece80be8808aecf6755ee713b36cc052487,Elvis Pranskevichus,2017-03-30 23:41:54+00:00,"Implement conistent handling of timeouts.

The timeout logic is currently a bit of a mess.  This commit attempts to
tidy things up.

Most importantly, the timeout budget is now applied consistently to the
_entire_ call, whereas previously multiple consecutive operations used
the same timeout value, making it possible for the overall run time to
exceed the timeout.

Secondly, tighten the validation for timeouts: booleans are not
accepted, and neither any value that cannot be converted to float.",False,184,150,34,0.3448275862068966,0.0,0.39655172413793105,9346,4590,6411,423,1.947142857142857,65.72477133708384,25.61111111111111,44.388888888888886,269.4775192897048,2.9995585724974556,2413.8501916026066,134.10278842236707,0.08982583976323491
262,4fdc1dbcf244fdf6e435770df448acc77533f86a,Elvis Pranskevichus,2017-03-31 00:06:41+00:00,"Add Amazon Redshift detection.

Fixes: #29.",False,22,15,7,0.0,1.0,1.0,9354,4596,6418,424,1.9485714285714286,65.7164894987248,25.61111111111111,44.388888888888886,269.4775192897048,2.9995585724974556,2413.8501916026066,134.10278842236707,0.08982583976323491
263,a3e9cb4538a3882aa076ce5b7908203a5f55a279,Yury Selivanov,2017-03-31 15:22:49+00:00,"Use anonymous prepared statements when the cache is off.

`Connection.fetch()` and similar methods will now use anonymous
prepared statements when the statements cache is off.  This makes
it possible to use a limited subset of asyncpg functionality with
pgbouncer, and optimizes use of PostgreSQL server resources.",False,111,83,28,0.8387096774193549,0.8387096774193549,0.7096774193548387,9415,4626,6450,441,1.9502840909090908,65.69371535701194,25.666666666666668,44.47222222222222,270.22450664934166,2.997659956709951,2418.454352073209,134.35857511517827,0.09007483554978052
264,bcb9de0a9989b0c734a5ee59f838b791556aa5eb,Thomas Bartelmess,2017-03-31 15:30:16+00:00,Added test case for an enum inside of an array [PR #77],False,17,17,0,1.0,1.0,1.0,9432,4633,6463,441,1.9489361702127659,65.6836104827387,25.666666666666668,44.47222222222222,270.22450664934166,2.997659956709951,2418.454352073209,134.35857511517827,0.09007483554978052
265,424760d38fb69457874040a202573c40e718fc9e,Yury Selivanov,2017-03-31 17:17:53+00:00,"Make 'timeout' arg of Connection.executemany a keyword-only arg.

Backwards compatibility will be preserved until 0.11.",False,71,70,1,0.17391304347826086,1.0,0.6304347826086957,9501,4663,6513,450,1.9504950495049505,65.63719640155439,25.75,44.638888888888886,271.6383701488085,2.996658794646842,2431.708687822437,135.0949271012465,0.09054612338293615
266,1b3a847ceafed00f40ec48a0de426858d2ae3c06,Yury Selivanov,2017-03-31 17:19:44+00:00,"Expose some of Connection methods directly on the Pool object.

Specifically Pool now implements the following methods:

 * Pool.execute()
 * Pool.executemany()
 * Pool.fetch()
 * Pool.fetchrow()
 * Pool.fetchval()

Fixes: #39.",False,142,141,1,1.0,1.0,0.6831683168316832,9641,4739,6592,450,1.9439775910364145,65.45327173855804,26.333333333333332,45.47222222222222,276.863802365092,3.021876659570589,2463.1071255802653,136.83928475445921,0.09228793412169731
267,12cce923618988bbe403b285cfdbb28bae5b6ba6,Yury Selivanov,2017-03-31 18:02:45+00:00,tests: Pass loop explicitly to asyncio.sleep() in test_execute*,False,12,6,6,,,,9641,4739,6592,450,1.9439775910364145,65.45327173855804,26.333333333333332,45.47222222222222,276.863802365092,3.021876659570589,2463.1071255802653,136.83928475445921,0.09228793412169731
268,a2935aed1b83efcc0c7b9682d32ee87be585cd04,Yury Selivanov,2017-03-31 22:38:07+00:00,Add max_inactive_connection_lifetime parameter to Pool.,False,151,145,6,0.49,0.88,0.83,9780,4807,6691,457,1.9472222222222222,65.29963728669193,27.083333333333332,46.69444444444444,285.6203182896433,3.0728666621667657,2549.36825194459,141.63156955247726,0.0952067727632144
269,5ddd7fc9a9f708260cf1419b0dfb5e76c43f0e4b,Yury Selivanov,2017-04-02 16:07:12+00:00,Raise an error if connection is used after being closed,False,51,51,0,0.3783783783783784,1.0,0.7027027027027027,9831,4842,6727,457,1.948753462603878,65.2342137574129,27.083333333333332,46.69444444444444,285.6203182896433,3.0728666621667657,2549.36825194459,141.63156955247726,0.0952067727632144
270,bb98b7983616150b0be902e3b84c66a8e2f52a50,Yury Selivanov,2017-04-03 15:12:02+00:00,Rename __check_open() -> _check_open(),False,36,18,18,,,,9831,4842,6727,457,1.948753462603878,65.2342137574129,27.083333333333332,46.69444444444444,285.6203182896433,3.0728666621667657,2549.36825194459,141.63156955247726,0.0952067727632144
271,10955fdd8cd84e9174d58d4fa1dae17e7a849d6e,Yury Selivanov,2017-04-03 15:33:52+00:00,"Add new `max_cached_statement_lifetime` parameter to Connection.

The parameter allows asyncpg to refresh cached prepared statements
periodically.

See also issue #76.",False,375,302,73,0.75,1.0,0.7,10060,4948,6838,507,1.936742934051144,65.05799864933921,27.444444444444443,47.19444444444444,290.03040623735296,3.0826776971526515,2613.7399686664,145.20777603702223,0.09667680207911762
272,2495cd43d3b5efbde89d4da38920f84fc40f0025,Yury Selivanov,2017-04-03 15:43:20+00:00,Reformat docstring for create_pool() and connect(),False,130,77,53,0.0,1.0,0.0,10084,4948,6838,507,1.936742934051144,65.06727059836825,27.444444444444443,47.19444444444444,290.03040623735296,3.0826776971526515,2613.7399686664,145.20777603702223,0.09667680207911762
273,c550388cd4b6a06b8dbfe6c494126bf537c18482,Elvis Pranskevichus,2017-04-03 16:43:38+00:00,Add an SSL connection test.,False,208,205,3,0.46808510638297873,0.851063829787234,0.851063829787234,10160,4991,6892,510,1.9332443257676903,64.99135092075694,27.47222222222222,47.25,290.37342062040557,3.0792385437134984,2615.101667124023,145.28342595133466,0.09679114020680182
274,5836a8fcf4f9e4644a280f2cd5031fe0e89a3913,Yury Selivanov,2017-04-04 14:18:57+00:00,"Add support for SSL connections.

Closes: #25.",False,248,198,50,0.25274725274725274,0.4340659340659341,0.34615384615384615,10308,5069,7001,515,1.9353562005277045,64.84112533329015,27.75,47.72222222222222,294.5675874290211,3.0735211628757515,2648.9301799514265,147.1627877750793,0.09818919580967365
275,47e244431cc74cda6fbb6e036cf3112aeb349db3,Yury Selivanov,2017-04-04 15:18:15+00:00,Bump the version to 0.10.0,False,2,1,1,,,,10308,5069,7001,515,1.9353562005277045,64.84112533329015,27.75,47.72222222222222,294.5675874290211,3.0735211628757515,2648.9301799514265,147.1627877750793,0.09818919580967365
276,a0481cc70008cbc7ec389f9511206a8c10f121ba,Elvis Pranskevichus,2017-04-04 16:03:53+00:00,Skip SSL tests entirely when running tests against a remote server.,False,4,1,3,1.0,0.0,0.0,10306,5068,7000,515,1.9340369393139842,64.85033021025264,27.72222222222222,47.666666666666664,294.22457304596844,3.0769603163149046,2647.568481493803,147.08713786076686,0.09807485768198947
277,ea2f481cfba0dee5ee53a9ac4588bad808046af8,Elvis Pranskevichus,2017-04-04 16:23:21+00:00,Skip test_connection_ssl_to_no_ssl_server when testing against a remote server.,False,1,1,0,,,,10307,5069,7001,515,1.9340369393139842,64.848934371213,27.72222222222222,47.666666666666664,294.22457304596844,3.0769603163149046,2647.568481493803,147.08713786076686,0.09807485768198947
278,abc9ab2d072dc5403c730bc7fa703429595516be,Yury Selivanov,2017-04-04 18:52:42+00:00,Add .github/release_log.py to simplify changelog creation.,False,49,49,0,0.0,1.0,1.0,10307,5069,7001,515,1.9340369393139842,64.848934371213,27.72222222222222,47.666666666666664,294.22457304596844,3.0769603163149046,2647.568481493803,147.08713786076686,0.09807485768198947
279,b1f87ebea8c8259c6c054f751b97780fc0915c36,Yury Selivanov,2017-04-05 21:54:25+00:00,"Add new Connection parameter: `max_cacheable_statement_size`.

Closes: #115.",False,102,81,21,0.4444444444444444,1.0,0.4444444444444444,10367,5099,7042,523,1.9460526315789475,64.7176519043482,28.194444444444443,48.833333333333336,302.2844626012191,3.091105170868631,2723.0777695548472,151.28209830860266,0.10076148753373969
280,7b7ce99081c2614ac3791806c1ed9b6c156993d8,Yury Selivanov,2017-04-05 22:21:55+00:00,Require `command_timeout` argument of `connect()` be greater than 0.,False,10,5,5,,,,10367,5099,7042,523,1.9460526315789475,64.71754589969707,28.22222222222222,48.833333333333336,302.36563037266546,3.11135164974187,2771.13757859599,153.95208769977728,0.10078854345755511
281,8ef4459d2c5480ef36fc148cd78d7f8271a3354b,Yury Selivanov,2017-04-05 23:03:01+00:00,Unbreak tests.,False,4,2,2,,,,10367,5099,7042,523,1.9460526315789475,64.71754589969707,28.22222222222222,48.833333333333336,302.36563037266546,3.11135164974187,2771.13757859599,153.95208769977728,0.10078854345755511
282,b89fb458e3708a2d194bba98a19b80fa51895725,Elvis Pranskevichus,2017-04-06 15:06:51+00:00,"Fix SSL support in connection pool.

Closes: #119.",False,36,32,4,0.8695652173913043,0.9565217391304348,0.9565217391304348,10395,5114,7064,523,1.9461235216819974,64.68833895839212,28.22222222222222,48.833333333333336,302.36563037266546,3.11135164974187,2771.13757859599,153.95208769977728,0.10078854345755511
283,1d8f5cf10617b00ba4295ec628e6951b0bdc1e0f,Yury Selivanov,2017-04-06 19:22:24+00:00,"Make timeout in connect() consistent.

Closes: #117.",False,15,12,3,0.0,0.0,0.0,10404,5121,7072,523,1.9487516425755584,64.6731379191774,28.333333333333332,49.166666666666664,305.131860713952,3.1146530410424895,2811.417977223673,156.18988762353746,0.10171062023798397
284,66ceb8a70f3e5f91f03afd9aebd48d7b51d27961,Yury Selivanov,2017-04-06 19:24:48+00:00,Bump the version to 0.10.1,False,2,1,1,,,,10404,5121,7072,523,1.9487516425755584,64.6731379191774,28.333333333333332,49.166666666666664,305.131860713952,3.1146530410424895,2811.417977223673,156.18988762353746,0.10171062023798397
285,682c0666e35eca9fbe935ddffc0b73c724ef02cb,Yury Selivanov,2017-04-07 23:10:03+00:00,Fix test_pool_max_inactive_time_04 to pass on slow CI boxes,False,2,1,1,,,,10404,5121,7072,523,1.9487516425755584,64.6731379191774,28.333333333333332,49.166666666666664,305.131860713952,3.1146530410424895,2811.417977223673,156.18988762353746,0.10171062023798397
286,bb326fc06365b6141226f5bc3f100be75684e05c,Yury Selivanov,2017-05-04 22:49:46+00:00,"Make `timeout` param of `executemany` a keyword-only kwarg.

This commit removes a compatibility layer from the `executemany()`
function allowing to pass `timeout` as a positional argument.",False,69,1,68,0.8478260869565217,0.0,0.3695652173913043,10337,5094,7025,514,1.9472990777338604,64.7046227615063,28.25,49.0,303.6650998670799,3.1153023156643673,2795.6814514182383,155.31563618990216,0.10122169995569326
287,3354d875dece77124b7d4a41cf7d77a35e86ec38,Yury Selivanov,2017-05-05 19:20:05+00:00,Add versionchanged for `timeout` to `executemany`,False,3,3,0,,,,10340,5094,7025,514,1.9472990777338604,64.70539338022009,28.25,49.0,303.6650998670799,3.1153023156643673,2795.6814514182383,155.31563618990216,0.10122169995569326
288,f280a5669affbac57cdec252e9c6d4a9e2f956a3,Yury Selivanov,2017-05-05 20:31:40+00:00,"Refactor args parsing and config management for connect and create_pool

Added:

* `connection_class` parameter to connect() and create_pool() to
  specify a custom Connection object.

* `server_settings` parameter to connect() and create_pool() to
  set custom server connection settings.

Fixed:

* Connection pool to always create Connections with correct
  configuration.  Before, the pool could lose parameters like
  `statement_cache_size`.

Backwards Compatibility:

* connect() and create_pool() no longer accept arbitrary
  keyword arguments for server settings. Use new `server_settings`
  argument for that.",False,939,555,384,0.6,1.0,0.0,10505,5135,7139,517,1.9606815203145478,64.28124325100194,28.43243243243243,48.86486486486486,296.50489306995973,3.2600405397171306,2620.379356849498,145.57663093608326,0.0988349643566532
289,3b41bec9702009b4b2ccd6e7f33b3a92b73b531d,Yury Selivanov,2017-05-09 16:33:20+00:00,Fix typo ayncpg -> asyncpg,False,146,73,73,,,,10505,5135,7139,517,1.9606815203145478,64.28124325100194,28.43243243243243,48.86486486486486,296.50489306995973,3.2600405397171306,2620.379356849498,145.57663093608326,0.0988349643566532
290,ffb89592ae656690fd4980d1856810a5bf995043,songjy,2017-05-09 22:46:31+00:00,handle Postgres-XL for version,False,5,2,3,1.0,1.0,0.0,10507,5138,7141,517,1.9619921363040629,64.23841054811056,28.43243243243243,48.86486486486486,296.50489306995973,3.2600405397171306,2620.379356849498,145.57663093608326,0.0988349643566532
291,569dda4ff66caf36cb638c05ac38f76251a35f14,songjy,2017-05-09 22:46:31+00:00,support postgres-xl version,False,3,3,0,0.0,0.0,1.0,10508,5139,7142,517,1.9619921363040629,64.20481815434228,28.513513513513512,49.027027027027025,297.4019305718903,3.287621967298558,2629.2181252636624,146.06767362575906,0.09913397685729675
292,df64f554a7b0df885d87acb93264bf9f6edaf81e,Elvis Pranskevichus,2017-05-09 22:47:55+00:00,"Fix erroneous codec cache invalidation on internal codec aliasing.

set_builtin_type_codec() flushes the codec cache, so internal codec
aliasing (for enums and fallback) must use a version that doesn't
kill the cache.

Fixes: #133, #122.",False,58,47,11,0.08333333333333333,1.0,1.0,10535,5147,7164,517,1.9607329842931938,64.22631309330957,28.43243243243243,48.86486486486486,296.50489306995973,3.2600405397171306,2620.379356849498,145.57663093608326,0.0988349643566532
293,5662d9f545a30b647573ea80db00d859818bbc88,Elvis Pranskevichus,2017-05-10 21:27:17+00:00,"Add support for COPY OUT

This commit adds two new Connection methods: copy_from_table() and
copy_from_query() that allow copying the contents of a table or
the results of a query using PostgreSQL COPY protocol.

With help from @1st1.

Issue #21.",False,957,935,22,0.32167832167832167,0.8764568764568764,0.752913752913753,11178,5394,7603,549,1.9683143219264891,64.54941953879403,28.825,49.875,303.20656239718477,3.150270109431183,2523.677948430909,140.20433046838386,0.1010688541323949
294,5a4e8cd156ead9118f05a2e6ce87aca12e00c30a,Elvis Pranskevichus,2017-05-11 13:29:18+00:00,tests: Increase timing to allow more leeway for travis.,False,2,1,1,,,,11178,5394,7603,549,1.9683143219264891,64.54941953879403,28.825,49.875,303.20656239718477,3.150270109431183,2523.677948430909,140.20433046838386,0.1010688541323949
295,8001f6e94a6dd0f6c02a2a9536f91c7917d372e0,Elvis Pranskevichus,2017-05-11 14:53:08+00:00,tests: Increase another timeout to make travis happy.,False,2,1,1,,,,11178,5394,7603,549,1.9683143219264891,64.54941953879403,28.825,49.875,303.20656239718477,3.150270109431183,2523.677948430909,140.20433046838386,0.1010688541323949
296,128910e48b9406cbd2bd738de87c1a5c2eaa6931,Yury Selivanov,2017-05-11 15:16:33+00:00,Limit max number of arguments (closes #127),False,12,12,0,1.0,1.0,1.0,11187,5400,7610,549,1.9683544303797469,64.52263645027844,28.875,50.025,304.05457361927085,3.154531473067547,2528.097859657352,140.44988109207515,0.1013515245397569
297,2c4e894434aea919edda49f5bc5f2573a9f80ea1,Elvis Pranskevichus,2017-05-11 15:52:12+00:00,Bump another timeout for Travis.,False,2,1,1,,,,11187,5400,7610,549,1.9683544303797469,64.52263645027844,28.875,50.025,304.05457361927085,3.154531473067547,2528.097859657352,140.44988109207515,0.1013515245397569
298,10d95d43bbbc3c318e8ac6893966ed0ed7a4b5ef,Elvis Pranskevichus,2017-05-11 17:13:34+00:00,"Add support for COPY IN

This commit adds two new Connection methods: copy_to_table() and
copy_records_to_table() that allow copying data to the specified
table either in text or, in the latter case, record form.

Closes #123.
Closes #21.",False,650,640,10,0.34843205574912894,0.8780487804878049,0.7142857142857143,11599,5590,7888,559,1.9738154613466334,64.16873131971042,30.025,52.2,321.37159574352023,3.1890473969898476,2626.118311661504,145.8954617589725,0.10712386524784001
299,ccc5f7a514813a19496206a76ad4ca2cd7fb90f0,Elvis Pranskevichus,2017-05-11 20:29:06+00:00,Prohibit passing non-string instances as text arguments to queries.,False,10,8,2,0.0,1.0,1.0,11605,5590,7894,559,1.9738154613466334,64.16815159972704,30.025,52.2,321.37159574352023,3.1890473969898476,2626.118311661504,145.8954617589725,0.10712386524784001
300,e4bef17f60508a3b708af56878dc79260b42f631,Elvis Pranskevichus,2017-05-11 20:46:17+00:00,"Expand usage documentation, add FAQ.",False,452,391,61,,,,11662,5590,7894,559,1.9738154613466334,64.1635023473537,30.025,52.2,321.37159574352023,3.1890473969898476,2626.118311661504,145.8954617589725,0.10712386524784001
301,d6ba11b34b5357b512a197f30bdf21f875b3ce83,Elvis Pranskevichus,2017-05-11 20:50:10+00:00,asyncpg version 0.11.0.,False,2,1,1,,,,11662,5590,7894,559,1.9738154613466334,64.1635023473537,30.025,52.2,321.37159574352023,3.1890473969898476,2626.118311661504,145.8954617589725,0.10712386524784001
302,8f274adc306fe63133e656c6e8e063d6caeb2cc6,Yury Selivanov,2017-05-11 22:12:11+00:00,Fix release_log to support commits without 'author' meta field,False,7,5,2,0.0,0.0,1.0,11662,5590,7894,559,1.9738154613466334,64.1635023473537,30.025,52.2,321.37159574352023,3.1890473969898476,2626.118311661504,145.8954617589725,0.10712386524784001
303,4a168660229fcde73f2b45fceb5873e005a07d42,Yury Selivanov,2017-05-11 22:12:22+00:00,Remove old unused file,False,68,0,68,0.0,0.0,0.8214285714285714,11594,5548,7848,556,1.9736842105263157,64.10794944200752,30.46153846153846,53.15384615384615,328.18864702483825,3.232356304604972,2691.319809559025,149.51776719772366,0.10939621567494602
304,3b794e1831b6edfbd4e770855e4fdf6e2344f387,Lele Gaifax,2017-05-23 16:48:08+00:00,Fix a few typos in docstrings and comments,False,10,5,5,,,,11594,5548,7848,556,1.9736842105263157,64.10794944200752,30.46153846153846,53.15384615384615,328.18864702483825,3.232356304604972,2691.319809559025,149.51776719772366,0.10939621567494602
305,e08291044c1f71bea0afe2bac62a7af49ab66a43,Vitaly Burovoy,2017-05-24 12:57:05+00:00,"Fix minimal allowed range for integers

Since '0' is in the positive half, negative range is slightly wider:
abs(min_value) == (max_value + 1)",False,10,5,5,,,,11594,5548,7848,556,1.9736842105263157,64.11120006051861,30.384615384615383,52.92307692307692,326.37106392172984,3.230546697234935,2668.6972699517696,148.26095944176498,0.10879035464057656
306,dfcf1356a2f4b8486b3f647b1dbef9a758f379f2,Vitaly Burovoy,2017-05-24 12:57:05+00:00,"Correct boundaries check for int; raise OverflowError for such cases

Since there is no error in a value representation and PyLong_AsLong(-Long)
raises exactly that exception if the value exceed the destination range, it
should be OverflowError instead of ValueError. Also make error message be
similar to one from the original OverflowError raised by PyLong_AsLong.",False,68,59,9,0.0,1.0,1.0,11612,5548,7866,559,1.9736842105263157,64.11415066605174,30.615384615384617,53.717948717948715,332.56020163979093,3.238895523235073,2750.950167780352,152.83056487668622,0.1108534005465969
307,991b1ae86850c8c35a6fdd2e36b14a1fe855ddb0,Elvis Pranskevichus,2017-06-26 12:52:05+00:00,"Fix handling of NULLs in copy_records_to_table().

Fixes: #153.",False,12,9,3,0.0,1.0,1.0,11614,5549,7867,559,1.9736842105263157,64.1128694549212,30.615384615384617,53.717948717948715,332.56020163979093,3.238895523235073,2750.950167780352,152.83056487668622,0.1108534005465969
308,7aac14e22f54bd64939bf2a38d26475eebe36f64,Elvis Pranskevichus,2017-06-26 13:55:44+00:00,"Raise an error when a binary COPY FROM is attempted w/o appropriate codec.

COPY .. FROM .. (FORMAT binary) currently requires that all data is
encoded in binary format.  Hence, we need to check if we have
appropriate codecs for all columns before initiating CopyIn.

Issue: #157.",False,24,21,3,1.0,1.0,1.0,11630,5557,7879,559,1.972465581977472,64.09823046373492,30.615384615384617,53.717948717948715,332.56020163979093,3.238895523235073,2750.950167780352,152.83056487668622,0.1108534005465969
309,39b390c330ebe34ee4e01a060cefcf3faa079699,Yury Selivanov,2017-06-30 20:03:26+00:00,Fix Record.items() to support duplicate keys. See #28 for details.,False,25,13,12,1.0,1.0,1.0,11631,5558,7880,559,1.972465581977472,64.09668860000853,30.615384615384617,53.717948717948715,332.56020163979093,3.238895523235073,2750.950167780352,152.83056487668622,0.1108534005465969
310,b06114dee216f574a27a2a5248a0a9d24be51246,Yury Selivanov,2017-06-30 20:03:26+00:00,Fix Record.keys() to correctly return duplicate keys. See #28.,False,34,28,6,0.0,0.0,1.0,11653,5567,7896,559,1.9799749687108885,64.04380261659392,30.692307692307693,53.794871794871796,333.020464724987,3.2518953439272016,2753.635371090323,152.97974283835129,0.1110068215749956
311,83d08bd8f8a7cb8d60966e6499ec157744cd409a,Yury Selivanov,2017-06-30 20:03:50+00:00,Call listeners using loop.call_soon,False,20,12,8,1.0,1.0,0.0,11657,5569,7899,559,1.97875,64.03980927823157,30.692307692307693,53.794871794871796,333.020464724987,3.2518953439272016,2753.635371090323,152.97974283835129,0.1110068215749956
312,550c408ac9fe91dfb06d2d48c1a8f3b63bcd664b,Yury Selivanov,2017-06-30 20:11:43+00:00,Add one more test for records with duplicate keys (issue #28),False,13,13,0,1.0,1.0,1.0,11670,5579,7909,561,1.9775280898876404,64.02863721059674,30.692307692307693,53.794871794871796,333.020464724987,3.2518953439272016,2753.635371090323,152.97974283835129,0.1110068215749956
313,6ca1f28b45ef4b0b18dd0ad3c3b9aad0a7540ee2,Yury Selivanov,2017-06-30 20:12:26+00:00,"Make PoolConnectionProxy more dynamic. Fixes #155.

Specifically, allow proxied Connection objects to use overridden
public methods.",False,45,28,17,1.0,1.0,1.0,11681,5586,7916,563,1.972568578553616,64.01970204465266,30.743589743589745,53.87179487179487,333.57163067894004,3.251360923939894,2756.9702528927996,153.16501404960002,0.11119054355964661
314,9c32b86fb94e08cfb0e6ac4bfe72b316697d0506,Elvis Pranskevichus,2017-07-04 21:08:55+00:00,"Make sure set_type_codec() overrides core codec for all formats.

When a custom codec is set for a type, it should be called regardless of
whether its format matches the preferred format requested by the
pipeline.

Fixes: #140
Fixes: #148",False,82,72,10,0.25,1.0,1.0,11719,5610,7944,563,1.9713574097135742,63.998848473349625,30.743589743589745,53.87179487179487,333.57163067894004,3.251360923939894,2756.9702528927996,153.16501404960002,0.11119054355964661
315,1b1893df0f666171bfc7cb5d945a430d3a842a35,Vitaly Burovoy,2017-07-05 15:22:57+00:00,"Add API for receiving asynchronous notices

Notice message types are: WARNING, NOTICE, DEBUG, INFO, or LOG.
https://www.postgresql.org/docs/current/static/protocol-error-fields.html

Issue #144.",False,174,170,4,0.3076923076923077,1.0,0.9134615384615384,11878,5690,8059,565,1.9741697416974169,62.8149588718097,31.102564102564102,54.333333333333336,335.73751481878753,3.294233967636027,2764.6508691134068,153.59171495074486,0.1119125049395958
316,90725f1fa75de5e8785dc1ae28e19926b70f0099,Vitaly Burovoy,2017-07-05 15:22:57+00:00,"Implement ""as_dict"" method for PostgresMessage

Sometimes it is useful to get all non-None members, usually for logging.
Do it in a base class to avoid copy-pasting in users' code.",False,9,9,0,1.0,1.0,1.0,11729,5617,7952,563,1.972636815920398,63.93927338485346,30.794871794871796,53.94871794871795,334.0431281718901,3.2506324857114555,2758.168184844067,153.23156582467044,0.11134770939062999
317,7c6e9991ac7c9a24a252619c9817fab942ab5378,Vitaly Burovoy,2017-07-05 15:22:57+00:00,Fix typo PooledConnectionProxy=>PoolConnectionProxy,False,6,3,3,,,,11719,5610,7944,563,1.9713574097135742,63.998848473349625,30.743589743589745,53.87179487179487,333.57163067894004,3.251360923939894,2756.9702528927996,153.16501404960002,0.11119054355964661
318,35bce5a831b6ae375619b6a688470f1f6a0ef793,Vitaly Burovoy,2017-07-05 15:22:57+00:00,"New severity ""V"" field as ""severity_en"" attribute

It is identical to the regular severity ""S"", but it is never localized.

Introduced in Postgres-9.6:
https://www.postgresql.org/docs/9.6/static/protocol-error-fields.html",False,1,1,0,,,,11720,5610,7945,563,1.9713574097135742,63.9965516209441,30.743589743589745,53.87179487179487,333.57163067894004,3.251360923939894,2756.9702528927996,153.16501404960002,0.11119054355964661
319,6b484433fe18c29c90a55e3f394c28817aa2cda2,Elvis Pranskevichus,2017-07-05 15:30:08+00:00,"Make interval decoding logic match that of psycopg2.

asyncpg will now treat 12-month interval increments as 365-day spans,
instead of 12*30 day spans.  This matches psycopg2 interval decoding
logic.

Fixes: #150.",False,25,23,2,1.0,1.0,1.0,11891,5699,8068,565,1.972972972972973,62.803981455156496,31.153846153846153,54.43589743589744,336.6192231078791,3.2920148275528094,2770.0810406917976,153.89339114954439,0.11220640770262637
320,0453243b568c308cfc29447308af7251aa811f43,Elvis Pranskevichus,2017-07-05 17:30:43+00:00,"Add support for tuple exchange format for codec overrides

Connection.set_type_codec() now accepts a new `format` keyword
argument.  When set to 'tuple', it declares that the custom codec
exchanges data with the driver in a type-specific tuple format.

This allows using custom codecs for types without the need to parse
the raw binary or text data format.

This commit adds tuple exchange support for all date-time types.

The `binary` keyword argument to set_type_codec() is now deprecated
in favor of `format='text'` and `format='binary'`.",False,675,583,92,0.21505376344086022,0.7096774193548387,0.7634408602150538,12116,5759,8163,568,1.9767441860465116,62.67549228605623,31.692307692307693,56.1025641025641,350.087628756672,3.3040154916267617,2940.856255350293,163.38090307501633,0.11669587625222395
321,f072f8830c22f80463c887450a0ef6786e71ab25,Yury Selivanov,2017-07-05 19:32:42+00:00,"Refactor Connection.add_notice_callback API.

1. Rename to `Connection.add_log_listener()`
2. Fix `Connection.reset()` to reset log listeners
3. Add a new `PostgresLogMessage` class for log messages
4. Instances of `PostgresLogMessage` are immutable
5. Regenerate `exceptions/__init__`; `PostgresWarning` is now
   a subclass of PostgresLogMessage.",False,330,212,118,0.9516129032258065,0.7741935483870968,0.6129032258064516,12215,5821,8232,568,1.976997578692494,62.444062770587934,31.846153846153847,56.38461538461539,351.9394459499782,3.3051356244914993,2949.3013639584165,163.85007577546762,0.11731314864999276
322,f1177a07b8788a84b9c71492977f474aabde64ed,Yury Selivanov,2017-07-05 19:53:31+00:00,Fix typo,False,2,1,1,,,,12215,5821,8232,568,1.976997578692494,62.444062770587934,31.846153846153847,56.38461538461539,351.9394459499782,3.3051356244914993,2949.3013639584165,163.85007577546762,0.11731314864999276
323,a5413eb010e39eee1350adfa7a840162eb69869a,Elvis Pranskevichus,2017-07-06 20:54:33+00:00,"Implement binary format codec for numeric type

Fixes: #157",False,360,354,6,0.0,1.0,1.0,12266,5842,8271,569,1.977025392986699,62.42284016518477,31.846153846153847,56.38461538461539,351.9394459499782,3.3051356244914993,2949.3013639584165,163.85007577546762,0.11731314864999276
324,d27dda72d9277d51add2883c6d644d1d1c05962f,Elvis Pranskevichus,2017-07-06 20:59:10+00:00,"Do not split out seconds when decoding interval in tuple mode.

This makes interval consistent with other datetime types.",False,33,14,19,,,,12264,5842,8271,569,1.977025392986699,62.42337924541645,31.846153846153847,56.38461538461539,351.9394459499782,3.3051356244914993,2949.3013639584165,163.85007577546762,0.11731314864999276
325,fdb48afae6b7173c4dfdcb5d04a46ec8b4083ddc,Elvis Pranskevichus,2017-07-07 16:06:40+00:00,Add proper cleanup in log listener test.,False,28,16,12,0.0,1.0,1.0,12281,5851,8287,569,1.977025392986699,62.390254587986036,31.846153846153847,56.38461538461539,351.9394459499782,3.3051356244914993,2949.3013639584165,163.85007577546762,0.11731314864999276
326,3381b9116800468cccde5908cf1af09e359aae5b,Yury Selivanov,2017-07-07 16:06:40+00:00,Bump the version to 0.12.0,False,2,1,1,,,,12281,5851,8287,569,1.977025392986699,62.390254587986036,31.846153846153847,56.38461538461539,351.9394459499782,3.3051356244914993,2949.3013639584165,163.85007577546762,0.11731314864999276
327,7f533b810961b2f3694e1e86331d482cbde0c874,Elvis Pranskevichus,2017-07-07 16:06:40+00:00,"Fix log listener tests.

Make sure client_min_messages is of the appropriate level when testing
log handlers.",False,19,16,3,1.0,1.0,1.0,12277,5848,8284,569,1.977025392986699,62.39894474505807,31.846153846153847,56.38461538461539,351.9394459499782,3.3051356244914993,2949.3013639584165,163.85007577546762,0.11731314864999276
328,23394c9d9618ca8bc93470fa5225b431cb03aac1,khazhyk,2017-08-04 18:32:36+00:00,"Document that single fetches can return None

fetchrow() and fetchval() return None if no result, as opposed to
for example raising.",False,6,4,2,,,,12283,5851,8287,569,1.977025392986699,62.38971550775437,31.846153846153847,56.38461538461539,351.9394459499782,3.3051356244914993,2949.3013639584165,163.85007577546762,0.11731314864999276
329,e0c44ced109c26715bf70bd85a6645307a8fb893,Elvis Pranskevichus,2017-09-07 19:47:10+00:00,"Fix type introspection being very slow on large databases

Stop using CTEs in the type introspection query, otherwise it runs for
ages on databases with a large number of composite attributes (i. e.
tons of tables with tons of columns).

Fixes: #186",False,185,115,70,1.0,1.0,1.0,12328,5876,8317,574,1.9807228915662651,63.31092422389237,31.125,55.05,343.60231963574284,3.2350072338792115,2878.227287617031,159.90151597872398,0.11453410654524761
330,327058f8af45a779955745f9846325ee4920b8ee,Elvis Pranskevichus,2017-09-08 16:25:15+00:00,"Fix copy tests on PostgreSQL < 9.4

The force_null option was added in PostgreSQL 9.4",False,11,9,2,0.0,1.0,1.0,12335,5882,8323,574,1.9819277108433735,63.29890444912307,31.2,55.125,344.31708727349974,3.2522883398699953,2902.902762246823,161.27237568037907,0.11477236242449991
331,eaf298b4dc49d9db3396377d29860a76924c81fa,Elvis Pranskevichus,2017-09-08 17:06:46+00:00,"Drop support for PostgreSQL 9.1

PostgreSQL version 9.1 is no longer supported by the upstream, and it's
not worth the maintenance overhead.",False,141,3,138,1.0,0.0,0.0,12210,5875,8212,573,1.9795180722891565,63.30960098243595,31.075,54.975,342.8890143165164,3.2404463226377835,2869.7413203663555,159.43007335368645,0.11429633810550548
332,3f9523c2b04ff973e70047b4c0b8a288f60ff8d8,Elvis Pranskevichus,2017-09-08 17:17:34+00:00,"Fix DeprecationWarning in tests

assertRaisesRegexp is deprecated",False,6,3,3,,,,12210,5875,8212,573,1.9795180722891565,63.30960098243595,31.075,54.975,342.8890143165164,3.2404463226377835,2869.7413203663555,159.43007335368645,0.11429633810550548
333,76d1491ed7f2a8cca7fb1a7a5b1f534c6fc52a19,Elvis Pranskevichus,2017-09-11 18:23:51+00:00,"ci: Stop relying on Travis' version of PostgreSQL

We now install the necessary version of PostgreSQL explicitly.  This
allows testing on PostgreSQL versions that are not supported by Travis
directly.

And also, do an explicit check that the version of the server being
tested corresponds to the PGVERSION environment variable.",False,164,117,47,0.15,1.0,1.0,12253,5895,8240,578,1.9807692307692308,64.19011698432548,30.317073170731707,53.68292682926829,334.8633731496392,3.1625097061111314,2803.381135039267,155.74339639107043,0.11162112438321306
334,8a32fc4b68d97ea91d7e887e7854f836c135ea12,Elvis Pranskevichus,2017-09-12 20:23:50+00:00,"Do not attempt to connect to Unix sockets on Windows when host is not set

When the host is not passed explicitly to `connect()`, asyncpg tries
to find a suitable socket in a few known directories.  On Windows, where
there are no file sockets, we should connect directly to `localhost`
instead.

Fixes: #184.",False,20,17,3,0.625,0.625,0.625,12267,5904,8250,578,1.9807923169267707,64.16972715812105,30.365853658536587,53.75609756097561,335.4952195088937,3.158214110916374,2805.974836212444,155.88749090069135,0.11183173983629788
335,d085d2cc8c0ef23f6c8da22fca8c439a3dc8c0c5,Elvis Pranskevichus,2017-09-12 20:24:04+00:00,"Warn when there are active listeners on a connection that is released

Closes: #190.",False,88,82,6,1.0,1.0,0.6727272727272727,12438,5998,8370,589,1.9799528301886793,64.68652012531727,29.857142857142858,52.833333333333336,329.73627163698137,3.0979012992625896,2751.490121826101,152.86056232367233,0.10991209054566044
336,089ac81832c1bdf720e57c3ad236b6454ca5ff41,Elvis Pranskevichus,2017-09-12 20:24:04+00:00,"Guard against incorrect use of resources associated with a connection

We already check for attempts to use connection methods after the
connection has been returned to the pool.  This adds a similar check
for objects associated with the connection: prepared statements and
cursors.

Issue: #190.",False,137,116,21,0.16279069767441862,0.9767441860465116,0.9767441860465116,12362,5954,8314,587,1.9821002386634845,64.83901176455223,29.785714285714285,52.61904761904762,328.23350197183663,3.1085416248700244,2755.051420949502,153.05841227497234,0.10941116732394554
337,93bf26f371fc26a81acce8a77e203ac668c46981,Elvis Pranskevichus,2017-09-12 20:52:32+00:00,Document the use-after-release changes.,False,22,22,0,0.0,1.0,0.0,12460,5998,8370,589,1.9799528301886793,64.69971138894041,29.857142857142858,52.833333333333336,329.73627163698137,3.0979012992625896,2751.490121826101,152.86056232367233,0.10991209054566044
338,c484a4708ed130924e97652b23ef92ac9afd13f9,Elvis Pranskevichus,2017-09-12 23:42:58+00:00,"Add a test for cursors on a standby replica.

Closes: #66.",False,13,12,1,1.0,1.0,1.0,12471,6006,8379,589,1.977620730270907,64.68949932868018,29.857142857142858,52.833333333333336,329.73627163698137,3.0979012992625896,2751.490121826101,152.86056232367233,0.10991209054566044
339,b6fe01867005a1a69296b371e5bb2eea0f6f951c,Elvis Pranskevichus,2017-09-13 13:28:01+00:00,"Clarify the argument/parameter count mismatch exception

Fixes: #178.",False,48,40,8,1.0,1.0,1.0,12484,6012,8390,589,1.9764705882352942,64.67601654929472,29.857142857142858,52.833333333333336,329.73627163698137,3.0979012992625896,2751.490121826101,152.86056232367233,0.10991209054566044
340,f29de232cd8434ca0f83d87ec5194750dbf2f0bf,Fantix King,2017-09-13 13:28:31+00:00,Fix `TypeError` on `get_attributes` when result has no columns,False,7,7,0,1.0,1.0,1.0,12488,6015,8393,589,1.9741480611045827,64.67115049859223,29.857142857142858,52.833333333333336,329.73627163698137,3.0979012992625896,2751.490121826101,152.86056232367233,0.10991209054566044
341,50edd8c82b177983ecb71b65ab027653d36ca04e,Yury Selivanov,2017-09-15 15:50:05+00:00,protocol: Use try-finally explicitly every time we create a waiter,False,204,129,75,,,,12494,6018,8397,589,1.9730046948356808,64.66272468147923,29.857142857142858,52.833333333333336,329.73627163698137,3.0979012992625896,2751.490121826101,152.86056232367233,0.10991209054566044
342,eec98b0b69e068551f4cea6653599ff90f090061,Elvis Pranskevichus,2017-09-25 13:52:30+00:00,"Call correct parent constructor in InterfaceWarning.__init__

Thanks to @s0undt3ch for catching this.",False,2,1,1,,,,12494,6018,8397,589,1.9730046948356808,64.66272468147923,29.857142857142858,52.833333333333336,329.73627163698137,3.0979012992625896,2751.490121826101,152.86056232367233,0.10991209054566044
343,fa6dbc46bc6d47446d903bd9a1e1048564895f4d,Pedro Algarvio,2017-09-27 22:21:52+00:00,"Allow grabbing the version information programmatically.

Yes, we could use `pkg_resources`, but that imposes a serious slowdown,
see https://github.com/pypa/setuptools/issues/510 for context.",False,42,28,14,,,,12508,6029,8408,589,1.9730046948356808,65.06135000083597,29.80952380952381,52.785714285714285,329.68865258936233,3.0859965373578278,2751.4663123022915,152.8592395723496,0.10989621752978743
344,5e18bc3fc06be8fa33c99d9f3dc99722731d95b8,Elvis Pranskevichus,2017-09-27 22:29:40+00:00,Set version to 0.13.0.dev0,False,2,1,1,,,,12508,6029,8408,589,1.9730046948356808,65.06135000083597,29.80952380952381,52.785714285714285,329.68865258936233,3.0859965373578278,2751.4663123022915,152.8592395723496,0.10989621752978743
345,a8d871c0039d13c247fd4e8e9b278d0607e521fc,Elvis Pranskevichus,2017-09-28 17:44:01+00:00,Add a flake8 check to the testsuite,False,51,46,5,0.08695652173913043,1.0,1.0,12546,6048,8433,595,1.9801169590643275,65.69125633594734,29.162790697674417,51.604651162790695,322.06798625007485,3.025857083000669,2687.501979458052,149.3056655254474,0.1073559954166916
346,57c9ffdc75448054f1370f87d3d0d9f801f9353e,Elvis Pranskevichus,2017-10-02 15:05:45+00:00,"Use the general statement cache for type introspection

Type introspection queries now rely on the general statement cache
instead of ad-hoc prepared statements.

Fixes: #198.",False,110,77,33,1.0,1.0,1.0,12590,6067,8464,602,1.9720605355064027,65.20095468985224,29.162790697674417,51.55813953488372,321.17385971210257,3.036832421654944,2679.003576457434,148.83353202541306,0.10705795323736748
347,e54f02e6e5cddd0d6ec30bd7e2cedc2a3c6c3637,Elvis Pranskevichus,2017-10-10 14:17:34+00:00,"Fix issues with inet type I/O

The inet codec is confusing the network prefix length with the network
mask length, which causes incorrect wire encoding.  This was masked by a
symmetrical bug in the decoder.

Fixes #37.",False,100,83,17,0.0,0.0,1.0,12628,6074,8500,607,1.9755529685681024,65.2048145115127,29.27906976744186,51.83720930232558,323.5736646569956,3.0358246697169595,2704.0683935790835,150.2260218655047,0.10785788821899851
348,9744adee7c4143717328be43dc1d2378f643b2ad,Vladimir Goncharov,2017-10-10 16:43:20+00:00,Handle inactive connection closes while stored in the pool,False,24,23,1,0.9166666666666666,0.0,1.0,12650,6085,8512,609,1.9755813953488373,65.19829734044025,29.325581395348838,51.906976744186046,324.11928395385246,3.034679497060159,2707.591966780288,150.42177593223826,0.10803976131795077
349,6581e58cf5e3010a6de2ecf6a531424f65b3501a,Elvis Pranskevichus,2017-10-10 21:09:19+00:00,"Add a test for run_until_complete(asyncpg.create_pool())

This is to see if #202 reproduces in CI.",False,5,5,0,1.0,1.0,1.0,12655,6089,8516,609,1.9744483159117305,65.19198492422244,29.325581395348838,51.906976744186046,324.11928395385246,3.034679497060159,2707.591966780288,150.42177593223826,0.10803976131795077
350,d24c22183e8bba3cc888e690aa451fa49eb8d36f,Elvis Pranskevichus,2017-10-18 19:28:58+00:00,Fix lint errors and make sure flake8 actually runs on CI,False,54,30,24,0.5,1.0,1.0,12659,6088,8520,609,1.9721254355400697,65.19577102738671,29.372093023255815,51.97674418604651,324.53279521078946,3.033710504812097,2708.6405461569725,150.48003034205408,0.10817759840359646
351,12497eed670d80ea747ed0fb92819c29d84afb36,Elvis Pranskevichus,2017-10-18 20:04:52+00:00,Regenerate asyncpg.exceptions.,False,12,4,8,,,,12655,6086,8518,609,1.9732558139534884,65.19683750337505,29.372093023255815,51.97674418604651,324.53279521078946,3.033710504812097,2708.6405461569725,150.48003034205408,0.10817759840359646
352,d2369549ffbcd07a74380d585d087bdb51765ffc,Elvis Pranskevichus,2017-10-18 20:19:47+00:00,Add support for data types added in PostgreSQL 10.,False,35,33,2,0.0,1.0,1.0,12661,6086,8524,609,1.9732558139534884,65.1794928272252,29.372093023255815,51.97674418604651,324.53279521078946,3.033710504812097,2708.6405461569725,150.48003034205408,0.10817759840359646
353,9ad6625a1f7db16f54a1354b6ef9ff1401306b81,Elvis Pranskevichus,2017-10-19 18:10:26+00:00,"Remove the deprecated ""binary"" parameter from Connection.set_type_codec

set_type_codec(..., binary=True) was deprecated in 0.12.0.",False,38,3,35,0.8571428571428571,0.8571428571428571,0.25,12629,6069,8498,609,1.9720605355064027,65.1975533982791,29.325581395348838,51.906976744186046,323.9208726404124,3.034000459014203,2704.644527082482,150.25802928236016,0.10797362421347079
354,59228c764f9b10203ebd8c5a717906a290d51a7e,Elvis Pranskevichus,2017-10-19 19:28:15+00:00,Run tests directly when testing the system-installed version of asyncpg,False,25,22,3,,,,12643,6074,8503,614,1.9720605355064027,65.18680905839962,29.441860465116278,52.02325581395349,324.19086427935287,3.0572562729676913,2704.914518721422,150.27302881785684,0.10806362142645091
355,572e4e973590f511a4e209490fa0b32926d491ec,Elvis Pranskevichus,2017-10-20 13:20:58+00:00,asyncpg v0.13.0,False,2,1,1,,,,12643,6074,8503,614,1.9720605355064027,65.18680905839962,29.441860465116278,52.02325581395349,324.19086427935287,3.0572562729676913,2704.914518721422,150.27302881785684,0.10806362142645091
356,4b3f9935b0da11ab42b513076ad0743aa209e254,Elvis Pranskevichus,2017-10-22 00:59:16+00:00,Open for 0.14.0 development.,False,2,1,1,,,,12643,6074,8503,614,1.9720605355064027,65.18680905839962,29.441860465116278,52.02325581395349,324.19086427935287,3.0572562729676913,2704.914518721422,150.27302881785684,0.10806362142645091
357,3e43fcf5c68d425dc7da6dd330d033dd11af8ece,Yury Selivanov,2017-10-23 19:23:46+00:00,Make prepared statement uid generator global,False,24,17,7,1.0,1.0,1.0,12653,6079,8508,614,1.9720605355064027,65.07248037953558,29.511627906976745,52.093023255813954,324.4409779421939,3.068884179944435,2705.219921773823,150.28999565410135,0.10814699264739791
358,4a3713f7fb95cb2c09c818c8f0d4b33fdf1a47f3,Elvis Pranskevichus,2017-10-25 03:10:49+00:00,"Document pgbouncer-related prepared statement breakage

Fixes: #121.
Fixes: #149.",False,153,125,28,0.0,0.17777777777777778,0.5111111111111111,12704,6098,8551,614,1.9779069767441861,64.97569401815367,29.72093023255814,52.44186046511628,326.750038215755,3.1026977500952144,2724.9956653029294,151.388648072385,0.10891667940525163
359,c04576db852ded2eb193a01be9dd524fe4e29f56,Elvis Pranskevichus,2017-10-31 20:38:49+00:00,"Fix unaligned access issues in host-network byte I/O on ARM

Per report in #216 and https://bugs.debian.org/872408, the current
implementation may raise SIGBUS on ARM platforms that do not support
unaligned memory access.

Fix this by using a stack variable and memcpy, which gives the compiler
more opportunity to generate correct code.  While at it, implement
hton* and ntoh* in terms of byteswap intrinsics with an open-coded
fallback.  This drops the dependency on the platform's implementation,
which might not necessarily be consistently fast.

Smoke-tested locally on cross-compiled armv5tel-softfloat-linux-gnueabi
and armv6j-hardfloat-linux-gnueabi with QEMU TCG.

Fixes: #216.",False,302,218,84,1.0,1.0,1.0,12702,6096,8549,614,1.9779069767441861,64.98297086654863,29.72093023255814,52.44186046511628,326.750038215755,3.1026977500952144,2724.9956653029294,151.388648072385,0.10891667940525163
360,afc1038f42b480c43ad60f3f70915895da0bd931,Mathias Fussenegger,2017-11-04 21:13:14+00:00,"Add CrateDB detection

To support connection pooling if used with
https://github.com/crate/crate

This depends on https://github.com/crate/crate/pull/6476
(So this will only work starting with CrateDB 2.3)",False,7,7,0,0.0,1.0,1.0,12709,6102,8555,615,1.9790697674418605,64.9785542871078,29.72093023255814,52.44186046511628,326.750038215755,3.1026977500952144,2724.9956653029294,151.388648072385,0.10891667940525163
361,1fa12fe2c244f05e923e44333f3c5d29cd766627,Elvis Pranskevichus,2017-11-14 19:29:07+00:00,"Parse server version x.y as x.0.y, when x is >= 10

Since PostgreSQL 10 the versioning scheme has changed.
10.x really means 10.0.x.  While parsing 10.1
as (10, 1) may seem less confusing, in practice most
version checks are written as version[:2], and we
want to keep that behaviour consistent, i.e not fail
a major version check due to a bugfix release.",False,18,13,5,0.3333333333333333,0.3333333333333333,1.0,12717,6104,8557,620,1.9802325581395348,65.04813395829068,29.790697674418606,52.51162790697674,327.206310348389,3.1140275056110163,2728.8981083371355,151.60545046317426,0.10906877011612962
362,7b6c083377bde8d2f56cf65d54d157a590551caf,Vitaliy Burovoy,2017-11-14 19:31:00+00:00,"Fix issues with timetz type I/O

For timetz an offset is applied to a time itself, it is not a time zone offset.
This was masked by a symmetrical bug in the encoder.

An offset value is still passed in a tuple (timetz_decode_tuple) as it was
received from Postgres.",False,29,27,2,0.0,1.0,1.0,12738,6116,8574,622,1.9790940766550522,65.04515518226155,29.790697674418606,52.51162790697674,327.206310348389,3.1140275056110163,2728.8981083371355,151.60545046317426,0.10906877011612962
363,bdfdd898e2f6b91a0c00ac520acb7cabb2782158,Elvis Pranskevichus,2017-11-15 20:05:00+00:00,"Support timeouts in Connection.close() and Pool.release()

Connection.close() and Pool.release() each gained the new timeout
parameter.  The pool.acquire() context manager now applies the
passed timeout to __aexit__() as well.

Connection.close() is now actually graceful.  Instead of simply dropping
the connection, it attempts to cancel the running query (if any), asks
the server to terminate the connection and waits for the connection to
terminate.

To test all this properly, implement a TCP proxy, which emulates sudden
connectivity loss (i.e. packets not reaching the server).

Closes: #220",False,728,648,80,0.4361111111111111,0.8277777777777777,0.7222222222222222,13279,6484,8971,654,2.0055370985603544,64.29631617647603,29.977777777777778,52.48888888888889,325.80625560157785,3.1148931423324697,2676.028418008679,148.6682454449267,0.1086020852005259
364,b4ce74039884853a2b02f77c1a8ef61e1cb00ee7,Elvis Pranskevichus,2017-11-15 20:05:00+00:00,"Consistently use postgres/postgres as database/user pair in tests

When running against a temporary cluster, make sure the default
superuser and database name are 'postgres'.

When PGHOST environment variable is specified, rely on the default
connection spec heuristics.",False,137,77,60,1.0,0.9,0.7,12755,6134,8586,623,1.9803240740740742,64.97331750950765,29.953488372093023,52.81395348837209,328.9252542112238,3.1330549897547795,2737.7523461798596,152.0973525655478,0.10964175140374122
365,695b8f0a477be0db3fe1a0c9feb13b28fe1ee174,Elvis Pranskevichus,2017-11-28 17:46:01+00:00,"Catch exceptions in asynchronous tasks when testing

Currently, exceptions in asynchronous tasks are logged by the loop,
but do not cause tests to fail.  Fix this.",False,71,64,7,0.32558139534883723,0.3023255813953488,0.23255813953488372,13335,6525,9016,656,2.0088202866593163,64.20459063384737,30.31111111111111,52.955555555555556,328.9531398166104,3.154328577767905,2704.15915607265,150.2310642262584,0.10965104660553676
366,46f468c9a09f734bdf522a1d4c452a09cfa9c638,Miroslav Šedivý,2017-11-30 14:20:45+00:00,"fix Range.__hash__

remove `other` from parameter list of `__hash__`",False,12,11,1,0.0,1.0,1.0,13345,6530,9025,656,2.009922822491731,64.19869155799385,30.31111111111111,52.955555555555556,328.9531398166104,3.154328577767905,2704.15915607265,150.2310642262584,0.10965104660553676
367,59e2878bef959cfab35ebd19c211477c1daf1101,Elvis Pranskevichus,2017-12-04 02:15:46+00:00,"Guard transaction methods against underlying connection release

Similarly to other connection-dependent objects, transaction methods
should not be called once the underlying connection has been released to
the pool.

Also, add a special handling for the case of asynchronous generator
finalization, in which case it's OK for `Transaction.__aexit__()` to be
called _after_ `Pool.release()`, since we cannot control when the
finalization task would execute.

Fixes: #232.",False,139,126,13,0.28378378378378377,0.9054054054054054,0.8918918918918919,13458,6593,9108,669,2.0164835164835164,64.12907173048048,30.466666666666665,53.266666666666666,331.45639548170044,3.1565363635106367,2722.7593526305373,151.26440847947435,0.11048546516056677
368,b10e883ee885f7a99886c9b9eba9f065fe4cfe18,Vitaly Burovoy,2017-12-20 20:47:41+00:00,"Fix python examples + typo

In examples functions should have an empty terminaton line.",False,12,9,3,0.0,1.0,0.0,13464,6593,9108,669,2.0164835164835164,64.12768653502692,30.466666666666665,53.266666666666666,331.45639548170044,3.1565363635106367,2722.7593526305373,151.26440847947435,0.11048546516056677
369,b04556e9e5fcfc769f3e0c086fe2604c30e0ea9f,Vitaly Burovoy,2017-12-20 20:47:41+00:00,"Invalidate type cache on schema changes affecting statement result.

It is a logical continuation of the commit
749d857a21f0b64a8274dafba7dd70b6266d339f

Previously if a query used a composite type and it has changed then asyncpg
raised either IndexError or RuntimeError with no easy way to recover from it.

Unlike cases like in the mentioned commit here we can't reprepare and resend
the query because we fail at the very end in attempt to create a Record from
the response. It means the query is already done at the server's side.

Everything we can do in such case is to invalidate caches and mark the failed
prepared statement as ""closed"", it prevents getting it from the connection's
statement cache and the next query will be reprepared.
After all we have to reraise the exception to the caller.

For handling schema changes a new Connection.reload_schema_state() is added.
Now this method invalidates internal cached objects after changes in DB's
schema. In future it can do more actions to reflect schema changes to
internal representation.
It is intended for being called from callbacks for NOTIFY generated
from EVENT TRIGGERs or for using in migrations.

The other change is replacing RuntimeError=>OutdatedSchemaCacheError
when types in a composite type are not equal:
1. it is easier to catch;
2. it is easier to parse because now there is the composite type's name appear.

It can be considered as affecting compatibility with previous releases.",False,327,321,6,0.07602339181286549,0.9824561403508771,0.9239766081871345,13758,6753,9282,708,2.011969532100109,64.08055590488028,30.466666666666665,53.266666666666666,331.45639548170044,3.1565363635106367,2722.7593526305373,151.26440847947435,0.11048546516056677
370,7c3f96727b7ad5ca1e6c469f9b395c75a7836e03,Elvis Pranskevichus,2017-12-29 15:54:06+00:00,Mark Connection.reload_schema_state() as added in 0.14.0.,False,2,2,0,,,,13760,6753,9282,708,2.011969532100109,64.08027238230763,30.466666666666665,53.266666666666666,331.45639548170044,3.1565363635106367,2722.7593526305373,151.26440847947435,0.11048546516056677
371,45f0e2ab019feab70473bbb0797698dda87d09e7,Elvis Pranskevichus,2017-12-29 15:55:30+00:00,asyncpg v0.14.0,False,2,1,1,,,,13760,6753,9282,708,2.011969532100109,64.08027238230763,30.466666666666665,53.266666666666666,331.45639548170044,3.1565363635106367,2722.7593526305373,151.26440847947435,0.11048546516056677
372,8cec66f6adabc3cd065af1767b61e09662fd60c4,Elvis Pranskevichus,2018-01-12 20:36:09+00:00,Post-release version bump for 0.15.0 development.,False,2,1,1,,,,13760,6753,9282,708,2.011969532100109,64.08027238230763,30.466666666666665,53.266666666666666,331.45639548170044,3.1565363635106367,2722.7593526305373,151.26440847947435,0.11048546516056677
373,a3b40663937013ec5a0c8cd35bcb20a40335d417,Omer Katz,2018-01-20 16:16:18+00:00,Fix typo.,False,2,1,1,,,,13760,6753,9282,708,2.011969532100109,64.08027238230763,30.466666666666665,53.266666666666666,331.45639548170044,3.1565363635106367,2722.7593526305373,151.26440847947435,0.11048546516056677
374,a19ce50f81d47cce6c74dc112b9b5ffead314b76,vangheem,2018-01-20 19:26:39+00:00,Connection.prepare should not use statement cache,False,86,51,35,0.5833333333333334,0.8333333333333334,0.5833333333333334,13776,6760,9294,709,2.01085776330076,64.06969713887273,30.466666666666665,53.266666666666666,331.45639548170044,3.1565363635106367,2722.7593526305373,151.26440847947435,0.11048546516056677
375,803c115502e2e5a2af5f07fafd834d4b84369ef4,Elvis Pranskevichus,2018-01-21 17:44:03+00:00,"Initialize statement codecs immediately after Prepare

Currently the statement codecs are populated just before the first Bind
is issued.  This is problematic as in the time since Prepare, the codec
cache for derived types (arrays, composites etc.) may have been purged
by an installation of a custom codec, or general schema state
invalidation.

Fix this by populating the codecs immediately after the statement data
types have been resolved.

Fixes: #241.",False,62,51,11,0.7647058823529411,0.7647058823529411,0.7647058823529411,13811,6776,9312,717,2.009761388286334,64.07699550716816,30.466666666666665,53.266666666666666,331.45639548170044,3.1565363635106367,2722.7593526305373,151.26440847947435,0.11048546516056677
376,05dce25f15090ae8ebfb7ba2f67a0edc60cd915a,Elvis Pranskevichus,2018-01-31 20:30:30+00:00,"Fix server version parsing when it contains trailing data

Some distros (e.g Debian) like may inject their branding
into the numeric version string, so make sure to only look
at stuff before the first space.

Fixes: #250.",False,9,7,2,0.5,0.5,1.0,13816,6777,9314,720,2.009761388286334,64.08909418813543,30.466666666666665,53.266666666666666,331.45639548170044,3.1565363635106367,2722.7593526305373,151.26440847947435,0.11048546516056677
377,a898b44e08e68139864f1ef7a618c7cdff091a76,Elvis Pranskevichus,2018-02-14 21:35:35+00:00,"Actually remove the `binary` argument from `set_type_codec` signature.

Compatibility support was removed in 0.13.0.",False,2,1,1,,,,13816,6777,9314,720,2.009761388286334,64.08909418813543,30.466666666666665,53.266666666666666,331.45639548170044,3.1565363635106367,2722.7593526305373,151.26440847947435,0.11048546516056677
378,2f558c23a24b574da46e04e3479c7857579e31c4,Elvis Pranskevichus,2018-02-14 21:35:35+00:00,asyncpg v0.15.0,False,2,1,1,,,,13816,6777,9314,720,2.009761388286334,64.08909418813543,30.466666666666665,53.266666666666666,331.45639548170044,3.1565363635106367,2722.7593526305373,151.26440847947435,0.11048546516056677
379,a2fa7b2345fc357a3347eae9e20226dcf4df19db,Elvis Pranskevichus,2018-03-07 01:10:52+00:00,"Prohibit non-iterable containers to be passed as array input

Make the array input type check for correct ABCs instead of producing a
cryptic error when a non-iterable container is passed.",False,52,39,13,0.35294117647058826,1.0,1.0,13837,6789,9328,722,2.009761388286334,64.0893581702035,30.466666666666665,53.266666666666666,331.45639548170044,3.1565363635106367,2722.7593526305373,151.26440847947435,0.11048546516056677
380,55a372fcd8d5dc9ce0085d23b84e6f3758576c50,Elvis Pranskevichus,2018-03-07 03:37:42+00:00,"Add support for reading passwords from .pgpass

This largely mirrors libpq's behaviour with respect to ~/.pgpass.

Fixes: #267.",False,402,392,10,0.07903780068728522,0.7422680412371134,0.8041237113402062,14219,6923,9630,742,2.033333333333333,63.78063741656579,31.68888888888889,55.577777777777776,349.66933007561903,3.217759372426249,3006.147180183584,167.00817667686584,0.11655644335853965
381,3ca5e3baff87df67b162d234ad1302d3f9fc9edc,Yury Selivanov,2018-04-17 20:12:13+00:00,setup.py: Add framework classifier,False,1,1,0,,,,14220,6923,9631,742,2.033333333333333,63.779663489199045,31.68888888888889,55.577777777777776,349.66933007561903,3.217759372426249,3006.147180183584,167.00817667686584,0.11655644335853965
382,87f0167062c65a62b5c171573d864987ab2644d8,Elvis Pranskevichus,2018-04-24 23:50:15+00:00,Add an example on how to decode numerics as floats,False,33,32,1,,,,14220,6923,9631,742,2.033333333333333,63.779663489199045,31.68888888888889,55.577777777777776,349.66933007561903,3.217759372426249,3006.147180183584,167.00817667686584,0.11655644335853965
383,cddea9c1d4aa84e9c9b78e5a2b1ccaa4946cd1d6,Fantix King,2018-04-26 14:24:16+00:00,Added codec for built-in type tid,False,98,96,2,0.0,1.0,1.0,14247,6923,9658,742,2.033333333333333,63.773667757420604,31.733333333333334,56.0,352.8400046591746,3.227404166826949,3067.6547895141407,170.425266084119,0.1176133348863915
384,9f80b0ca23d07dc7cf3fd2d4a0a87cfe7ce2d3bd,Fantix King,2018-05-01 14:52:45+00:00,"Refs #285, use unsigned int for tid",False,49,26,23,1.0,0.0,0.0,14251,6923,9662,742,2.033333333333333,63.773249422865725,31.755555555555556,56.0,352.9237486394313,3.2253427057595823,3063.2476949299357,170.1804274961076,0.11764124954647709
385,089f31d057abcd6a68b66a7aded66cab2d9a941b,Yury Selivanov,2018-05-23 04:19:49+00:00,"Upgrade to Cython 0.28.2

Start using the new @cython.iterable_coroutine decorator. This allows
us to stop patching the generated C code to get compatibility with
generator-based coroutines.",False,84,12,72,1.0,0.057692307692307696,0.0,14180,6911,9609,737,2.0344456404736277,63.823629060413744,31.711111111111112,55.93333333333333,352.5446548917428,3.2253427057595823,3062.11041368687,170.1172452048262,0.11751488496391424
386,e9802aab20112d8f044b811ab374967c17969cf4,Elvis Pranskevichus,2018-05-24 15:33:49+00:00,"Add a unit test for zero-value numeric decoding

Closes: #274",False,13,13,0,0.0,1.0,1.0,14193,6919,9621,737,2.0344456404736277,63.819332810277174,31.711111111111112,55.93333333333333,352.5446548917428,3.2253427057595823,3062.11041368687,170.1172452048262,0.11751488496391424
387,cf523be70780e9ec689a8945b7704123c5c036a8,bcaudell95,2018-05-30 15:59:48+00:00,Add Connection.is_in_transaction() (#297),False,32,31,1,0.22727272727272727,1.0,1.0,14223,6942,9643,737,2.033333333333333,63.74277286703089,31.711111111111112,55.93333333333333,352.5446548917428,3.2253427057595823,3062.11041368687,170.1172452048262,0.11751488496391424
388,5301e67226e758597f46742dfb58575a028e8d77,Elvis Pranskevichus,2018-05-31 18:45:04+00:00,"Add a link to Postgres docs for server_settings connect argument

Fix a few broken external links while at it.

Closes: #265",False,29,17,12,0.0,1.0,0.0,14228,6942,9643,737,2.033333333333333,63.74162991903699,31.711111111111112,55.93333333333333,352.5446548917428,3.2253427057595823,3062.11041368687,170.1172452048262,0.11751488496391424
389,60463425fd54f9a37ef617973fcde5673b32bebb,Elvis Pranskevichus,2018-05-31 20:53:19+00:00,"tests: Make clusters easier to manage

The current `TestCase.start_cluster()` helper is not flexible enough as
it does not allow making customizations to the cluster before it is
started.  The new `TestCase.new_cluster()` and
`TestCase.start_cluster()` are now used instead.  Cluster cleanup is now
automatic.",False,93,57,36,0.6470588235294118,0.9411764705882353,0.7647058823529411,14294,6982,9693,738,2.0342245989304812,63.35657938708815,32.06666666666667,56.355555555555554,354.9288500231257,3.26712160752088,3076.6224508014257,170.92346948896812,0.1183096166743752
390,8dd7a6cbe4cd79f0f83e2d6abdb13fd7ee9afb6e,Elvis Pranskevichus,2018-05-31 20:53:19+00:00,"Fix handling of OIDs >= 2**31

Currently asyncpg (incorrectly) assumes OIDs to be signed 32-bit
integers, whereas in reality they are unsigned.  As a result, things
would crash once the OID sequence reaches 2**31.

Fix this by decoding OID values as unsigned longs.

Fixes: #279",False,199,157,42,0.37254901960784315,0.45098039215686275,0.45098039215686275,14370,7025,9755,738,2.038338658146965,63.29024955075947,32.28888888888889,56.91111111111111,359.3888286599721,3.2711664228952877,3118.4154430243943,173.24530239024412,0.11979627621999066
391,3139322ab48a73d57ffd1336880b665df04a45b0,Elvis Pranskevichus,2018-05-31 20:53:19+00:00,"Allow setting custom codecs on domains and enumerated types

Previously this was disallowed for no particular reason.",False,49,47,2,1.0,1.0,1.0,14273,6965,9675,738,2.030010718113612,63.40692581220582,31.866666666666667,56.08888888888889,352.9123731177875,3.257263529644692,3060.497088838735,170.02761604659648,0.11763745770592915
392,7a0585acac5a882bd9276c9fc4d40019c15df237,Elvis Pranskevichus,2018-05-31 21:50:51+00:00,"Make Pool.close() wait until all checked out connections are released

Currently, `pool.close()`, despite the ""graceful"" designation, closes
all connections immediately regardless of whether they are acquired.

With this change, pool will wait for connections to actually be released
before closing.

WARNING: This is a potentially incompatible behavior change, as sloppily
written code which does not release acquired connections will now cause
`pool.close()` to hang forever.

Also, when `conn.close()` or `conn.terminate()` are called directly
on an acquired connection, the associated pool item is released
immediately.

Closes: #290",False,395,266,129,0.890625,0.796875,1.0,14507,7080,9818,769,2.0390707497360085,63.206691293563566,32.44444444444444,57.2,361.7542678495452,3.254658351586465,3120.89056403349,173.38280911297167,0.12058475594984838
393,482a18663e3eab58131ae44a7189961777bb528d,Elvis Pranskevichus,2018-06-01 14:02:12+00:00,"Fix type codec cache races

Current global type codec cache works poorly in a pooled environment.
The global nature of the cache makes introspection/cache bust race a
frequent occurrence.  Additionally, busting the codec cache in _all_
connections only because one of them had reconfigured a codec seems
wrong.

The fix is simple: every connection now has its own codec cache.  The
downside is that there will be more introspection queries on fresh
connections, but given that most connections in the field are pooled,
the robustness gains are more important.

Fixes: #278",False,157,120,37,0.4,0.8545454545454545,0.7272727272727273,14594,7120,9875,782,2.0366876310272537,63.06533281362356,32.6,57.46666666666667,363.6864948461177,3.254346261910137,3133.8831372360387,174.10461873533552,0.12122883161537254
394,0ddfa4666f967b1f0a10f321ee9f87ce41a9cb7f,Elvis Pranskevichus,2018-06-01 21:53:33+00:00,"Raise a consistent exception on input encoding errors

Currently, when invalid input is passed a query argument, asyncpg will
raise whatever exception was triggered by the codec function, which
can be `TypeError`, `ValueError`, `decimal.InvalidOperation` etc.
Additionally, these exceptions lack sufficient context as to which
argument actually triggered an error.

Fix this by consistently raising the new `asyncpg.DataError` exception,
which is a subclass of `asyncpg.InterfaceError` and `ValueError`, and
include the position of the offending argument as well as the passed
value, e.g:

    asyncpg.exceptions.DataError: invalid input for query argument $1: 'aaa'
    (a bytes-like object is required, not 'str')

Fixes: #260",False,125,75,50,0.0,1.0,1.0,14607,7123,9884,782,2.0356020942408377,63.059682415151634,32.644444444444446,57.53333333333333,364.33213672908994,3.25254491510879,3136.6451281779678,174.25806267655378,0.12144404557636328
395,65c0caa0d114b12afb59d7a430898c90aa0f8a9e,Elvis Pranskevichus,2018-06-01 23:48:18+00:00,"Modernize and improve setup.py

The current setup/CI configuration has rotted a bit, especially with
respect to the control of requirements.  This is a modernization pass to
fix that and make some improvements:

1) Various requirements are now specified directly in setup.py through
   ""extras_require"", so to install the dev dependencies it's sufficient
   to run `$ pip install -e .[dev]`

2) When building or installing unreleased versions of asyncpg, the dev
   version is generated automatically with setuptools_scm.

3) When cythonization is necessary, the correct version of Cython is now
   used automatically through the use of setup_requires.",False,226,174,52,0.8837209302325582,0.8837209302325582,0.813953488372093,14743,7179,9961,810,2.0395010395010393,62.08075642539772,33.266666666666666,58.53333333333333,370.66834980514534,3.295402057965933,3172.9141473752757,176.27300818751533,0.1235561166017151
396,e8cc627a5c9f5a3b3f12970c046cd6e4f33ef27a,Elvis Pranskevichus,2018-06-02 01:45:10+00:00,"Allow passing datetime.date instances as timestamp input

Fixes: #288",False,62,61,1,0.3333333333333333,1.0,1.0,14769,7185,9985,810,2.0384215991692627,62.07673558281145,33.266666666666666,58.53333333333333,370.66834980514534,3.295402057965933,3172.9141473752757,176.27300818751533,0.1235561166017151
397,1154729468511d4169f98e0f984893d864b8777c,Elvis Pranskevichus,2018-06-02 01:45:10+00:00,Workaround uvloop SSL issue,False,16,11,5,1.0,1.0,1.0,14775,7191,9990,811,2.0384215991692627,62.076640022762994,33.266666666666666,58.53333333333333,370.66834980514534,3.295402057965933,3172.9141473752757,176.27300818751533,0.1235561166017151
398,4d209b75a7be33a63e28b956d5e597a40276a506,Elvis Pranskevichus,2018-06-05 14:17:09+00:00,"Implement support for pool connection rotation

The new `Pool.expire_connections()` method expires all currently
open connections, so they would be replaced with fresh ones on
the next `acquire()` attempt.

The new `Pool.set_connect_args()` allows changing the connection
arguments for an existing pool instance.  Coupled with
`expire_connections()`, it allows adapting the pool to the new
environment conditions without having to replace the pool
instance.

Fixes: #291",False,234,183,51,0.25510204081632654,0.7959183673469388,0.6326530612244898,14907,7259,10067,817,2.0371134020618555,61.99188363647747,33.46666666666667,58.8,372.8862620465288,3.321760884324759,3217.2278852260406,178.73488251255782,0.12429542068217626
399,aebe5013d9d4958d2969b56f2c8302c92cf3432e,Elvis Pranskevichus,2018-06-05 15:05:46+00:00,Warn when pool.close() takes too long,False,19,18,1,0.625,0.625,1.0,14924,7265,10077,817,2.036045314109166,61.98516878076214,33.46666666666667,58.8,372.8862620465288,3.321760884324759,3217.2278852260406,178.73488251255782,0.12429542068217626
400,8d6abc1ea6859600a95cd55efa47ade918430e9c,Elvis Pranskevichus,2018-06-05 23:26:40+00:00,asyncpg v0.16.0,False,2,1,1,,,,14939,7271,10087,818,2.0339506172839505,61.93089276239241,33.84444444444444,59.31111111111111,376.65246888647454,3.345180544586525,3249.1911379417184,180.51061877453992,0.12555082296215817
401,ef2b7cdf48e918976cb6bbf1c6d388866db7aafb,Elvis Pranskevichus,2018-06-05 23:26:40+00:00,"Fix the CI release system

setup.py rework has caused breakage in the wheels department.
Fix that and a few other shortcomings identified in the process.
Drop setuptools_scm, as it doesn't play nice with shallow clones
made by Travis.  Use git directly instead.",False,184,101,83,1.0,1.0,1.0,14939,7271,10087,818,2.0339506172839505,61.93089276239241,33.84444444444444,59.31111111111111,376.65246888647454,3.345180544586525,3249.1911379417184,180.51061877453992,0.12555082296215817
402,8209e1fec76b09765fd85b4b9a7e833e33ab8079,Elvis Pranskevichus,2018-06-06 15:21:20+00:00,Open for v0.17.0 development,False,2,1,1,,,,14939,7271,10087,818,2.0339506172839505,61.93089276239241,33.84444444444444,59.31111111111111,376.65246888647454,3.345180544586525,3249.1911379417184,180.51061877453992,0.12555082296215817
403,58656bce746430ad5e0d1a37873ce8171479eb76,Elvis Pranskevichus,2018-06-06 15:47:10+00:00,Fix git commit retreival on Python 3.5,False,4,2,2,,,,14939,7271,10087,818,2.0339506172839505,61.93089276239241,33.84444444444444,59.31111111111111,376.65246888647454,3.345180544586525,3249.1911379417184,180.51061877453992,0.12555082296215817
404,3e6ade62047edaf095e9a2fab233b9da620d511e,sqwishy,2018-06-11 15:52:28+00:00,"Quoting channel name in LISTEN and UNLISTEN.

We surround channel identifiers in double-quotes. Otherwise, channel
names containing some non-alphanumeric characters or beginning with
numbers cause syntax errors when we try to LISTEN on them.

Also, this means pgsql will treat them in a case-sensitive way.

    db=# listen FOO;
    LISTEN
    db=# notify FOO, 'bar';
    NOTIFY
    Asynchronous notification ""foo"" with payload ""bar"" received from server process with PID 15176.
    db=# notify ""FOO"", 'bar';
    NOTIFY

    ...

    db=# listen ""FOO"";
    LISTEN
    db=# notify FOO, 'bar';
    NOTIFY
    db=# notify ""FOO"", 'bar';
    NOTIFY
    Asynchronous notification ""FOO"" with payload ""bar"" received from server process with PID 15162.",False,22,20,2,1.0,1.0,1.0,14957,7281,10099,818,2.0328879753340185,61.905801593068425,33.84444444444444,59.31111111111111,376.65246888647454,3.345180544586525,3249.1911379417184,180.51061877453992,0.12555082296215817
405,f77fb0f9f52f298ae474b90fad420b39a29f58d7,sqwishy,2018-06-11 15:52:28+00:00,Use _quote_ident to escape channel names.,False,12,6,6,,,,14957,7281,10099,818,2.0328879753340185,61.905801593068425,33.84444444444444,59.31111111111111,376.65246888647454,3.345180544586525,3249.1911379417184,180.51061877453992,0.12555082296215817
406,2624bdb97fdf65c574d5702f43ecc6667a215e21,Elvis Pranskevichus,2018-06-13 20:48:04+00:00,"Fix handling of large type OIDs

This was partially fixed in #300 (as a fix for #279), however that fix
missed the fact that OID arrays were still handled using the signed
integer codec.

Fixes: #316",False,21,13,8,0.0,1.0,1.0,14962,7283,10101,820,2.0328879753340185,61.91090923167378,33.84444444444444,59.31111111111111,376.65246888647454,3.345180544586525,3249.1911379417184,180.51061877453992,0.12555082296215817
407,17f2079f4dbdc35406d8c24d9cd595a7c522c7f4,Yury Selivanov,2018-07-05 17:18:20+00:00,Fix Py37 deprecation warning regarding asyncio.Task.current_task(),False,12,11,1,1.0,1.0,1.0,14972,7291,10109,820,2.0307692307692307,61.83453257505285,33.86666666666667,59.37777777777778,376.9734865734421,3.350664875070855,3250.953496290847,180.60852757171375,0.12565782885781399
408,d9a236e762b67471241f7088b2a643302db0f19a,Yury Selivanov,2018-07-05 17:18:20+00:00,"Break strong ref between Connection and Protocol.

Connection objects currently stay alive and open if they are not
explicitly closed or terminated.  GC won't happen to them because event
loops have a strong reference to their underlying Transport object.

By replacing a strong Connection<->Protocol reference with a weak one,
we are able to implement Connection.__del__() method that:

* issues a warning if a Connection object is being GCed prior
  to be explicitly closed;

* terminates the underlying Protocol and Transport, effectively closing
  the open network connection to the Postgres server.

When in asyncio debug mode (enabled by PYTHONASYNCIODEBUG env variable
or explicitly with `loop.set_debug(True)`) Connection objects save the
traceback of their origin and later use it to make the GC warning
clarer.

Addresses #323.",False,154,142,12,0.8591549295774648,1.0,1.0,15080,7365,10191,828,2.0336391437308867,61.75769712644551,34.15555555555556,59.86666666666667,381.2946763595685,3.3636318946643806,3311.6268891369264,183.97927161871817,0.1270982254531895
409,3565ef8c68beb3cf5c22dce50388c9d226360a3f,Yury Selivanov,2018-07-05 19:55:17+00:00,"Raise a clear error if there's a race in pool intialization.

Raise an InterfaceError if:

* Two or more tasks try to initialize the same Pool object concurrently;

* A pool method, such as fetchval(), is called while the Pool is being
  initialized.

See also issue #320.",False,53,48,5,1.0,1.0,0.9714285714285714,15123,7392,10226,828,2.032520325203252,61.725895604399355,34.15555555555556,59.86666666666667,381.2946763595685,3.3636318946643806,3311.6268891369264,183.97927161871817,0.1270982254531895
410,d2308e84254b0c301157527b50b835b8615c6d83,Elvis Pranskevichus,2018-07-10 19:52:13+00:00,asyncpg v0.17.0,False,38,21,17,,,,15128,7392,10231,828,2.032520325203252,61.72137961921845,34.15555555555556,59.86666666666667,381.2946763595685,3.3636318946643806,3311.6268891369264,183.97927161871817,0.1270982254531895
411,64be2154763150ed437a8b665697a07601e6357b,Elvis Pranskevichus,2018-07-10 22:06:14+00:00,Open for v0.18.0 development,False,2,1,1,,,,15128,7392,10231,828,2.032520325203252,61.72137961921845,34.15555555555556,59.86666666666667,381.2946763595685,3.3636318946643806,3311.6268891369264,183.97927161871817,0.1270982254531895
412,0ba8a3ae2b744c9411157b12b4590629bd775946,Elvis Pranskevichus,2018-07-28 13:29:09+00:00,Fix cluster exception message when pg_config is not executable,False,3,2,1,0.0,0.0,1.0,15129,7392,10232,828,2.032520325203252,61.72116326510111,34.15555555555556,59.86666666666667,381.2946763595685,3.3636318946643806,3311.6268891369264,183.97927161871817,0.1270982254531895
413,2b93ee552c6d49315394d954cd5cf44093a1c275,Elvis Pranskevichus,2018-07-30 15:52:05+00:00,"Implement Record.get()

`Record.get()` allows record objects to better masquerade as dicts.

Fixes: #330.",False,136,100,36,0.1935483870967742,0.7096774193548387,0.0,15136,7398,10238,828,2.0314720812182743,61.710706619270795,34.15555555555556,59.86666666666667,381.2946763595685,3.3636318946643806,3311.6268891369264,183.97927161871817,0.1270982254531895
414,d201868a65fe93e00846f6bd82e58a3057745fc7,Elvis Pranskevichus,2018-08-26 20:49:28+00:00,"Suggest copy_records_to_table() for the purpose of bulk insert.

Connection.executemany() is not the fastest choice for bulk insert,
copy_records_to_table() is a better choice, so make it easier to find by
putting a note in executemany() documentation.  See #346 for an example
of a performance confusion.",False,6,6,0,,,,15142,7398,10238,828,2.0314720812182743,61.70975862499639,34.15555555555556,59.86666666666667,381.2946763595685,3.3636318946643806,3311.6268891369264,183.97927161871817,0.1270982254531895
415,263de3ffc351f0c4ef813de30be56630b57b34d1,Elvis Pranskevichus,2018-08-28 18:45:08+00:00,"Stop raising generic RuntimeError on unexpected conditions

Instead, use InternalClientError (or its subclasses) consistently.",False,96,56,40,,,,15146,7400,10238,828,2.030425963488844,61.70677238605071,34.15555555555556,59.86666666666667,381.2946763595685,3.3636318946643806,3311.6268891369264,183.97927161871817,0.1270982254531895
416,df7830f0503d5fbc1f950726a8121022879fb45e,Elvis Pranskevichus,2018-09-06 14:53:55+00:00,"Handle and ignore permission errors when attempting to read .pgpass

Fixes: #356",False,73,59,14,0.0,0.972972972972973,1.0,15191,7416,10277,830,2.02834008097166,61.69393175681104,34.15555555555556,59.86666666666667,381.2946763595685,3.3636318946643806,3311.6268891369264,183.97927161871817,0.1270982254531895
417,eaa2fa1a08fd0e761a557e8412054c88562855d0,Elvis Pranskevichus,2018-09-07 18:33:26+00:00,"Allow mappings as composite type input

This allows asyncpg to take an arbitrary mapping as input for composite
types, as long as the keys match composite type fields.
This allows removing some tedium when handling complex composite types.

Fixes: #349.",False,66,60,6,0.0,1.0,1.0,15212,7425,10291,832,2.02834008097166,61.695332386174826,34.15555555555556,59.86666666666667,381.2946763595685,3.3636318946643806,3311.6268891369264,183.97927161871817,0.1270982254531895
418,ffd134e8168a825cff60e49fa2562cdceb59ee1d,Ryan Goulden,2018-09-07 20:43:03+00:00,"Add BitString.to_int and BitString.from_int

These methods assist in converting between BitStrings and ints,
which is useful when bridging between Postgres and things like
bitmasks, enum.IntFlag, etc. Their interface is modeled after
Python's int.to_bytes and .from_bytes.",False,101,101,0,0.04878048780487805,0.2682926829268293,0.2682926829268293,15313,7471,10333,833,2.04040404040404,61.86105374761924,35.111111111111114,61.91111111111111,398.7410193681936,3.4187801297108344,3711.438521044263,206.19102894690343,0.1329136731227312
419,2fc50e48e1838b2d2eeabfa0ed3722896c48e349,Elvis Pranskevichus,2018-09-12 13:40:20+00:00,Add a couple more enum tests,False,39,39,0,0.45454545454545453,1.0,1.0,15352,7485,10366,833,2.038306451612903,61.84766245887972,35.111111111111114,61.91111111111111,398.7410193681936,3.4187801297108344,3711.438521044263,206.19102894690343,0.1329136731227312
420,687127ed3f81f30e4f6c9b25da659c06c4d33c68,Elvis Pranskevichus,2018-09-18 13:43:38+00:00,"Allow aliasing builtin types by name in set_builtin_type_codec()

Currently, `Connection.set_builtin_type_codec()` accepts either a
""contrib"" codec name, such as ""pg_contrib.hstore"", or an OID of
a core type.  The latter is undocumented and not very useful.

Make `set_builtin_type_codec()` accept any core type name as the
""codec_name"" argument.  Generally, the name of the core type can be
found in the pg_types PostgreSQL system catalog.  SQL standard names
for certain types are also accepted (such as ""smallint"" or
""timestamp with timezone"").  This may be useful for extension types
or user-defined types which are wire-compatible with the target
builtin type.",False,295,242,53,0.0,1.0,0.9310344827586207,15433,7500,10406,839,2.038306451612903,61.784732540834,35.111111111111114,62.022222222222226,399.0028352186826,3.4097386125857567,3681.6665499037267,204.53703055020696,0.13300094507289417
421,a7eaf2b32f6dc7c9a8e724e5bb6b231f4814491f,Elvis Pranskevichus,2018-09-18 18:59:27+00:00,"Fix decoding of fractional timestamps before Postgres epoch

The datetime decoder currently incorrectly uses an unsigned integer type
for microseconds, which leads to incorrect decoding of timestamps with
fractional seconds which represent dates before Jan 1 2000.  Same issue
affects negative intervals with fractional seconds.

Fixes: #363",False,50,36,14,0.0,0.0,1.0,15457,7502,10429,838,2.0393145161290325,61.76794338539934,35.46666666666667,63.044444444444444,407.813839183867,3.409494412341556,3797.4652246374276,210.97029025763482,0.1359379463946223
422,0304288e5af402c20d423c99d965a6671dacdb1d,Ryan Goulden,2018-09-18 21:19:11+00:00,"Allow 'sslmode' in DSNs

Basic support for libpq-like handling of 'sslmode' parameter.
It uses default ssl contexts, rather than reading ~/.postgres files
or other 'ssl*' parameters like libpq would.",False,239,205,34,0.34108527131782945,0.4728682170542636,0.5426356589147286,15628,7600,10567,860,2.050301810865191,61.71093450748087,36.022222222222226,64.24444444444444,417.4481531303655,3.464713131185026,4005.6238119597338,222.5346562199852,0.1391493843767885
423,f0adefc73ac7169e92c9d22b999db4ebea08281b,Yury Selivanov,2018-10-02 22:47:07+00:00,Factor out generic PostgreSQL protocol helpers into a separate package,False,4115,557,3558,0.2641509433962264,0.30943396226415093,0.2528301886792453,15278,7386,10361,858,2.051797040169133,62.162611129801846,33.577777777777776,58.8,375.26565297975316,3.1964688563758656,3223.806427756409,179.10035709757827,0.12508855099325103
424,ddb0ec2918c370ba6fc2f569835fd02078132058,Elvis Pranskevichus,2018-10-22 23:07:06+00:00,"Fix large OID test under PostgreSQL 11

PostgreSQL 11 seems to be automatically creating array types for domains
with OIDs that _precede_ the OID of the array element type, so
the large OID test trips over with an off-by-one assertion error.",False,14,12,2,0.0,1.0,1.0,15288,7390,10365,861,2.053911205073996,62.16431943910604,33.68888888888889,58.93333333333333,376.66309917858496,3.212665437572447,3295.683521074977,183.09352894860984,0.12555436639286163
425,1d650ed99c094b7a7fe99813f78f3f90ef2c1ac8,Elvis Pranskevichus,2018-10-23 16:08:27+00:00,"Add support for specifying multiple host addresses when connecting

The behavior matches that of libpq.  Multiple hosts can now be specified
in the DSN, e.g. `postgres://host1,host2:5433`.  The `host` and `port`
arguments now also accept lists.  Like libpq, asyncpg will select the
first host it can successfully connect to.

Closes: #257
Related: #352",False,312,242,70,0.09375,0.59375,0.6458333333333334,15460,7436,10468,860,2.069620253164557,62.04442167592305,33.8,59.044444444444444,377.821002240224,3.178835475844727,3236.5864972941267,179.8103609607848,0.12594033408007466
426,d2873e7855432e9f532ac8fa486062648547b618,Elvis Pranskevichus,2018-10-30 19:10:53+00:00,asyncpg v0.18.0,False,10,7,3,0.0,1.0,0.0,15464,7436,10468,860,2.069620253164557,62.04352904555198,33.8,59.044444444444444,377.821002240224,3.178835475844727,3236.5864972941267,179.8103609607848,0.12594033408007466
427,ae26dd1e90512bdd90bc4f1a0c08ad7e433a9017,Elvis Pranskevichus,2018-10-30 19:33:32+00:00,Open for v0.19.0 development,False,2,1,1,,,,15464,7436,10468,860,2.069620253164557,62.04352904555198,33.8,59.044444444444444,377.821002240224,3.178835475844727,3236.5864972941267,179.8103609607848,0.12594033408007466
428,ffb9ebffbe7182a4331b03f3fcbf6316ef7b50ea,Elvis Pranskevichus,2018-10-31 14:04:15+00:00,"Fix DSN parsing regression

1d650ed9 broke certain cases of DSN parsing, fix that.",False,23,17,6,0.0,0.0,0.0,15475,7437,10479,860,2.070675105485232,62.03836637879934,33.8,59.044444444444444,377.821002240224,3.178835475844727,3236.5864972941267,179.8103609607848,0.12594033408007466
429,36ed11d2e59fbdc0bf9537be955b92aeb942e5cd,Elvis Pranskevichus,2018-11-01 23:12:19+00:00,"Remove preexec_fn hack from test cluster management

The hack is ugly, and the correct shutdown of the launched cluster
is alreadye handled by the atexit hook installed by the test harness.",False,18,1,17,0.1,0.1,0.1,15459,7425,10466,860,2.0707497360084477,62.05425032228762,33.77777777777778,58.977777777777774,377.2954826094007,3.178132053509957,3232.2309647265497,179.5683869292528,0.12576516086980025
430,482a39aef8ebea2467f4ce6cbec3381e0cd0ff5e,Elvis Pranskevichus,2018-11-01 23:21:29+00:00,Fix DeprecationWarning in the docstring of copy_from_query(),False,2,1,1,,,,15459,7425,10466,860,2.0707497360084477,62.05425032228762,33.77777777777778,58.977777777777774,377.2954826094007,3.178132053509957,3232.2309647265497,179.5683869292528,0.12576516086980025
431,b12bf6d13518adf51929f4269478acf52d96b2b1,Elvis Pranskevichus,2018-11-09 17:23:51+00:00,"Correctly ignore all incoming messages after the Terminate message

Once Terminate (`b'X'`) has been sent, there is no point in processing
any stray messages in the buffer, so discard them explicitly.",False,24,20,4,,,,15459,7425,10466,860,2.0707497360084477,62.05425032228762,33.77777777777778,58.977777777777774,377.2954826094007,3.178132053509957,3232.2309647265497,179.5683869292528,0.12576516086980025
432,7ba5dd4d9aeaa8859bfd17f000f2fd7076187dc1,Elvis Pranskevichus,2018-11-09 17:24:03+00:00,"Properly cleanup connections closed by remote

When a connection is terminated by the remote peer, asyncpg must not forget
to perform all the necessary client-side cleanup procedures.

Fixes: #385.",False,35,34,1,1.0,1.0,1.0,15484,7443,10485,861,2.069620253164557,62.04440209083078,33.77777777777778,58.977777777777774,377.2954826094007,3.178132053509957,3232.2309647265497,179.5683869292528,0.12576516086980025
433,43a7b213438378e416bff462150b06c267d1b720,Elvis Pranskevichus,2018-11-10 18:54:20+00:00,Allow specifying the target version when generating the release log,False,4,3,1,0.0,0.0,1.0,15484,7443,10485,861,2.069620253164557,62.04440209083078,33.77777777777778,58.977777777777774,377.2954826094007,3.178132053509957,3232.2309647265497,179.5683869292528,0.12576516086980025
434,e3ad12d167f481dc630ee621a346ea6810d1e733,Elvis Pranskevichus,2019-01-02 16:10:35+00:00,"Make sure idle never-acquired pool connections are closed due to inactivity

The `max_inactive_connection_lifetime` setting currently fails to apply
to the connection which were never acquired because
`_setup_inactive_callback()` is only called in `release()`.

Fixes: #389",False,20,20,0,1.0,1.0,1.0,15504,7453,10497,865,2.0684931506849313,62.0487048040818,33.77777777777778,58.977777777777774,377.2954826094007,3.178132053509957,3232.2309647265497,179.5683869292528,0.12576516086980025
435,aaeb7076e5acb045880b46155014c0640624797e,Robert Schütz,2019-01-22 22:01:52+00:00,"Check for .flake8 after importing flake8

This way, tests won't fail if both the flake8 module and the .flake8 file are missing.",False,10,5,5,,,,15504,7453,10497,865,2.0684931506849313,62.0487048040818,33.77777777777778,58.977777777777774,377.2954826094007,3.178132053509957,3232.2309647265497,179.5683869292528,0.12576516086980025
436,f4aa9bf4a87ef3ee5fc4e190bb6fc460313f150e,un.def,2019-03-19 16:27:47+00:00,"Fix _StatementCache.clear() PS memory leak

See #416",False,88,85,3,0.30612244897959184,1.0,1.0,15586,7502,10546,867,2.06827731092437,61.123230616117276,33.888888888888886,59.08888888888889,377.5534746199438,3.2003542757321792,3232.488956737093,179.58271981872738,0.1258511582066479
437,354d9be5869eff62059acddb1575a570b9f932fd,Samuel Colvin,2019-04-03 15:37:11+00:00,fix for warning_callback not yet defined,False,3,2,1,0.0,0.0,1.0,15587,7503,10547,867,2.069327731092437,61.117931352826744,33.955555555555556,59.15555555555556,378.15106117530985,3.2131880397287342,3251.5109264159555,180.63949591199753,0.12605035372510326
438,92c2d81256a1efd8cab12c0118d74ccd1c18131b,Samuel Colvin,2019-04-03 15:37:11+00:00,use explicit if,False,3,2,1,0.0,0.0,1.0,15588,7504,10548,867,2.069327731092437,61.11762047864022,33.91111111111111,59.15555555555556,378.04718366968996,3.201748611244162,3238.2652231733896,179.90362350963275,0.12601572788989665
439,2d76f50dccf35cf2f1d70b41ebd6198d2dfff8d7,Jonathan S. Katz,2019-05-08 16:36:34+00:00,"Add support for SCRAM-SHA-256 authentication.

SCRAM-SHA-256 authentication was introduced in PostgreSQL 10 as a better way
for handling password based authentication.

This implementation follows the guidance provided in the documentation, i.e.

https://www.postgresql.org/docs/current/sasl-authentication.html#SASL-SCRAM-SHA-256",False,557,551,6,0.0,0.0784313725490196,1.0,15661,7531,10599,887,2.0766002098635887,61.11070938029984,34.24444444444445,59.75555555555555,382.40946830439674,3.211363995859547,3277.64932400221,182.09162911123389,0.12746982276813226
440,b773912dc2d327d6c7db2563d97e02ecf08ab195,Sylvain Hellegouarch,2019-10-03 15:34:10+00:00,"Do not look for a port in a Unix socket domain path

Contributes to MagicStack/asyncpg#419

Signed-off-by: Sylvain Hellegouarch <sh@defuze.org>",False,38,36,2,0.0,0.0,1.0,15695,7535,10633,887,2.0776495278069254,61.09944373286284,34.266666666666666,59.8,382.79973807579444,3.2103525263254964,3280.8584392713424,182.26991329285232,0.12759991269193147
441,5513b9d3fd161a896904afc9b4b3721696f95a9c,Elvis Pranskevichus,2019-10-03 15:40:17+00:00,"Unquote connection string components properly

When a connection string component contains characters that have a
special meaning in the URI (e.g. '@' or '='), percent-encoding must be
used.  asyncpg must take care to unquote the parsed components
correctly, and it doesn't currently.

Additionally, this makes asyncpg follow the libpq's behavior of parsing
the authentication part of netloc, i.e. split on the first '@' and not
the last.

Fixes: #418
Fixes: #471",False,75,62,13,0.0,0.0,0.0,15744,7547,10677,887,2.080797481636936,61.07549066834144,34.31111111111111,59.8,382.94412203099256,3.2054027450481564,3271.472967442337,181.74849819124094,0.12764804067699753
442,23261532ad0f2548aef2ec539c7c0162da761b1a,Elvis Pranskevichus,2019-10-07 18:55:12+00:00,"Add PostgreSQL 12 support

PostgreSQL has a couple of incompatible configuration changes so adjust
to that.  Also, the new JIT is messing up with test timings, so disable
it explicitly for the testsuite on 11+.",False,240,173,67,0.8,1.0,0.45,15848,7595,10740,889,2.0627572016460904,61.04829602135449,34.48888888888889,60.0,384.68052619331786,3.2444489865113755,3333.2604834044655,185.18113796691478,0.1282268420644393
443,89815ea83620f858719a7df77e9192b5026aa8fe,Elvis Pranskevichus,2019-10-09 16:01:30+00:00,asyncpg v0.19.0,False,4,2,2,,,,15848,7595,10740,889,2.0627572016460904,61.04829602135449,34.48888888888889,60.0,384.68052619331786,3.2444489865113755,3333.2604834044655,185.18113796691478,0.1282268420644393
444,b043fbd3303272580f54d5aa89932384ec5fb973,Floris van Nee,2019-11-07 15:19:32+00:00,"Support PgBouncer by sending only a single SYNC message per query

This is a simple implementation of PgBouncer support for asyncpg. It
doesn't have any detection features, but at least changes asyncpg
behavior in such a way that using PgBouncer is possible.
This commit gets rid of the explicit SYNC after a
parse/describe sequence and changes is to a FLUSH. This should work regardless of
the setting of statement_cache_size and whether or not it's pgbouncer or
a direct postgres connection.
With this, PgBouncer is supported when setting statement_cache_size
explicitly to 0.",False,28,21,7,0.0,0.0,0.0,15849,7595,10741,889,2.0627572016460904,61.04738088242428,34.48888888888889,60.0,384.68052619331786,3.2444489865113755,3333.2604834044655,185.18113796691478,0.1282268420644393
445,71dc902d6ccb44eb9785acc1ffbc97422f072e8a,Elvis Pranskevichus,2019-11-10 18:46:50+00:00,Bump version to 0.20.0.dev0,False,2,1,1,,,,15849,7595,10741,889,2.0627572016460904,61.04738088242428,34.48888888888889,60.0,384.68052619331786,3.2444489865113755,3333.2604834044655,185.18113796691478,0.1282268420644393
446,5a4daf713a736b0fd6b35623e5d6bae664454cba,Elvis Pranskevichus,2019-11-19 20:27:58+00:00,"Handle IP values with prefix in ""inet"" type as IPvXInterface

Currently we treat values with network prefix in `inet` values
as `IPvXNetwork`, instead of `IPvXInterface` which is wrong.

Fixes: #497",False,35,19,16,,,,15849,7595,10741,886,2.0627572016460904,61.03970936367827,34.48888888888889,60.0,384.68052619331786,3.2444489865113755,3333.2604834044655,185.18113796691478,0.1282268420644393
447,9cbca1cef9d9c40d12576e72f73d40d3d22043d6,Gary Donovan,2019-11-19 20:28:45+00:00,"Fix typo in ""PostgreSQL"" in project description",False,2,1,1,,,,15849,7595,10741,886,2.0627572016460904,61.03970936367827,34.48888888888889,60.0,384.68052619331786,3.2444489865113755,3333.2604834044655,185.18113796691478,0.1282268420644393
448,926f4833e033b79c5ca2d6fb179d2862fe4091a1,Nikita Ilyasov,2019-11-19 20:32:07+00:00,"Close transport if connection times out (#468)

https://bugs.python.org/issue37658
https://github.com/MagicStack/asyncpg/issues/467",False,19,17,2,0.5833333333333334,0.5833333333333334,0.5833333333333334,15864,7607,10753,887,2.064748201438849,61.02425350695067,34.48888888888889,60.0,384.68052619331786,3.2444489865113755,3333.2604834044655,185.18113796691478,0.1282268420644393
449,bdba7ce73324a7a87a8c854de7b5e881ea029744,Yury Selivanov,2019-11-20 19:47:45+00:00,"Use loop.start_tls() to upgrade connections to SSL

The old way of TLS upgrade (openining a connection, asking postgres
to do TLS and then duping the underlying socket) seems not to work
anymore on Windows with Python 3.8.",False,197,117,80,0.5882352941176471,0.8529411764705882,0.47058823529411764,15923,7655,10801,887,2.0716479017400204,60.905967598140066,34.71111111111111,60.22222222222222,386.14319598552555,3.2726130183992743,3341.661775810724,185.64787643392916,0.12871439866184187
450,d655a39dd3b16d5670b9ea544c2d6e49f6214a7b,Yury Selivanov,2019-11-20 19:47:45+00:00,"Skip test_adversity on Windows & Python 3.8

The way the test rig is written seems to be incompatible
with ProactorEventLoop which is the dafault on Windows in
Python 3.8",False,6,6,0,,,,15886,7623,10769,893,2.0657084188911705,60.97889776497639,34.68888888888889,60.2,385.86874745550716,3.278317079202998,3340.0456324023085,185.55809068901715,0.12862291581850238
451,b8483d26970b4002283ca412853ab8ad9ba6ad1c,Yury Selivanov,2019-11-20 19:47:45+00:00,Handle Stream.wait_closed() windows bug gracefully,False,17,13,4,1.0,1.0,1.0,15880,7620,10763,893,2.0657084188911705,61.051314483789255,34.48888888888889,60.0,384.68052619331786,3.2444489865113755,3333.2604834044655,185.18113796691478,0.1282268420644393
452,d3131f4948c95c24ecba72c035b51821f96ba5ce,Yury Selivanov,2019-11-20 19:47:45+00:00,Initialize asyncio queues in Pool in an async-def context,False,30,19,11,0.0,0.0,1.0,15866,7616,10754,887,2.0668036998972252,61.01731957507037,34.48888888888889,60.0,384.68052619331786,3.2444489865113755,3333.2604834044655,185.18113796691478,0.1282268420644393
453,7978b7badf234f7a9a480038406f202bc5f6f291,Yury Selivanov,2019-11-20 19:47:45+00:00,Pin flake8 & pycodestyle; fix style issues,False,23,14,9,,,,15871,7616,10759,890,2.0668036998972252,61.03395154282962,34.48888888888889,60.0,384.68052619331786,3.2444489865113755,3333.2604834044655,185.18113796691478,0.1282268420644393
454,c13d4f82d419516caa8b5e65a11c0c0f4dc6481e,Yury Selivanov,2019-11-20 19:47:45+00:00,Stop passing `loop=` parameter (deprecated in asyncio 3.8),False,242,115,127,0.8,0.0,0.4,15854,7608,10743,887,2.064748201438849,61.0276744191574,34.48888888888889,60.0,384.68052619331786,3.2444489865113755,3333.2604834044655,185.18113796691478,0.1282268420644393
455,33e6de38f9004582a9b34dafd6afaf3983055270,Yury Selivanov,2019-11-20 19:47:45+00:00,Handle asyncio.CancelledError (now a BaseException),False,22,11,11,,,,15864,7607,10753,887,2.064748201438849,61.02425350695067,34.48888888888889,60.0,384.68052619331786,3.2444489865113755,3333.2604834044655,185.18113796691478,0.1282268420644393
456,7cb31bc6c8bf974827b793efad2caa659fe143e4,Yury Selivanov,2019-11-20 19:47:45+00:00,Bump Cython & uvloop deps,False,4,2,2,,,,15864,7607,10753,887,2.064748201438849,61.02425350695067,34.48888888888889,60.0,384.68052619331786,3.2444489865113755,3333.2604834044655,185.18113796691478,0.1282268420644393
457,391ce7362fdf1d1972b65dec72f7d185f0de58b1,Yury Selivanov,2019-11-20 19:47:45+00:00,Close asyncio.Streams explicitly (do not rely on GC),False,6,5,1,0.0,0.0,0.5,15858,7612,10747,887,2.0668036998972252,61.019932517481955,34.48888888888889,60.0,384.68052619331786,3.2444489865113755,3333.2604834044655,185.18113796691478,0.1282268420644393
458,ae7c11008aaf240f90fe054cb044b9926f317a55,Yury Selivanov,2019-11-20 20:38:47+00:00,Bump the version to 0.20.0,False,2,1,1,,,,15923,7655,10801,887,2.0716479017400204,60.905967598140066,34.71111111111111,60.22222222222222,386.14319598552555,3.2726130183992743,3341.661775810724,185.64787643392916,0.12871439866184187
459,2c99beb18425758d9ecb3e921a7aba26bb28976f,Martin Asell,2019-12-02 14:01:31+00:00,Add back ensure future for connector,False,1,1,0,0.0,0.0,0.0,15924,7656,10802,887,2.0716479017400204,60.9052154974956,34.71111111111111,60.22222222222222,386.14319598552555,3.2726130183992743,3341.661775810724,185.64787643392916,0.12871439866184187
460,851d58651deb10593a31a289b735c180f7895e3e,Elvis Pranskevichus,2020-01-09 04:41:02+00:00,"Fix errors in numeric binary decoder

The size of the output buffer in numeric decoder is computed incorrectly
which may lead to stack corruption or access to unitialized memory.

This also fixes incorrect rendering of trailing zeros in some cases.

Fixes: #520
Fixes: #514",False,23,20,3,0.0,0.0,1.0,15941,7658,10818,887,2.0736949846468784,60.89343065036992,34.977777777777774,60.68888888888889,390.6033262719491,3.265455395660256,3378.844842019085,187.7136023343936,0.13020110875731639
461,1d4325c7c4a15a8e2d3c5c1abfd8189cc1459ee2,Elvis Pranskevichus,2020-01-12 22:42:03+00:00,asyncpg v0.20.1,False,6,3,3,,,,15941,7658,10818,887,2.0736949846468784,60.89343065036992,34.977777777777774,60.68888888888889,390.6033262719491,3.265455395660256,3378.844842019085,187.7136023343936,0.13020110875731639
462,1d9457f0b44d58f5537b011725916301a573afe7,Harvey Frye,2020-04-23 17:30:57+00:00,"Add support for password functions (useful for RDS IAM auth) (#554)

Closes: #554
Closes: #553",False,60,58,2,0.7083333333333334,0.8541666666666666,0.7083333333333334,15997,7684,10856,887,2.073544433094995,60.862279359595725,34.977777777777774,60.68888888888889,390.6033262719491,3.265455395660256,3378.844842019085,187.7136023343936,0.13020110875731639
463,7f5c2a243360a94b31c77c3e8d415c0fd4a3fe40,ABCDeath,2020-04-23 18:35:49+00:00,"Fix Connection class _copy_in private method

Closes: #555",False,45,44,1,0.0,1.0,1.0,16040,7698,10894,887,2.0724489795918366,60.84028488345963,34.977777777777774,60.68888888888889,390.6033262719491,3.265455395660256,3378.844842019085,187.7136023343936,0.13020110875731639
464,ac6a2fcf508f81bca3300a5a5cf59eae6537e3dd,Jens Reidel,2020-07-18 16:19:39+00:00,"Update CI matrix, aarch64 builds (#595)

This does the following changes:

* Updates the Python versions for the OSX builds to the latest ones
* Removes the version pin on wheel
* setuptools 48.0.0 broke asyncpg, distutils is deprecated now, I've rewrote it to setuptools entirely
* CI pipelines now have names
* aarch64 tests against the latest python and postgresql are now done
* manylinux2014 wheels for aarch64 are also built now
* bumped Ubuntu to focal (20.04)
* bumped Cython to fix compatibility with python 3.10
* CI builds now actually install the built wheel and not the latest pypi release
* version test is skipped for dev builds as the git commit hash mixes up the version number
* resolved all travis config warnings
* postgres 9.2-9.4 are EOL and removed from the tests

The manylinux containers from pypa only work on the architecture they are made for, so a aarch64 manylinux wheel can only be built on aarch64. Therefore, two containers now perform the builds. It might be worth thinking about letting the aarch64 container handle the upload alone for all wheels as it is ages slower than the x86 one anyways.

I've tested pretty much everything except the S3 bucket and pypi push, the wheels themselves get built and the other pipelines pass.",False,281,175,106,,,,16041,7698,10896,887,2.0724489795918366,60.84192322881585,34.977777777777774,60.68888888888889,390.6033262719491,3.265455395660256,3378.844842019085,187.7136023343936,0.13020110875731639
465,745f8f817fc06115f96f8a376199d9bdfb556c44,Yuri Astrakhan,2020-07-18 16:25:26+00:00,"Improve pool documentation examples (#491)

I think pool documentation should recommend the safest approaches first (i.e. with the fewest possible mistakes), and discourage lower-level approach.",False,15,14,1,0.0,1.0,0.0,16054,7698,10896,887,2.0724489795918366,60.84291042472216,34.977777777777774,60.68888888888889,390.6033262719491,3.265455395660256,3378.844842019085,187.7136023343936,0.13020110875731639
466,b08132046eb1fc0245737b5b4fba0ca09c40bbf9,Samuel Colvin,2020-07-18 16:28:22+00:00,Fix links in connection documentation (#584),False,4,2,2,,,,16054,7698,10896,887,2.0724489795918366,60.84291042472216,34.977777777777774,60.68888888888889,390.6033262719491,3.265455395660256,3378.844842019085,187.7136023343936,0.13020110875731639
467,8141b93c59cab25a68554e7704b9e2ef027db541,iomintz,2020-07-18 16:31:49+00:00,"Add support for connection termination listeners (#525)

The new `Connection.add_termination_listener()` method can be used
to register callbacks to be invoked when a connection has been terminated.

Co-authored-by: Elvis Pranskevichus <elvis@magic.io>",False,117,105,12,0.6153846153846154,0.23076923076923078,0.9615384615384616,16147,7753,10957,887,2.0759878419452886,60.64279060173038,35.28888888888889,61.111111111111114,393.091439385887,3.2989376079476984,3387.798762255106,188.21104234750584,0.13103047979529567
468,87a4302f26e6194f8a8355fc582c98bfc0f1511a,Elvis Pranskevichus,2020-08-09 20:38:14+00:00,asyncpg v0.21.0,False,2,1,1,,,,16147,7753,10957,887,2.0759878419452886,60.64279060173038,35.28888888888889,61.111111111111114,393.091439385887,3.2989376079476984,3387.798762255106,188.21104234750584,0.13103047979529567
469,c8b8a50b8151a8f0d2723a0aafd7a9bbc9971cbd,Elvis Pranskevichus,2020-08-15 16:57:14+00:00,Bump version to 0.22.0.dev0,False,2,1,1,,,,16147,7753,10957,887,2.0759878419452886,60.64279060173038,35.28888888888889,61.111111111111114,393.091439385887,3.2989376079476984,3387.798762255106,188.21104234750584,0.13103047979529567
470,db4f1a6caa87779b7264f285116381aa943ddf0e,Elvis Pranskevichus,2020-08-15 16:57:53+00:00,"Allow using custom Record class

Add the new `record_class` parameter to the `create_pool()` and
`connect()` functions, as well as to the `cursor()`, `prepare()`,
`fetch()` and `fetchrow()` connection methods.

This not only allows adding custom functionality to the returned
objects, but also assists with typing (see #577 for discussion).

Fixes: #40.",False,715,610,105,0.0,0.8412322274881516,0.3033175355450237,16613,7853,11327,887,2.0765357502517623,60.486553436458955,35.355555555555554,61.266666666666666,394.3715460831357,3.299139628398022,3398.646611160587,188.81370062003256,0.13145718202771187
471,2bac166c1ba098b9ebdfca3dc5b8264ae850213c,Elvis Pranskevichus,2020-08-27 16:53:14+00:00,"Add a workaround for bpo-37658

`asyncio.wait_for()` currently has a bug where it raises a
`CancelledError` even when the wrapped awaitable has completed.
The upstream fix is in python/cpython#21894.  This adds a workaround
until the aforementioned PR is merged, backported and released.

Co-authored-by: Adam Liddell <git@aliddell.com>
Fixes: #467
Fixes: #547
Related: #468
Supersedes: #548",False,59,41,18,1.0,1.0,1.0,16636,7864,11338,893,2.0754527162977867,60.438781807070015,35.422222222222224,61.333333333333336,394.77617418702624,3.3101367793951733,3401.5740898362988,188.97633832423878,0.13159205806234203
472,4a627d551b5a9161cb8b5a01d1c3a5f71c4d0c12,Fantix King,2020-09-22 04:44:42+00:00,"Fix wrong default transaction isolation level (#622)

* Fix wrong default transaction isolation level

This fixes the issue when the default_transaction_isolation is
not ""read committed"", `transaction(isolation='read_committed')`
won't start a transaction in ""read committed"" isolation level.",False,103,92,11,0.0,0.4084507042253521,1.0,16717,7910,11414,893,2.0913654618473894,60.11320445339571,35.82222222222222,62.0,398.49020212978485,3.370678630544234,3421.598321098243,190.088795616569,0.13283006737659495
473,68b40cbf7f52df1c4e25fdbf3fc48fcf81f418c7,Elvis Pranskevichus,2020-09-22 04:45:49+00:00,"Fix set_type_codec() to accept standard SQL type names (#619)

Currently, `Connection.set_type_codec()` only accepts type names as they
appear in `pg_catalog.pg_type` and would refuse to handle a standard SQL
spelling of a type like `character varying`.  This is an oversight, as
the internal type names aren't really supposed to be treated as public
Postgres API.  Additionally, for historical reasons, Postgres has a
single-byte `""char""` type, which is distinct from both `varchar` and
SQL `char`, which may lead to massive confusion if a user sets up a
custom codec on it expecting to handle the `char(n)` type instead.

Issue: #617",False,117,95,22,0.5348837209302325,1.0,0.7209302325581395,16772,7925,11467,893,2.091182364729459,60.0534566193864,35.91111111111111,62.111111111111114,399.53215209287276,3.370178390043994,3428.235319757843,190.45751776432456,0.13317738403095758
474,e064f59e7944bf7d85fde597ed2eceeec7d8a2b6,Fantix King,2020-09-25 01:51:28+00:00,"Ignore custom data codec for internal introspection (#618)

Fixes: #617",False,114,82,32,0.5454545454545454,0.7575757575757576,0.42424242424242425,16808,7928,11500,894,2.088,60.02761540468887,35.91111111111111,62.111111111111114,399.53215209287276,3.370178390043994,3428.235319757843,190.45751776432456,0.13317738403095758
475,92aa80622788402d40251f88c978b776f7a0ecf6,Fantix King,2020-09-25 19:05:13+00:00,"Fix null/NULL quoting in array text encoder (#627)

When given a textual json codec that yields 'null', the array
encoder should generate b'[""null""]' instead of b'[""NULL""]'
for a JSON[] type.

Refs: #623",False,41,40,1,0.0,0.0,1.0,16845,7953,11531,894,2.090909090909091,60.00225753339478,35.91111111111111,62.111111111111114,399.53215209287276,3.370178390043994,3428.235319757843,190.45751776432456,0.13317738403095758
476,8b313bdec943ce2d1121f0d8cbf58f9b1851ef33,Samuel Colvin,2020-11-25 23:07:37+00:00,Fix link in connect docstring (#653),False,2,1,1,,,,16845,7953,11531,894,2.090909090909091,60.00225753339478,35.91111111111111,62.111111111111114,399.53215209287276,3.370178390043994,3428.235319757843,190.45751776432456,0.13317738403095758
477,690048dbaaebac6172f003a9805bbb63abd28d8c,Fantix King,2020-11-26 00:02:16+00:00,"Batch executemany (#295)

Now `Bind` and `Execute` pairs are batched into 4 x 32KB buffers to take
advantage of `writelines()`. A single `Sync` is sent at last, so that
all args live in the same transaction.

pgbench results of inserting 1000 rows per query with executemany() on 
Python 3.6 of 2.2GHz 2015 MacBook Air (best out of 5 runs):

asyncpg 0.18.2:

    710 queries in 30.31 seconds
    Latency: min 341.88ms; max 636.29ms; mean 425.022ms; std: 39.782ms (9.36%)
    Latency distribution: 25% under 401.67ms; 50% under 414.26ms; 75% under 435.37ms; 90% under 478.39ms; 99% under 576.638ms; 99.99% under 636.299ms
    Queries/sec: 23.42
    Rows/sec: 23424.32

This patch:

    4125 queries in 30.02 seconds
    Latency: min 23.14ms; max 734.91ms; mean 72.723ms; std: 49.226ms (67.69%)
    Latency distribution: 25% under 59.958ms; 50% under 65.414ms; 75% under 71.538ms; 90% under 80.95ms; 99% under 175.375ms; 99.99% under 734.912ms
    Queries/sec: 137.39
    Rows/sec: 137389.64

This is a backwards incompatible change.  Here `executemany()` becomes
atomic, whereas previously any error in the middle of argument iteration
would retain the results of the preceding set of arguments unless an explicit
transaction block was used.

Closes: #289",False,490,390,100,0.8671875,1.0,1.0,17011,8045,11660,900,2.0876847290640392,59.410747745324734,36.68888888888889,63.68888888888889,408.0564131704875,3.438191858057462,3458.9102518020222,192.16168065566785,0.13601880439016248
478,5ddabb191ffe72f9c1f733451610d1a363ebcb8a,Kevin Messer,2020-11-26 00:10:01+00:00,"Bump pgproto to fix pyinstaller (#651)

Fixes #649",False,3,2,1,,,,17012,8045,11661,900,2.0876847290640392,59.40990347268813,36.68888888888889,63.68888888888889,408.0564131704875,3.438191858057462,3458.9102518020222,192.16168065566785,0.13601880439016248
479,7c77c33355a9c228d23f67f9e9b3383a7a801a96,Elvis Pranskevichus,2020-11-26 02:49:29+00:00,"Add a note that DSN components must be URL-quoted

Closes: #598.",False,5,5,0,0.0,1.0,0.0,17017,8045,11661,900,2.0876847290640392,59.40934224893851,36.68888888888889,63.68888888888889,408.0564131704875,3.438191858057462,3458.9102518020222,192.16168065566785,0.13601880439016248
480,e5856612ed1fa2761c815cc1bd649c13a5b1ce83,Elvis Pranskevichus,2020-11-29 01:14:25+00:00,Switch to Github Actions,False,1456,552,904,0.8558558558558559,0.0,0.0,17015,8043,11665,897,2.0876847290640392,61.005026723307466,35.869565217391305,62.369565217391305,399.5940821442501,3.366839861143169,3392.412756282047,188.46737534900257,0.13319802738141667
481,0e0eb8d35e4804f681ebac4bc0e77a538d0f4fea,Karpushkin Gleb,2020-11-29 18:45:48+00:00,"Expose Pool as asyncpg.Pool (#669)

This makes `Pool` accessible as `asyncpg.Pool` for ease of typing annotations and subclassing.

Fixes: #643",False,8,5,3,,,,17017,8043,11667,897,2.0876847290640392,61.13066700320643,35.869565217391305,62.369565217391305,399.5940821442501,3.366839861143169,3392.412756282047,188.46737534900257,0.13319802738141667
482,ddadce91315473b52a653e1edde6080e14377469,Elvis Pranskevichus,2020-11-29 19:13:52+00:00,Remove remnants of the old CI,False,17,5,12,,,,17013,8040,11664,896,2.0876847290640392,61.135640975023854,35.80434782608695,62.30434782608695,399.08550713598476,3.3554983217522047,3383.996442059225,187.99980233662356,0.13302850237866154
483,16183aa06c6a7bea1e9b03bc65dfaf61d637fe7e,Elvis Pranskevichus,2020-11-29 22:51:39+00:00,"Prefer SSL connections by default (#660)

Switch the default SSL mode from 'disabled' to 'prefer'.  This matches
libpq's behavior and is a sensible thing to do.

Fixes: #654",False,93,56,37,0.0,0.9411764705882353,0.0,17032,8036,11662,894,2.088757396449704,61.1248077213472,35.95652173913044,62.65217391304348,401.6828110012296,3.3917119076087316,3446.883437908942,191.49352432827445,0.13389427033374315
484,b53f03847313898bacaaea42f46ad61853acd565,Elvis Pranskevichus,2020-12-02 01:37:16+00:00,"Add codecs for a bunch of new builtin types (#665)

The last round of support for esoteric builtin types was quite a while
ago, so catch up.  Out of non-internal types this adds support for the
new `jsonpath` type.

Fixes: #635.",False,85,78,7,,,,17054,8036,11684,894,2.088757396449704,61.11008554320224,36.02173913043478,62.91304347826087,403.8894208923217,3.3945834950708154,3487.2905558069792,193.73836421149875,0.13462980696410717
485,50f964fc3e814f035c198a0e6aec1706681d2718,Elvis Pranskevichus,2020-12-02 01:37:44+00:00,"Prohibit custom codecs on domains

Postgres always includes the base type OID in the RowDescription message
even if the query is technically returning domain values.  This makes
custom codecs on domains ineffective, and so prohibit them to avoid
confusion and bug reports.

See postgres/postgres@d9b679c and
https://postgr.es/m/27307.1047485980%40sss.pgh.pa.us for context.

Fixes: #457.",False,67,38,29,0.5714285714285714,1.0,0.0,17064,8037,11693,893,2.0875984251968505,61.01875916931914,36.08695652173913,62.97826086956522,404.19493714895236,3.4054530602882065,3488.162457885458,193.78680321585864,0.1347316457163174
486,7252dbebb9a808e52704256bf2307a8d779315a1,Elvis Pranskevichus,2020-12-02 01:37:44+00:00,"Raise proper error on anonymous composite input (tuple arguments) (#664)

Currently asyncpg would crash with an arcane ""could not resolve query
result and/or argument types in 6 attempts"", which isn't helpful.  Do
the right thing by raising an `UnsupportedClientFeatureError`
explicitly instead.

Fixes #476.",False,37,33,4,0.5714285714285714,1.0,1.0,17080,8041,11707,893,2.0865290068829894,61.00513861685817,36.08695652173913,62.97826086956522,404.19493714895236,3.4054530602882065,3488.162457885458,193.78680321585864,0.1347316457163174
487,50f65fbb62ab2df9fd8eddde54217b89c66f6cba,Elvis Pranskevichus,2020-12-02 01:38:46+00:00,"Untangle custom codec confusion (#662)

Asyncpg currently erroneously prefers binary I/O for underlying type of
arrays effectively ignoring a possible custom text codec that might have
been configured on a type.

Fix this by removing the explicit preference for binary I/O, so that the
codec selection preference is now in the following order:

- custom binary codec
- custom text codec
- builtin binary codec
- builtin text codec

Fixes: #590
Reported-by: @neumond",False,228,123,105,0.0,1.0,1.0,17115,8061,11721,893,2.0854616895874263,61.00948636444782,36.130434782608695,63.04347826086956,404.8452799858472,3.404038174510756,3491.976279690679,193.9986822050376,0.134948426661949
488,3d0e23fedfc39d5bd9732911288ad6c33147b525,Elvis Pranskevichus,2020-12-02 03:37:32+00:00,Update README and setup.py to reflect the current state better,False,45,31,14,,,,17116,8061,11722,893,2.0854616895874263,61.0086649023976,36.130434782608695,63.04347826086956,404.8452799858472,3.404038174510756,3491.976279690679,193.9986822050376,0.134948426661949
489,c162909f98e4a5654b94aed7c5f7ffde97056c0a,Elvis Pranskevichus,2020-12-20 23:44:20+00:00,"Fix method calls on custom Record subclasses

The current implementation has a bunch of `CheckExact` calls in front of
most `Record` methods, effectively making them unusable in subclasses.
Relax the check to include the subclasses.

While at it, add a check that `__init__` and `__new__` are not redefined
on the provided Record subclass.  Doing so is pointless, because
`Record` instance initialization effectively bypasses both, so raise an
`InterfaceError` to avoid needless confusion.

Fixes: #676",False,140,118,22,0.2125,0.6375,0.9,17198,8098,11792,893,2.0871694417238,60.958512667903626,36.32608695652174,63.391304347826086,407.92664552693344,3.404643553639374,3516.2179354112704,195.34544085618157,0.13597554850897775
490,c443374e8b30dd6ae027b52c76b20b3a8125ae71,Elvis Pranskevichus,2020-12-21 00:39:04+00:00,"Adjust executemany() docs

Remove the `copy_records_to_table()` note as `executemany()` is almost
as efficient now and rephrase the note about the new behavior with
respect to atomicity.",False,16,5,11,,,,17192,8098,11792,893,2.0871694417238,60.95923520419986,36.32608695652174,63.391304347826086,407.92664552693344,3.404643553639374,3516.2179354112704,195.34544085618157,0.13597554850897775
491,ff5da5f96fb675211ab09e586c833acb87eec19a,Igor Khlepitko,2021-02-10 05:19:18+00:00,"Avoid unnecessary overhead during connection reset (#648)

UNLISTEN is now available in Hot Standby mode in all supported
PostgreSQL versions, therefore there's no reason anymore to wrap
it in DO block. This should significantly speed up connection reset.",False,11,1,10,1.0,1.0,0.0,17183,8098,11783,893,2.0871694417238,60.95795441181938,36.32608695652174,63.391304347826086,407.92664552693344,3.404643553639374,3516.2179354112704,195.34544085618157,0.13597554850897775
492,232adcff95becd7370b0f637e54335e4d4d8642f,Tim Gates,2021-02-10 05:19:55+00:00,"docs: fix simple typo, verifiction -> verification (#682)

There is a small typo in asyncpg/connection.py.

Should read `verification` rather than `verifiction`.",False,2,1,1,,,,17183,8098,11783,893,2.0871694417238,60.95795441181938,36.32608695652174,63.391304347826086,407.92664552693344,3.404643553639374,3516.2179354112704,195.34544085618157,0.13597554850897775
493,161607603adae789d4392502859cc7bbdec7240b,Elvis Pranskevichus,2021-02-10 05:27:31+00:00,"asyncpg v0.22.0

A new asyncpg release is here.

Notable additions include Python 3.9 support, support for recently added
PostgreSQL types like `jsonpath`, and last but not least, vastly
improved `executemany()` performance.  Importantly, `executemany()` is
also now _atomic_, which means that either all iterations succeed, or
none at all, whereas previously partial results would have remained in
place, unless `executemany()` was called in a transaction.

There is also the usual assortment of improvements and bugfixes, see the
details below.

This is the last release of asyncpg that supports Python 3.5, which has
reached EOL last September.

Improvements
------------

* Vastly speedup executemany by batching protocol messages (#295)
  (by @fantix in 690048db for #295)

* Allow using custom `Record` class
  (by @elprans in db4f1a6c for #577)

* Add Python 3.9 support (#610)
  (by @elprans in c05d7260 for #610)

* Prefer SSL connections by default (#660)
  (by @elprans in 16183aa0 for #660)

* Add codecs for a bunch of new builtin types (#665)
  (by @elprans in b53f0384 for #665)

* Expose Pool as `asyncpg.Pool` (#669)
  (by @rugleb in 0e0eb8d3 for #669)

* Avoid unnecessary overhead during connection reset (#648)
  (by @kitogo in ff5da5f9 for #648)

Fixes
-----

* Add a workaround for bpo-37658
  (by @elprans in 2bac166c for #21894)

* Fix wrong default transaction isolation level (#622)
  (by @fantix in 4a627d55 for #622)

* Fix `set_type_codec()` to accept standard SQL type names (#619)
  (by @elprans in 68b40cbf for #619)

* Ignore custom data codec for internal introspection (#618)
  (by @fantix in e064f59e for #618)

* Fix null/NULL quoting in array text encoder (#627)
  (by @fantix in 92aa8062 for #627)

* Fix link in connect docstring (#653)
  (by @samuelcolvin in 8b313bde for #653)

* Make asyncpg work with pyinstaller (#651)
  (by @Atem18 in 5ddabb19 for #651)

* Fix possible `AttributeError` exception in `ConnectionSettings` (#632)
  (by @petriborg in 0d231820 for #632)

* Prohibit custom codecs on domains
  (by @elprans in 50f964fc for #457)

* Raise proper error on anonymous composite input (tuple arguments) (#664)
  (by @elprans in 7252dbeb for #664)

* Fix incorrect application of custom codecs in some cases (#662)
  (by @elprans in 50f65fbb for #662)",False,9,4,5,,,,17183,8098,11783,893,2.0871694417238,60.95795441181938,36.32608695652174,63.391304347826086,407.92664552693344,3.404643553639374,3516.2179354112704,195.34544085618157,0.13597554850897775
494,a308a9736ebff5f8d04d9072f375496a66f6ba33,Elvis Pranskevichus,2021-02-10 06:01:19+00:00,Post-release version bump,False,2,1,1,,,,17183,8098,11783,893,2.0871694417238,60.95795441181938,36.32608695652174,63.391304347826086,407.92664552693344,3.404643553639374,3516.2179354112704,195.34544085618157,0.13597554850897775
495,d6eea8ede0fef9c41196e0d48999da378e4434a4,BeatButton,2021-03-08 22:24:17+00:00,"Avoid TypeError in Transaction.__repr__ (#703)

Only add isolation to repr if it's not None",False,3,2,1,1.0,1.0,1.0,17184,8099,11784,893,2.088148873653281,60.949426826958565,36.369565217391305,63.45652173913044,408.3906617301822,3.402512266341846,3517.9969098185848,195.44427276769906,0.13613022057672736
496,359a34c4da1b90135263f15fc35ec397cc0ed349,Fantix King,2021-03-09 17:31:56+00:00,"Feed memoryview to writelines() (#715)

This fixes an issue in 0.22.0 where we passed WriteBuffer to writelines
by mistake, which leads to an error under SSL and uvloop - the
implementation that calls len() on each line of writelines().

Fixes: #700",False,28,26,2,0.0,1.0,1.0,17208,8112,11805,893,2.088062622309198,60.933680092584815,36.41304347826087,63.52173913043478,408.9058657718492,3.4004820314592874,3521.142945185456,195.61905251030302,0.13630195525728303
497,075114c195e9eb4e81c8365d81540beefb46065c,Fantix King,2021-03-24 03:40:00+00:00,"Add sslmode=allow support and fix =prefer retry (#720)

We didn't really retry the connection without SSL if the first SSL
connection fails under sslmode=prefer, that led to an issue when the
server has SSL support but explicitly denies SSL connection through
pg_hba.conf. This commit adds a retry in a new connection, which
makes it easy to implement the sslmode=allow retry.

Fixes #716",False,371,314,57,0.7131147540983607,0.7213114754098361,0.5819672131147541,17453,8214,12004,906,2.0918762088974856,60.83628312026467,36.869565217391305,64.47826086956522,417.22348608909914,3.3984014429656555,3609.6400913766006,200.53556063203322,0.13907449536303298
498,bc4127f44d3c7fb0e9813cf7deba023569039a93,Ben Beasley,2021-04-26 18:18:57+00:00,"Loosen message test in test_invalid_input (#751)

In test_invalid_input, also accept “(str object cannot be interpreted as an integer)” wherever we expected “an integer is required”; required for Python 3.10 compatibility",False,11,8,3,0.0,1.0,1.0,17458,8215,12007,907,2.0918762088974856,60.83816452317713,36.869565217391305,64.47826086956522,417.22348608909914,3.3984014429656555,3609.6400913766006,200.53556063203322,0.13907449536303298
499,5cf4089a40380a19a51e3e0cb5b9834501b7edb4,Paul Draper,2021-04-26 18:19:42+00:00,"Support readonly and deferrable for non-serializable transactions (#747)

Resolves #743",False,34,11,23,1.0,1.0,0.9,17446,8209,11997,907,2.086073500967118,60.872222939423835,36.82608695652174,64.43478260869566,416.8766941776499,3.383908689342467,3601.8137226217445,200.10076236787458,0.13895889805921657
500,fa2c1e501980fe3bd47821b2224f63cc755c6971,Fantix King,2021-04-26 18:20:08+00:00,Rename _Retry to _RetryConnectSignal (#723),False,8,4,4,,,,17446,8209,11997,907,2.086073500967118,60.872222939423835,36.82608695652174,64.43478260869566,416.8766941776499,3.383908689342467,3601.8137226217445,200.10076236787458,0.13895889805921657
501,ab6c4366836a552eea2a2535dce30ab3c0764f9d,Elvis Pranskevichus,2021-05-17 18:51:10+00:00,asyncpg v0.23.0,False,2,1,1,,,,17446,8209,11997,907,2.086073500967118,60.872222939423835,36.82608695652174,64.43478260869566,416.8766941776499,3.383908689342467,3601.8137226217445,200.10076236787458,0.13895889805921657
502,edefd69b4a0dadd045c83159edd8fc6bc05c276a,Elvis Pranskevichus,2021-05-17 19:10:11+00:00,Post-release version bump,False,2,1,1,,,,17446,8209,11997,907,2.086073500967118,60.872222939423835,36.82608695652174,64.43478260869566,416.8766941776499,3.383908689342467,3601.8137226217445,200.10076236787458,0.13895889805921657
503,d08a9b8b9c2c68d469aeb9c4112d83c56c24f11c,Fantix King,2021-07-24 19:24:22+00:00,"Break connection internal circular reference (#774)

The connection will now terminate itself immediately if there is no
external reference to it.

Refs #772",False,21,12,9,1.0,1.0,1.0,17449,8210,11999,907,2.085024154589372,60.873551980482084,36.869565217391305,64.5,417.4736494859186,3.383677980833085,3605.703605956308,200.31686699757253,0.13915788316197283
504,da58cd26d3b2763ffa52533d72b3b2aee2c64108,Andrey Semakin,2021-08-02 21:13:23+00:00,Drop support for Python 3.5 (#777),False,81,12,69,1.0,0.03225806451612903,0.03225806451612903,17403,8176,11957,907,2.0843023255813953,61.16846526581142,36.630434782608695,64.19565217391305,415.8520612065963,3.328605517064969,3595.983213147541,199.77684517486324,0.13861735373553205
505,d0761694bd7882c047e4fedae17291abf67cf69e,Natrinicle,2021-08-02 21:28:36+00:00,"Make Server Version Extraction More Flexible (#778)

https://github.com/MagicStack/asyncpg/issues/250
https://github.com/MagicStack/asyncpg/issues/261
https://github.com/MagicStack/asyncpg/issues/771

Just tried to use this library through Ormar->Databases->AsyncPG against
a Yugabyte cluster and hit issue 771. Looks like this has been a problem
for a while now so going for a complete overhaul of the server version
extraction method. Using a groupdict regex against the version string
allows for much higher flexibility in extracting what we're looking for
and fixes #771 while not breaking any of the existing version patterns.",False,100,53,47,0.0,1.0,,17409,8155,11966,904,2.0872093023255816,61.30901617753238,36.47826086956522,64.06521739130434,414.9547232815989,3.257813989751703,3583.551925931055,199.08621810728073,0.13831824109386623
506,de07d0ab6f98cbde8bbdef4ac3e62aa0a73fa283,Kassym Dorsel,2021-08-02 22:23:17+00:00,Add issubset and issuperset methods to the Range type (#563),False,89,89,0,0.40625,0.71875,1.0,17498,8186,12034,910,2.096339113680154,61.87059277528805,36.170212765957444,63.787234042553195,413.1650403562689,3.2434566467341033,3567.0601254426665,198.17000696903685,0.13772168011875627
507,abf556991521b2056d44bc0e1d8cde7762cbcd2d,Elvis Pranskevichus,2021-08-05 18:38:23+00:00,Add support for Python 3.10 (#795),False,48,29,19,,,,17499,8186,12035,910,2.096339113680154,61.86978879115381,36.170212765957444,63.787234042553195,413.1650403562689,3.2434566467341033,3567.0601254426665,198.17000696903685,0.13772168011875627
508,67ebbc91ff466c9c48d0a301d8e63ae1b68b939e,Elvis Pranskevichus,2021-08-07 22:30:50+00:00,"Bump minimum required Cython version (#799)

0.29.24 is needed to compile properly under Python 3.10",False,2,1,1,,,,17499,8186,12035,910,2.096339113680154,61.86978879115381,36.170212765957444,63.787234042553195,413.1650403562689,3.2434566467341033,3567.0601254426665,198.17000696903685,0.13772168011875627
509,a6b0f2837691c326d73bc4f722906c4997dc63f4,Elvis Pranskevichus,2021-08-10 00:16:07+00:00,"Add copy_ wrappers to Pool (#661)

The `copy_to_table()` and friends are currently missing from the `Pool`
interface, add them in.

Fixes: #641.",False,196,182,14,0.0,1.0,0.0,17667,8202,12160,910,2.092130518234165,61.845708737908964,36.170212765957444,63.787234042553195,413.1650403562689,3.2434566467341033,3567.0601254426665,198.17000696903685,0.13772168011875627
510,1d33ff625a455d8445d4adc03c0fdbbec53ec5df,Elvis Pranskevichus,2021-08-10 00:16:28+00:00,"Add support for asynchronous iterables to copy_records_to_table() (#713)

The `Connection.copy_records_to_table()` now allows the `records`
argument to be an asynchronous iterable.

Fixes: #689.",False,111,87,24,1.0,1.0,1.0,17709,8213,12173,910,2.092130518234165,61.82863152866677,36.212765957446805,63.851063829787236,413.71190301605424,3.2429870444511137,3568.373491871407,198.24297177063357,0.137903967672018
511,41da093e9b8f502c59091362840a8612b6c32a31,Elvis Pranskevichus,2021-08-10 00:16:51+00:00,"Add support for coroutine functions as listener callbacks (#802)

The `Connection.add_listener()`, `Connection.add_log_listener()` and
`Connection.add_termination_listener()` now allow coroutine functions as
callbacks.

Fixes: #567.",False,141,96,45,0.8148148148148148,1.0,1.0,17760,8249,12203,911,2.0969289827255277,61.79436993938003,36.212765957446805,63.851063829787236,413.71190301605424,3.2429870444511137,3568.373491871407,198.24297177063357,0.137903967672018
512,c674e86a9245631350d855b2664fb3ee734cfe69,Jan Dobes,2021-08-10 00:18:49+00:00,"Add support for sslcert, sslkey and sslrootcert parameters to DSN (#768)

Co-authored-by: Elvis Pranskevichus <elvis@edgedb.com>",False,313,303,10,0.2986111111111111,0.6944444444444444,0.4236111111111111,17931,8313,12303,910,2.109837631327603,61.66879548605117,36.46808510638298,64.85106382978724,421.6196821031821,3.2556191868303457,3720.5127339262776,206.69515188479306,0.140539894034394
513,fe7eb022c3837e1cc12a1e47b46e83e0ff5c8844,Elvis Pranskevichus,2021-08-10 00:29:45+00:00,Fix lint error,False,2,1,1,,,,17931,8313,12303,910,2.109837631327603,61.66879548605117,36.46808510638298,64.85106382978724,421.6196821031821,3.2556191868303457,3720.5127339262776,206.69515188479306,0.140539894034394
514,26e0660e0832a0673da94a3bdc230d7a3105408e,Elvis Pranskevichus,2021-08-10 00:34:51+00:00,Bump development dependencies,False,14,7,7,,,,17931,8313,12303,910,2.109837631327603,61.66879548605117,36.46808510638298,64.85106382978724,421.6196821031821,3.2556191868303457,3720.5127339262776,206.69515188479306,0.140539894034394
515,b694c3a477bbab6157bf402320f9f52586e33bff,Elvis Pranskevichus,2021-08-10 04:59:14+00:00,Use cibuildwheel to build release wheels,False,234,67,167,0.5,0.5,0.5,17937,8313,12309,910,2.1117478510028653,61.65985582342786,36.5531914893617,64.97872340425532,422.74068379980537,3.254621846404814,3727.1924383665933,207.06624657592175,0.14091356126660176
516,36658fa9cff0c4910ad8c042e754ef37b23919e7,Elvis Pranskevichus,2021-08-10 05:10:17+00:00,"asyncpg v0.24.0

Changes
-------

* Drop support for Python 3.5 (#777)
  (by @and-semakin in da58cd26 for #777)

* Add support for Python 3.10 (#795)
  (by @elprans in abf55699 for #795)

* Add support for asynchronous iterables to copy_records_to_table() (#713)
  (by @elprans in 1d33ff62 for #713)

* Add support for coroutine functions as listener callbacks (#802)
  (by @elprans in 41da093e for #802)

* Add support for sslcert, sslkey and sslrootcert parameters to DSN (#768)
  (by @jdobes and @elprans in c674e86a for #768)

* Add copy_ wrappers to Pool (#661)
  (by @elprans in a6b0f283 for #661)

* Add issubset and issuperset methods to the Range type (#563)
  (by @kdorsel in de07d0ab for #563)

Fixes
-----

* Break connection internal circular reference (#774)
  (by @fantix in d08a9b8b for #774)

* Make Server Version Extraction More Flexible (#778)
  (by @Natrinicle in d0761694 for #778)",False,2,1,1,,,,17937,8313,12309,910,2.1117478510028653,61.65985582342786,36.5531914893617,64.97872340425532,422.74068379980537,3.254621846404814,3727.1924383665933,207.06624657592175,0.14091356126660176
517,383c711eb68bc6a042c121e1fddfde0cdefb8068,Fantix King,2021-09-15 19:10:47+00:00,"Fix SSL compatibility of libpq (#827)

Co-authored-by: Elvis Pranskevichus <elvis@magic.io>",False,907,713,194,0.19618528610354224,0.8201634877384196,0.3569482288828338,18357,8508,12684,913,2.128301886792453,61.16267840001492,36.8125,65.45833333333333,427.1711958168758,3.2782348952831835,3876.139876631749,215.34110425731924,0.14239039860562522
518,0a3ae7f5bc614f4a5408cb1901f175b30944120f,Bill Schnurr,2021-11-06 21:04:18+00:00,"Update __all__ statements to a simpler form that is better supported by typecheckers  (#828)

Update __all__ statements to a simpler form that's better supported by static type checkers like pyright/pylance

https://github.com/microsoft/pyright/blob/main/docs/typed-libraries.md#library-interface",False,10,5,5,,,,18357,8510,12683,913,2.128301886792453,61.07382917348852,36.770833333333336,65.45833333333333,427.09807550428565,3.2990682286165165,3876.1658164754535,215.3425453597473,0.14236602516809518
519,3a90fef05b87a7bc31ae51d28a6e3c118b278c7d,Elvis Pranskevichus,2021-11-07 20:52:23+00:00,"Fix test_timetz_encoding on Python 3.10

Passing `decimal.Decimal` to `datetime.combine` raises on Python 3.10",False,2,1,1,,,,18357,8510,12683,913,2.128301886792453,61.07382917348852,36.770833333333336,65.45833333333333,427.09807550428565,3.2990682286165165,3876.1658164754535,215.3425453597473,0.14236602516809518
520,2f4fe53915b236076674dfb7c65dacefe2a00ef6,Elvis Pranskevichus,2021-11-07 20:52:23+00:00,"Fix a bunch of ResourceWarnings in the test suite

Make sure things get freed properly otherwise Python gets unhappy
with ResourceWarnings.",False,24,18,6,0.4,1.0,1.0,18369,8520,12693,913,2.1311320754716983,61.05100104408695,36.833333333333336,65.58333333333333,427.87246223825986,3.3005683246226614,3878.5974710946352,215.47763728303516,0.14262415407941992
521,4d39a05268ce4cc01b00458223a767542da048b8,Elvis Pranskevichus,2021-11-07 20:52:23+00:00,"Fix SSLContext deprecation warnings

`SSLContext(PROTOCOL_SSL...)` should not be used anymore.  Also, silence
the one test where we deliberately test TLS v1.1",False,71,40,31,0.0,1.0,1.0,18378,8523,12701,913,2.1311320754716983,61.04947369329253,36.833333333333336,65.58333333333333,427.87246223825986,3.3005683246226614,3878.5974710946352,215.47763728303516,0.14262415407941992
522,603e3868279cdf327aac50312ad1aa2d5c85cd5c,Elvis Pranskevichus,2021-11-16 06:12:48+00:00,"Add Pool methods to determine its min, max, current and idle size (#849)

The new `Pool.get_size()`, `Pool.get_min_size()`, `Pool.get_max_size()`,
`Pool.get_idle_size()` methods are added to get the size of the current,
minimum, maximum and idle connection set size at any given moment.",False,55,55,0,0.41379310344827586,1.0,1.0,18433,8552,12730,913,2.126522961574508,60.99876315178029,37.020833333333336,65.85416666666667,430.13029995414445,3.3102814410666657,3909.897671119979,217.21653728444315,0.14337676665138147
523,a2a92374d13bedb4947bdbedace173a90f59e175,Elvis Pranskevichus,2021-11-16 06:13:04+00:00,"Fix the description of the database argument to connect() (#847)

The docs incorrectly claim that the `database` argument defaults to
the OS username, whereas in fact, the computed value of the `user`
argument is used.

Fixes: #823.",False,2,1,1,,,,18433,8552,12730,913,2.126522961574508,60.99876315178029,37.020833333333336,65.85416666666667,430.13029995414445,3.3102814410666657,3909.897671119979,217.21653728444315,0.14337676665138147
524,03a3d18f2ca6fa661b9cbee0b83ba5165cdf77d9,Elvis Pranskevichus,2021-11-16 06:13:20+00:00,"Make it possible to specify a statement name in Connection.prepare() (#846)

This adds the new `name` keyword argument to `Connection.prepare()` and
`PreparedStatement.get_name()` method returning the name of a statement.

Some users of asyncpg might find it useful to be able to control how
prepared statements are named, especially when a custom prepared
statement caching scheme is in use.  Specifically, This should help with
pgbouncer support in SQLAlchemy asyncpg dialect.

Fixes: #837.",False,46,41,5,0.8846153846153846,0.9230769230769231,0.5769230769230769,18469,8564,12753,913,2.126286248830683,60.97195987150348,37.0625,65.91666666666667,430.70323364751766,3.310065313853523,3913.631579923354,217.42397666240842,0.14356774454917254
525,f900b73714f20470a566efd4d0b93ec0a565a93f,Elvis Pranskevichus,2021-11-16 06:13:35+00:00,"Fix parsing of IPv6 addresses in the connection URI (#845)

Plain IPv6 addresses specified in square brackets in the connection URI
are now parsed correctly.

Fixes: #838.",False,56,52,4,0.0,0.35294117647058826,0.0,18517,8571,12788,916,2.1281571562207673,60.96649623430411,37.125,66.0,431.54547456353686,3.3078723313973826,3918.9019576190058,217.71677542327794,0.14384849152117893
526,a8fc21e0a59a6def9c903b34f8754cea58b50d98,Elvis Pranskevichus,2021-11-16 15:31:59+00:00,Improve diagnostics of invalid executemany() input (#848),False,69,57,12,0.0,1.0,1.0,18536,8577,12805,916,2.1261682242990654,60.94805611677529,37.125,66.0,431.54547456353686,3.3078723313973826,3918.9019576190058,217.71677542327794,0.14384849152117893
527,d64a44a1111c336f3c34fa75a32c2e5c6d826b74,Elvis Pranskevichus,2021-11-16 18:39:36+00:00,Implement support for multirange types (#851),False,376,341,35,0.0,1.0,0.9387755102040817,18715,8595,12965,916,2.1288515406162465,60.821854183989636,37.25,66.1875,433.3667231102285,3.3050390386621022,3930.053272544986,218.33629291916577,0.14445557437007614
528,40491678598aed0d2ecc8f51a9d856739a85cb34,Elvis Pranskevichus,2021-11-16 19:01:57+00:00,Add PostgreSQL 14 to the support matrix (#852),False,28,20,8,0.0,0.0,1.0,18726,8600,12971,916,2.1267474370922645,60.81482356737805,37.270833333333336,66.25,433.7848008680747,3.306791489642494,3933.8707147048076,218.54837303915585,0.14459493362269152
529,78b83f8dbaf4a0b6ce637b52442d06f8abf53873,Elvis Pranskevichus,2021-11-16 22:10:22+00:00,"Fix `test_tls_version` in some environments

The kinds of errors raised on invalid TLS configuration seem to differ
between platforms.",False,10,7,3,0.0,1.0,1.0,18730,8600,12975,916,2.1267474370922645,60.814513465011174,37.270833333333336,66.25,433.7848008680747,3.306791489642494,3933.8707147048076,218.54837303915585,0.14459493362269152
530,220d1d508a90a7db2a8172348561406a9316c3ca,Elvis Pranskevichus,2021-11-16 22:11:19+00:00,"Release workflow updates

* Add musllinux support
* Build 32-bit packages for Windows (fixes #834)
* Don't ship Cython-generated *.c files in wheels",False,65,45,20,,,,18734,8600,12979,917,2.1267474370922645,60.81727375482979,37.270833333333336,66.25,433.7848008680747,3.306791489642494,3933.8707147048076,218.54837303915585,0.14459493362269152
531,7a2dfdc327b49e474b1c1e8857581a1bc7252e6f,Elvis Pranskevichus,2021-11-16 22:11:20+00:00,"asyncpg v0.25.0

Changes
-------

* Improve SSL option compatibility in URIs
  (by @fantix in 383c711e for #827)

* Add `Pool` methods to determine its min, max, current and idle size
  (by @elprans in 603e3868 for #849)

* Make it possible to specify a statement name in `Connection.prepare()`
  (by @elprans in 03a3d18f for #846)

* Implement support for `multirange` types
  (by @elprans in d64a44a1 for #851)

Fixes
-----

* Make sure timeout callbacks always get cleaned up
  (by @elprans in dad26913 for #831)

* Update `__all__` statements to a simpler form that is better supported by typecheckers
  (by @bschnurr in 0a3ae7f5 for #828)

* Fix `test_timetz_encoding` on Python 3.10
  (by @elprans in 3a90fef0)

* Fix a bunch of `ResourceWarnings` in the test suite
  (by @elprans in 2f4fe539)

* Fix `SSLContext` deprecation warnings
  (by @elprans in 4d39a052)

* Fix the description of the database argument to `connect()`
  (by @elprans in a2a92374 for #847)

* Fix parsing of IPv6 addresses in the connection URI
  (by @elprans in f900b737 for #845)

* Improve diagnostics of invalid `executemany()` input
  (by @elprans in a8fc21e0 for #848)",False,2,1,1,,,,18734,8600,12979,917,2.1267474370922645,60.81727375482979,37.270833333333336,66.25,433.7848008680747,3.306791489642494,3933.8707147048076,218.54837303915585,0.14459493362269152
532,1259bfd172e869aded1236b15ea1dbb9f0a770c9,Elvis Pranskevichus,2021-11-16 23:22:55+00:00,Post-release version bump,False,2,1,1,,,,18734,8600,12979,917,2.1267474370922645,60.81727375482979,37.270833333333336,66.25,433.7848008680747,3.306791489642494,3933.8707147048076,218.54837303915585,0.14459493362269152
533,2519cf386fa9ef94198744e7e311769c1fb92279,Baltazár Radics,2022-03-25 22:21:23+00:00,Add record_class parameter Pool.fetch and Pool.fetchrow (#896),False,24,20,4,0.0,1.0,0.0,18750,8600,12995,917,2.1267474370922645,60.81590110604847,37.270833333333336,66.25,433.7848008680747,3.306791489642494,3933.8707147048076,218.54837303915585,0.14459493362269152
534,cca4a2d38f3ad6d92b7255e16dcf9a6cb6ee1e74,QuantumTM,2022-03-25 23:03:47+00:00,Domain basetypes are introspected (#886) (#887),False,25,25,0,0.0,1.0,1.0,18775,8607,13015,920,2.125698324022346,60.79643157106549,37.270833333333336,66.25,433.7848008680747,3.306791489642494,3933.8707147048076,218.54837303915585,0.14459493362269152
535,fb3b6bf7d6557b87370eff28141e02aea6256954,Krzysztof Warunek,2022-03-25 23:44:22+00:00,"Add support to use awaitable object in password function.   (#889)

Add support to use awaitable object in password function.  This will allow to pass lambda or `functools.partial` that returns `Future`.",False,26,22,4,1.0,1.0,1.0,18793,8617,13029,920,2.124651162790698,60.78979040990952,37.270833333333336,66.25,433.7848008680747,3.306791489642494,3933.8707147048076,218.54837303915585,0.14459493362269152
536,bd192623d05668b5919d55d3b9a62629594e2fb7,Elvis Pranskevichus,2022-03-27 22:14:46+00:00,"Properly handle exceptions raised while handling server auth messages (#862)

When server sends us an authentication request message and we fail to
process it, we must terminate the connection and propagate the exception
immediately.  Currently asyncpg will just timeout waiting for
`ReadyForQuery` from the server, which will never arrive.

Fixes: #861",False,38,28,10,1.0,1.0,1.0,18798,8619,13034,920,2.124651162790698,60.788829604792916,37.270833333333336,66.25,433.7848008680747,3.306791489642494,3933.8707147048076,218.54837303915585,0.14459493362269152
537,f2a937d2f25d1f997a066e6ba02acc3c4de676a4,Jack Wotherspoon,2022-06-13 20:39:43+00:00,"Support direct TLS connections (i.e. no STARTTLS) (#923)

Adding direct_tls param that when equal to True alongside the ssl param being set to a ssl.SSLContext will result in a direct SSL connection being made, skipping STARTTLS implementation.

Closes #906",False,34,27,7,0.0,0.46153846153846156,0.23076923076923078,18818,8623,13044,924,2.127441860465116,60.7851682899554,37.354166666666664,66.375,434.92058428990543,3.3036182306098603,3941.856835546229,218.99204641923484,0.1449735280966351
538,d502abb7ed2307c6220649590aa74a3455d5e06c,Elvis Pranskevichus,2022-07-07 18:55:47+00:00,Document direct_tls support version,False,3,3,0,0.0,1.0,0.0,18821,8623,13044,924,2.127441860465116,60.78472822046678,37.354166666666664,66.375,434.92058428990543,3.3036182306098603,3941.856835546229,218.99204641923484,0.1449735280966351
539,9825bbb61140e60489b8d5649a288d1f67c0ef9f,Elvis Pranskevichus,2022-07-07 19:03:36+00:00,"asyncpg v0.26.0

Changes
-------

* Add support to use awaitable object in password function.   (#889)
  (by @kwarunek in fb3b6bf7 for #889)

* Support direct TLS connections (i.e. no STARTTLS) (#923)
  (by @jackwotherspoon in f2a937d2 for #923)

Fixes
-----

* Fix invalid `pyproject.toml` (#900)
  (by @Rongronggg9 in eddb649c for #900)

* Add record_class parameter Pool.fetch and Pool.fetchrow (#896)
  (by @baltitenger in 2519cf38 for #896)

* Domain basetypes are introspected (#886) (#887)
  (by @QuantumTM in cca4a2d3 for #886)

* Properly handle exceptions raised while handling server auth messages (#862)
  (by @elprans in bd192623 for #862)",False,4,2,2,,,,18821,8623,13044,924,2.127441860465116,60.78472822046678,37.354166666666664,66.375,434.92058428990543,3.3036182306098603,3941.856835546229,218.99204641923484,0.1449735280966351
540,7bd6c49f8a58d02ae5a9567d4303f9a8d17b513e,ddelange,2022-09-27 19:57:03+00:00,Add arm64 mac and linux wheels (#954),False,63,45,18,,,,18821,8623,13044,924,2.127441860465116,60.78472822046678,37.354166666666664,66.375,434.92058428990543,3.3036182306098603,3941.856835546229,218.99204641923484,0.1449735280966351
541,0e73fec27884d94d8205f2d0a71dc74b5ec6fc49,Jon Parise,2022-10-11 18:29:23+00:00,"Upgrade to flake8 5.0.4 (from 3.9.2) (#961)

This moves the project to a more modern version of flake8 (and its
dependencies). No new lint issues were identified by this upgrade.",False,6,1,5,,,,18817,8623,13040,921,2.127441860465116,60.76964801614747,37.354166666666664,66.375,434.92058428990543,3.3036182306098603,3941.856835546229,218.99204641923484,0.1449735280966351
542,eccdf61afb0116f9500f6fb2f832058ba8eb463e,Jon Parise,2022-10-11 22:35:48+00:00,"Use the exact type name in Record.__repr__ (#959)

We support Record subclasses, so include the exact type name (rather
than just 'Record') in the repr() string.",False,30,26,4,0.6842105263157895,0.6842105263157895,1.0,18818,8624,13041,921,2.127441860465116,60.768947347466074,37.354166666666664,66.375,434.92058428990543,3.3036182306098603,3941.856835546229,218.99204641923484,0.1449735280966351
543,bb0cb39de43964599f944c51a35edc4df5cbd6fb,Bryan Forbes,2022-10-26 19:34:12+00:00,Drop Python 3.6 support (#940),False,65,11,54,0.23076923076923078,0.23076923076923078,0.38461538461538464,18785,8599,13013,919,2.1296641791044775,60.883784302173346,37.270833333333336,66.27083333333333,434.2322987255575,3.2939077327743624,3937.593492277456,218.75519401541408,0.1447440995751858
544,eab7fdf2f014785cdc2245c8bcb6bc086763b702,Elvis Pranskevichus,2022-10-26 21:35:44+00:00,"Test on Python 3.11 and PostgreSQL 15, fix workflow deprecations (#968)",False,48,25,23,1.0,1.0,1.0,18787,8601,13015,919,2.1296641791044775,60.88305124674299,37.270833333333336,66.27083333333333,434.2322987255575,3.2939077327743624,3937.593492277456,218.75519401541408,0.1447440995751858
545,925cfe15be00776cb9b1a7d76bca74e0b5b2f4f1,Elvis Pranskevichus,2022-10-26 21:37:20+00:00,"asyncpg v0.27.0

Support Python 3.11 and PostgreSQL 15.  This release also drops support
for Python 3.6.

Changes
=======

* Add arm64 mac and linux wheels
  (by @ddelange in 7bd6c49f for #954)

* Add Python 3.11 to the test matrix
  (by @elprans in 5f908e67 for #948)

* Exclude .venv from flake8 (#958)
  (by @jparise in 40b16ea6 for #958)

* Upgrade to flake8 5.0.4 (from 3.9.2) (#961)
  (by @jparise in 0e73fec2 for #961)

* Show an example of a custom Record class (#960)
  (by @jparise in 84c99bfd for #960)

* Use the exact type name in Record.__repr__ (#959)
  (by @jparise in eccdf61a for #959)

* Drop Python 3.6 support (#940)
  (by @bryanforbes in bb0cb39d for #940)

* Test on Python 3.11 and PostgreSQL 15, fix workflow deprecations (#968)
  (by @elprans in eab7fdf2 for #968)",False,2,1,1,,,,18787,8601,13015,919,2.1296641791044775,60.88305124674299,37.270833333333336,66.27083333333333,434.2322987255575,3.2939077327743624,3937.593492277456,218.75519401541408,0.1447440995751858
546,a6e2f183507e774aa75de5b6f325fdb2574a544e,Elvis Pranskevichus,2022-10-26 22:37:54+00:00,Post-release version bump,False,2,1,1,,,,18787,8601,13015,919,2.1296641791044775,60.88305124674299,37.270833333333336,66.27083333333333,434.2322987255575,3.2939077327743624,3937.593492277456,218.75519401541408,0.1447440995751858
547,43bd82c54e29352ae08b1982c23b9cb0cc33717d,Elvis Pranskevichus,2022-10-26 22:54:38+00:00,Correct the development version,False,2,1,1,,,,18787,8601,13015,919,2.1296641791044775,60.88305124674299,37.270833333333336,66.27083333333333,434.2322987255575,3.2939077327743624,3937.593492277456,218.75519401541408,0.1447440995751858
548,d2e710fe296febb3c370319f87ef8c5b32152002,Floris van Nee,2022-11-28 17:29:36+00:00,"Do not try to cleanup statements (#981)

This supports a case where we prepare an unnamed statement to inspect the return types.
The statement should not be cleaned up afterwards because it is automatically cleaned up by Postgres",False,1,1,0,1.0,1.0,1.0,18788,8601,13016,919,2.1305970149253732,60.880179432093854,37.291666666666664,66.29166666666667,434.44033560923003,3.293803821888338,3938.880045006504,218.82666916702786,0.14481344520307665
549,9cb2c1ce044768ef7c396976b8abf896fad901f7,David Baumgold,2022-12-03 05:41:35+00:00,Add Pool.is_closing() method (#973),False,18,18,0,1.0,1.0,1.0,18806,8613,13027,919,2.129422718808194,60.8648913844153,37.333333333333336,66.35416666666667,434.96171541042804,3.293076594494721,3942.7745866506825,219.04303259170445,0.14498723847014264
550,7df9812a068c95e5dd4aa1d0270db8f177ee1e50,Anna,2022-12-03 05:42:18+00:00,"Fix test_tls_version for LibreSSL (#974)

Context: https://github.com/python/cpython/issues/78182",False,15,8,7,0.0,1.0,1.0,18807,8614,13028,919,2.1303538175046555,60.860862092979325,37.354166666666664,66.39583333333333,435.29148078672216,3.2922326515934865,3945.3406644542406,219.1855924696799,0.1450971602622407
551,172b8f693f4b6885bec60001964fee13fc8de644,Léonard Besson,2023-03-12 00:21:14+00:00,Handle environments without home dir (#1011),False,88,68,20,0.3,0.75,0.75,18855,8640,13071,919,2.133828996282528,60.78766927590676,37.395833333333336,66.77083333333333,438.28335676146594,3.3014215135789584,4022.7607902610994,223.48671057006095,0.14609445225382195
552,bf74e88bb5193b39cf942a6f0e9b838da3d0214a,JesseDeLoore,2023-05-08 16:18:11+00:00,"Add support for target_session_attrs (#987)

This adds support for the `target_session_attrs` connection option.

Co-authored-by: rony batista <rony.batista@revolut.com>
Co-authored-by: Jesse De Loore <jesse@sennac.be>",False,452,377,75,0.3951219512195122,0.6487804878048781,0.6536585365853659,19157,8769,13305,919,2.140767824497258,60.6246852721518,37.895833333333336,67.72916666666667,446.56150368617847,3.26749160216961,4071.2822379630366,226.18234655350193,0.14885383456205944
553,2f20bae772d71122e64f424cc4124e2ebdd46a58,Benoit C. Sirois,2023-05-30 21:18:28+00:00,Add support for READ UNCOMMITTED (#1039),False,18,14,4,0.0,0.25,1.0,19167,8771,13315,919,2.1416819012797075,60.60543784682854,37.9375,67.85416666666667,447.3487985695371,3.2697438544218618,4076.2146897697153,226.45637165387302,0.14911626618984566
554,faa94d1e3ce103c458dc0b5c5f16dc15f3d3a1a5,Elvis Pranskevichus,2023-07-06 23:24:06+00:00,"Move most metadata to pyproject.toml (#1045)

Catch up with the times.",False,194,99,95,0.0,0.1,0.9,19110,8769,13265,910,2.1462522851919563,60.60500856184873,37.895833333333336,67.83333333333333,447.1385307783455,3.2863130552015893,4084.2707944484405,226.9039330249133,0.14904617692611513
555,6043d913651148a216b5022708ad1bee236ca0a6,Elvis Pranskevichus,2023-07-06 23:53:47+00:00,"Fix closing of connection discarded by session target attrs (#1046)

`asyncio.gather` takes a variadic, not an iterable and
`return_exceptions` was masking the issue.",False,2,1,1,,,,19110,8769,13265,910,2.1462522851919563,60.60500856184873,37.895833333333336,67.83333333333333,447.1385307783455,3.2863130552015893,4084.2707944484405,226.9039330249133,0.14904617692611513
556,bc79953ee478bd2526d66343fa53f61b67fe9234,Elvis Pranskevichus,2023-07-06 23:54:39+00:00,Minor edits to the `target_session_attrs` patch.,False,33,17,16,0.0,1.0,0.0,19111,8769,13265,910,2.1462522851919563,60.604554944321386,37.895833333333336,67.83333333333333,447.1385307783455,3.2863130552015893,4084.2707944484405,226.9039330249133,0.14904617692611513
557,9a12d149a8ff5f1a0d252a70a7015dc2876c0148,Elvis Pranskevichus,2023-07-07 00:21:41+00:00,"asyncpg v0.28.0

Minor fixes and improvements.

Changes
=======

* Do not try to cleanup statements (#981)
  (by @fvannee in d2e710fe for #981)

* Add Pool.is_closing() method (#973)
  (by @singingwolfboy in 9cb2c1ce for #973)

* Fix test_tls_version for LibreSSL (#974)
  (by @CyberTailor in 7df9812a for #974)

* Handle environments without home dir (#1011)
  (by @LeonardBesson in 172b8f69 for #1011)

* fix: salt and iterations parsing for scram (#1026)
  (by @trigonometr in 7443a9e7 for #1026)

* Add support for target_session_attrs (#987)
  (by @JesseDeLoore in bf74e88b for #987)

* Add support for READ UNCOMMITTED (#1039)
  (by @benwah in 2f20bae7 for #1039)

* Update benchmarks, add psycopg3 (#1042)
  (by @elprans in 7d4fcf04 for #1042)",False,8,3,5,,,,19111,8769,13265,910,2.1462522851919563,60.604554944321386,37.895833333333336,67.83333333333333,447.1385307783455,3.2863130552015893,4084.2707944484405,226.9039330249133,0.14904617692611513
558,511aeb2368f6a6e03b2bd5f58127d98e91c3eb54,Elvis Pranskevichus,2023-07-07 02:29:37+00:00,Post-release version bump,False,2,1,1,,,,19111,8769,13265,910,2.1462522851919563,60.604554944321386,37.895833333333336,67.83333333333333,447.1385307783455,3.2863130552015893,4084.2707944484405,226.9039330249133,0.14904617692611513
559,87ab14315ef867df68861f35b7e2cc3158d65afd,Bryan Forbes,2023-08-15 23:07:11+00:00,Drop support for Python 3.7 (#1064),False,30,11,19,,,,19107,8767,13261,910,2.1462522851919563,60.67597082163775,37.645833333333336,67.58333333333333,445.71431358354266,3.2440930203344958,4076.9576352968465,226.49764640538024,0.14857143786118085
560,cbf64e18a03d69b712bab1790584fc1a4a5b2bb6,Elvis Pranskevichus,2023-08-17 16:30:06+00:00,"When prepared statements are disabled, avoid relying on them harder (#1065)

It appears that PgBouncer's `transaction` pooling mode does not consider
implicit transactions properly, and so in a [`Parse`, `Flush`, `Bind`,
`Execute`, `Sync`] sequence, `Flush` would be (incorrectly) considered by
PgBouncer as a transaction boundary and it will happily send the
following `Bind` / `Execute` messages to a different backend process.

This makes it so that when `statement_cache_size` is set to `0`, asyncpg
assumes a pessimistic stance on prepared statement persistence and does
not rely on them even in implicit transactions.  The above message
sequence thus becomes `Parse`, `Flush`, `Parse` (a second time), `Bind`,
`Execute`, `Sync`.

This obviously has negative performance impact due to the extraneous
`Parse`.

Fixes: #1058
Fixes: #1041",False,106,81,25,0.4,1.0,0.0,19123,8766,13272,915,2.147166361974406,60.67127641527114,37.8125,67.875,448.3378307581215,3.2559741672331275,4126.846956989188,229.2692753882881,0.14944594358604044
561,af922bcf79a0f831892b1173f3409384e0958a83,Elvis Pranskevichus,2023-08-17 18:31:04+00:00,"Handle environments with HOME set to a not-a-directory (#1063)

If `HOME` points to a regular file (or `/dev/null`), make sure we don't
crash unnecessarily, and if we do need to crash, so so informatively.

Fixes: #1014",False,103,78,25,0.13953488372093023,0.5348837209302325,0.5348837209302325,19176,8784,13318,915,2.145985401459854,60.66255853314458,37.8125,67.875,448.3378307581215,3.2559741672331275,4126.846956989188,229.2692753882881,0.14944594358604044
562,922fcd105502a07c7e550dcabceac9284de29307,Elvis Pranskevichus,2023-08-17 18:50:47+00:00,"Add support for tuple-format custom codecs on composite types (#1061)

It is now possible to `set_type_codec('mycomposite', ... format='tuple')`,
which is useful for types that are represented by a composite type in
Postgres, but are an integral type in Python, e.g. `complex`.

Fixes: #1060",False,248,192,56,0.045454545454545456,1.0,0.6136363636363636,19234,8806,13362,915,2.1446769790718836,60.59320665491547,37.854166666666664,67.89583333333333,448.2594823565842,3.2690134394848678,4156.034296737417,230.8907942631898,0.1494198274521947
563,89d5bd032335fd39cb24f972bb669ab91de57394,Elvis Pranskevichus,2023-08-17 20:50:14+00:00,"Fix handling of non-ASCII passwords (#1062)

Fixes: #1018",False,37,20,17,,,,19237,8807,13363,915,2.1446769790718836,60.59158314591608,37.895833333333336,67.95833333333333,448.7860240238784,3.2675343995930493,4159.76398133402,231.09799896300106,0.14959534134129276
564,7cb4e70d88d165273997d914280c6d109fbbc8f6,Elvis Pranskevichus,2023-08-24 18:35:16+00:00,"Support `target_session_attrs` in URL format, add tests (#1073)",False,43,43,0,0.0,0.0,0.0,19280,8811,13402,915,2.1464968152866244,60.589431254152906,37.895833333333336,68.08333333333333,449.7503047135867,3.2714406495930493,4189.340278113666,232.74112656187026,0.14991676823786218
565,f21ebf6474fa58cc9133667063683cae05175a09,Elvis Pranskevichus,2023-10-07 21:06:02+00:00,"Disable JIT while doing type introspection (#1082)

The misapplication of JIT to asyncpg introspection queries has been a
constant source of user complaints.

Closes: #530
Closes: #1078
Previously: #875, #794, #782, #741, #727 (and probably more).",False,52,48,4,0.0,1.0,0.23076923076923078,19324,8831,13442,915,2.148181818181818,60.59828129579256,37.9375,68.14583333333333,450.66958062413164,3.2709951633962677,4197.813043381842,233.21183574343567,0.15022319354137717
566,0c3bf600694065119a7a109eed1081f56e4f05a6,Vitaly Kirsanov,2023-10-08 21:33:34+00:00,Issue #1020 Infinity numeric support (#1067),False,37,26,11,0.0,1.0,1.0,19339,8839,13455,915,2.149090909090909,60.5919313608242,37.979166666666664,68.20833333333333,451.29348061795093,3.269698827089591,4201.535322584424,233.41862903246792,0.15043116020598357
567,deea86cebf69a2b489d5e0bfa8ba5b5a562b5839,Elvis Pranskevichus,2023-10-08 21:56:39+00:00,Test on Python 3.12 and PostgreSQL 16 (#1084),False,43,26,17,,,,19344,8841,13458,915,2.148047229791099,60.59098953283507,37.979166666666664,68.20833333333333,451.29348061795093,3.269698827089591,4201.535322584424,233.41862903246792,0.15043116020598357
568,4ddb039746a99b31cc4724329dd600b87a3f9469,ermakov-oleg,2023-10-09 04:49:54+00:00,"Remove connection parameter caching in `Pool` (#1053)

Currently, `asyncpt.Pool` will cache various aspects of the connection,
like the selected host and connection parameters in an attempt to make
subsequent connection attempts somewhat faster.  This behavior is
dubious because server host availability and role may change, such as
when a primary becomes a standby and vice-versa or when a host becomes
unavailable permanently, but another host from the DSN can be picked up.
Just remove it.",False,112,75,37,0.7391304347826086,1.0,1.0,19382,8856,13484,916,2.1447963800904977,60.58055133475136,38.041666666666664,68.27083333333333,451.7121605866794,3.267658018532981,4200.1692221645035,233.3427345646946,0.15057072019555975
569,4bdd8a7e73b45751a4cde02070518a9e7c4246b2,Elvis Pranskevichus,2023-10-09 17:07:50+00:00,"Switch to Python 3.12-style `wait_for` (#1086)

`wait_for` has been a mess with respect to cancellations
consistently in `asyncio`.  Hopefully the approach taken in
Python 3.12 solves the issues, so adopt that instead of trying
to ""fix"" `wait_for` with wrappers on older Pythons.  Use `async_timeout`
as a polyfill on pre-3.11 Python.

Closes: #1056
Closes: #1052
Fixes: #955",False,116,98,18,1.0,1.0,1.0,19459,8883,13509,941,2.14453477868112,61.020900005533264,37.53061224489796,67.16326530612245,443.5508135553997,3.258369079379247,4117.425050567305,228.74583614262806,0.1478502711851332
570,313b2b2bedcc10baf5871124ee915fdc48f5c4b7,Elvis Pranskevichus,2023-10-09 17:27:56+00:00,"Use the `timeout` context manager in the connection path (#1087)

Drop timeout management gymnastics from the `connect()` path and use the
`timeout` context manager instead.",False,113,58,55,1.0,1.0,1.0,19462,8888,13510,943,2.141696750902527,60.874824169761084,37.244897959183675,66.6734693877551,438.49935012062775,3.2510226114983545,3995.296281273275,221.96090451518188,0.1461664500402092
571,ccc7baf94cd45fc0155ae522361a6f2b2f551c44,Scott Fredericksen,2023-10-09 17:38:54+00:00,"Small fix for documentation on using SSL in Connection (#995)

The sample code shows asyncio.run(run()), but the function
to be run is named ""main()"".  So this sample does not run.",False,4,2,2,,,,19462,8888,13510,943,2.141696750902527,60.874824169761084,37.244897959183675,66.6734693877551,438.49935012062775,3.2510226114983545,3995.296281273275,221.96090451518188,0.1461664500402092
572,b7ffab6cb3f9bcc5d4f9c5b22398ca9c9e450af2,Kaylynn Morgan,2023-10-09 18:46:05+00:00,Add support for the `WHERE` clause in `copy_to` methods (#941),False,112,98,14,0.23809523809523808,1.0,0.8571428571428571,19546,8919,13555,943,2.144014401440144,60.82900957918812,37.44897959183673,67.0,441.43941033262155,3.264793774905389,4034.9603697722064,224.1644649873448,0.14714647011087378
573,ca9f03be3c64984311dbefbbd9e8ff0806a7f772,Elvis Pranskevichus,2023-10-09 19:34:02+00:00,"Close cursor portals once the iterator is exhausted (#1088)

When iterating on a cursor, make sure to close the portal once iteration
is done.  This prevents the cursor from holding onto resources until the
end of transaction.

Fixes: #1008",False,59,53,6,0.8823529411764706,0.8823529411764706,1.0,19570,8933,13572,946,2.147482014388489,60.80251135587064,37.51020408163265,67.20408163265306,442.6586514600881,3.2691503562476036,4040.9026476754257,224.49459153752363,0.14755288382002932
574,93a6f79afb4251fa48edf6959aa87532eee91ef5,Andrew Geng,2023-10-09 19:51:22+00:00,"Cut BaseProtocol circular reference on close. (#1049)

A bound method contains a reference to the instance it's bound to.
Most of the time, bound methods are created lazily at access time by
the descriptor protocol and discarded after calling. But saving a bound
method as another attribute on the instance creates a long-lived cycle,
here `.timeout_callback.__self__`, that needs to be explicitly broken
if we don't want to wake up python's garbage collector to do it.

Without this change, the new assertion in the tests would fail, and
`pytest --pdb` would show the bound methods `_on_timeout` and
`_on_waiter_completed` at the end of `p gc.get_referrers(protoref())`.

[Also, unset `transport` in `Protocol.abort()` to break another cycle]

Co-authored-by: Elvis Pranskevichus <elvis@edgedb.com>",False,39,25,14,0.0,1.0,1.0,19584,8944,13583,948,2.148381294964029,60.80004166596808,37.51020408163265,67.20408163265306,442.6586514600881,3.2691503562476036,4040.9026476754257,224.49459153752363,0.14755288382002932
575,b2697ffdf18f7acd88a35e9a0a252c3b6fb25070,Dan Watson,2023-10-09 20:15:30+00:00,Add query logging callbacks and context manager (#1043),False,179,169,10,0.3176470588235294,1.0,0.5058823529411764,19743,9024,13680,949,2.14349376114082,61.55134755510198,36.8,65.92,434.3655205222981,3.203564844060025,3964.2957386688236,220.23865214826793,0.14478850684076602
576,d7faaff57a7a9c0029a31f09564d30ab35007907,Marcel,2023-10-10 22:37:14+00:00,fix: allow host tuple (#1021),False,15,14,1,,,,19756,9024,13693,949,2.14349376114082,61.55054509916992,36.8,65.92,434.3655205222981,3.203564844060025,3964.2957386688236,220.23865214826793,0.14478850684076602
577,74f3a0031532b314d9141b6de12aa74db7726b3d,Elvis Pranskevichus,2023-11-05 05:23:21+00:00,"asyncpg v0.29.0

Minor fixes and improvements.

Improvements
============

* Python 3.12 and PostgreSQL 16 support (#1084)
  (by @elprans in deea86ce)

* Add support for tuple-format custom codecs on composite types (#1061)
  (by @elprans in 922fcd10)

* Support `target_session_attrs` in URL format, add tests (#1073)
  (by @elprans in 7cb4e70d)

* Infinity numeric support (#1067)
  (by @krokoziabla in 0c3bf600 for #1020)

* Add support for the `WHERE` clause in `copy_to` methods (#941)
  (by @kaylynn234 in b7ffab6c)

* Add query logging callbacks and context manager (#1043)
  (by @dcwatson in b2697ffd)

Fixes
=====

* When prepared statements are disabled, avoid relying on them harder (#1065)
  (by @elprans in cbf64e18)

* Handle environments with HOME set to a not-a-directory (#1063)
  (by @elprans in af922bcf)

* Fix handling of non-ASCII passwords (#1062)
  (by @elprans in 89d5bd03)

* Disable JIT while doing type introspection (#1082)
  (by @elprans in f21ebf64)

* Remove connection parameter caching in `Pool` (#1053)
  (by @ermakov-oleg in 4ddb0397)

* Switch to Python 3.12-style `wait_for` (#1086)
  (by @elprans in 4bdd8a7e)

* Update automatic PostGIS type conversion for Shapely 2.0 (#1085)
  (by @ChimneySwift in 8b45beb4)

* Use the `timeout` context manager in the connection path (#1087)
  (by @elprans in 313b2b2b)

* Small fix for documentation on using SSL in Connection (#995)
  (by @ScottFred in ccc7baf9)

* Use cleanup_ctx in pool usage doc (#878)
  (by @ir4y in 70c8bd81)

* Close cursor portals once the iterator is exhausted (#1088)
  (by @elprans in ca9f03be)

* Cut BaseProtocol circular reference on close. (#1049)
  (by @pteromys in 93a6f79a)

* Allow passing hosts as tuples to `connect()` (in addition to lists) (#1021)
  (by @lezram in d7faaff5)

Other
=====

* Drop support for Python 3.7 (#1064)
  (by @bryanforbes in 87ab1431)",False,8,3,5,1.0,1.0,0.0,19756,9024,13693,949,2.14349376114082,61.55054509916992,36.8,65.92,434.3655205222981,3.203564844060025,3964.2957386688236,220.23865214826793,0.14478850684076602
578,c2c8d20ba8c0057b0e0bc08bd892abc36862e553,Elvis Pranskevichus,2023-11-05 06:00:18+00:00,Post-release version bump,False,2,1,1,,,,19756,9024,13693,949,2.14349376114082,61.55054509916992,36.8,65.92,434.3655205222981,3.203564844060025,3964.2957386688236,220.23865214826793,0.14478850684076602
579,1d4e56802a14d92b9f90b509ed8d841b851a0286,Eugene Toder,2024-03-04 20:07:32+00:00,"Implement GSSAPI authentication (#1122)

Most commonly used with Kerberos.

Closes: #769",False,283,230,53,1.0,0.9512195121951219,0.5853658536585366,19866,9065,13778,953,2.148049645390071,61.525674732325434,36.88,66.22,436.7680955707152,3.207280339115209,4009.987550126823,222.7770861181568,0.14558936519023838
580,d42432bff29c5fe7c42926a24bd1272dea39af90,Bryan Forbes,2024-03-05 00:37:43+00:00,"Add initial typings (#1127)

* Added typings to miscellaneous files
* Added unit test to check codebase with mypy
* Updated release workflow and build to account for annotations
* Updated manifest to include stub files",False,572,512,60,0.0,1.0,0.8928571428571429,19989,9165,13873,962,2.142480211081794,61.02440680277999,37.06,66.68,439.1860418212423,3.2501139677507247,4034.380154476401,224.13223080424447,0.14639534727374742
581,1aab2094d82104d5eee2cffcfd0c7e7347d4c5b8,Eugene Toder,2024-03-11 17:34:24+00:00,"Implement SSPI authentication (#1128)

SSPI is a Windows technology for secure authentication. SSPI and GSSAPI
interoperate as clients and servers. Postgres documentation recommends
using SSPI on Windows clients and servers and GSSAPI on non-Windows
platforms[1].

Changes in this PR:

* Support AUTH_REQUIRED_SSPI server request. This is the same as
  AUTH_REQUIRED_GSS, except it allows negotiation with SSPI clients.

* Allow using SSPI on the client. Which library to use can be specified
  using the `gsslib` connection parameter.

* Use SSPI instead of GSSAPI on Windows by default. The latter requires
  installing Kerberos for Windows and is unlikely to work out of the
  box.

Closes #142

[1] https://www.postgresql.org/docs/current/sspi-auth.html",False,265,219,46,0.0,0.5945945945945946,0.5135135135135135,20113,9195,13978,965,2.1464912280701753,61.005299743871745,37.18,67.22,443.50028209867537,3.258738314575193,4123.616231222844,229.08979062349135,0.1478334273662251
