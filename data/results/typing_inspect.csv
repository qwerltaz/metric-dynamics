ID,hash,author,date,commit_message,is_merge,lines_changed,insertions,deletions,dmm_unit_size,dmm_unit_complexity,dmm_unit_interfacing,radon_LOC,radon_LLOC,radon_SLOC,radon_comments,radon_avg_cc,radon_avg_MI,radon_avg_vocabulary,radon_avg_length,radon_avg_volume,radon_avg_difficulty,radon_avg_effort,radon_avg_time,radon_avg_bugs
0,f8f4fa322cdd38848b6c0cf420f711c5a7b0e5b1,Ivan Levkivskyi,2017-04-29 15:51:16+00:00,Add initial work,False,481,481,0,0.9135135135135135,0.745945945945946,0.972972972972973,473,202,241,3,2.2333333333333334,65.16407150976484,21.0,29.666666666666668,170.9158262414987,1.6282051282051284,743.2431914983854,41.29128841657696,0.05697194208049957
1,1264167f74cc3cf5d3a9fc08d65c410c7ac291bf,Ivan Levkivskyi,2017-04-29 16:41:02+00:00,Update setup and test config,False,7,3,4,,,,473,202,241,3,2.2333333333333334,65.16407150976484,21.0,29.666666666666668,170.9158262414987,1.6282051282051284,743.2431914983854,41.29128841657696,0.05697194208049957
2,dcd315884de953613e72685cd50cf16cf9100074,Ivan Levkivskyi,2017-05-07 11:12:19+00:00,Some updates to README,False,80,50,30,,,,474,202,242,3,2.2333333333333334,65.16407150976484,21.0,29.666666666666668,170.9158262414987,1.6282051282051284,743.2431914983854,41.29128841657696,0.05697194208049957
3,c323cfb20c32b0a1dd042fa3875f1ab7b4d168fe,Ivan Levkivskyi,2017-05-07 11:29:36+00:00,Prepare some stepts for release,False,11,6,5,,,,474,202,242,3,2.2333333333333334,65.16407150976484,21.0,29.666666666666668,170.9158262414987,1.6282051282051284,743.2431914983854,41.29128841657696,0.05697194208049957
4,1a8ea8655743562231decf1eee3fbd95ab0bc7bb,Ivan Levkivskyi,2017-05-07 11:53:17+00:00,Add typing as a requirement to setup.py,False,8,7,1,,,,480,206,247,3,2.2333333333333334,60.38967993756142,22.0,30.666666666666668,172.50078874221984,1.794871794871795,744.0356727487459,41.335315152708105,0.057500262914073286
5,016b3bd3b2f352c110549a1dbaf41586bd4f24dd,Ivan Levkivskyi,2017-05-07 12:00:01+00:00,Use setuptools instead of distutils,False,2,1,1,,,,480,206,247,3,2.2333333333333334,60.38967993756142,22.0,30.666666666666668,172.50078874221984,1.794871794871795,744.0356727487459,41.335315152708105,0.057500262914073286
6,12ad9f6bca2d096fb659920c311ba1466f88b4b1,Ivan Levkivskyi,2017-10-08 16:36:12+00:00,Bump version and define _gorg,False,14,12,2,1.0,1.0,1.0,490,214,254,3,2.2580645161290325,60.84629621560069,22.666666666666668,31.666666666666668,179.8110822095863,1.7901234567901234,773.5722421511282,42.976235675062675,0.05993702740319543
7,a67f086ff2d12532cf20ce88f0b1e9e3aa2ea6a6,Ivan Levkivskyi,2018-03-19 22:32:48+00:00,Support Python 3.7,False,61,44,17,0.8571428571428571,0.21428571428571427,1.0,517,249,288,4,3.032258064516129,60.76708177271113,35.333333333333336,51.666666666666664,333.1481157602537,1.9652014652014653,1617.0276436331442,89.83486909073024,0.11104937192008456
8,d11425bdade02ac383fa941ef2fdaad57fef99ab,Ivan Levkivskyi,2018-03-19 22:33:40+00:00,"Revert ""Support Python 3.7""

This reverts commit a67f086ff2d12532cf20ce88f0b1e9e3aa2ea6a6.",False,61,17,44,0.14285714285714285,0.7857142857142857,0.0,490,214,254,3,2.2580645161290325,60.84629621560069,22.666666666666668,31.666666666666668,179.8110822095863,1.7901234567901234,773.5722421511282,42.976235675062675,0.05993702740319543
9,7aa7bb5a89ebd584f3885d993b417212592135c0,Ivan Levkivskyi,2018-03-20 22:22:42+00:00,"Support Python 3.7 (#18)

This follows existing semantics as closely as possible.
But there are still few differences due to a changes in semantics
in typing.py.",False,109,84,25,0.8163265306122449,0.0,1.0,549,264,317,5,3.46875,60.611540033683745,46.0,69.33333333333333,471.832962111906,2.3627450980392157,2604.9281173062463,144.7182287392359,0.157277654037302
10,c348f4d27a95078358186607ecf7ba7874403448,Ivan Levkivskyi,2018-05-07 21:02:26+00:00,"Add (very) simple support for TypedDict keys (#21)

Fixes #19

Unfortunately, the current API doesn't allow reliably infer
whether a given key is required or not.",False,55,53,2,1.0,1.0,1.0,596,287,342,5,3.3529411764705883,58.99118256124782,46.666666666666664,70.33333333333333,475.6630371104637,2.3627450980392157,2608.758192304804,144.93101068360022,0.1585543457034879
11,6eb45966c014cabbbce6c202bcb993623edebe6a,Ivan Levkivskyi,2018-05-07 21:15:59+00:00,Bump version to 0.3.0 (#22),False,2,1,1,,,,596,287,342,5,3.3529411764705883,58.99118256124782,46.666666666666664,70.33333333333333,475.6630371104637,2.3627450980392157,2608.758192304804,144.93101068360022,0.1585543457034879
12,471a8dab0d42e08249606dbb2b0867783c889ac6,Ivan Levkivskyi,2018-05-07 21:43:24+00:00,Fix missing requirements (#23),False,4,2,2,,,,596,287,342,5,3.3529411764705883,58.99118256124782,46.666666666666664,70.33333333333333,475.6630371104637,2.3627450980392157,2608.758192304804,144.93101068360022,0.1585543457034879
13,168fa6f7c5c55f720ce6282727211cf4cf6368f6,Elvis Pranskevichus,2018-07-21 16:31:27+00:00,"Use environment marker for typing dependency instead of runtime (#25)

Python version constraints *must* be specified as environment markers.
Runtime setup.py checks will not be reflected in the metadata, resulting
in incorrect hard dependency on typing in dist-info and in wheels.",False,7,4,3,,,,597,285,343,5,3.3529411764705883,63.76557413345122,45.666666666666664,69.33333333333333,474.07807460974254,2.1960784313725488,2607.9657110544435,144.88698394746908,0.15802602486991418
14,1d8152bdb984ffa83adc3a0ef4b3f2b5fe0a1ffd,smarie,2018-09-25 01:33:47+00:00,"Add is_optional_type() and type variable helpers (#26)

Fixes #14",False,100,96,4,0.56,1.0,0.98,687,327,394,17,3.125,64.71432177184832,51.0,76.33333333333333,520.009663548776,2.7566153846153845,3067.013005942017,170.3896114412232,0.17333655451625865
15,5ddc8448f96bc8002af91dad295ede64ae3f3589,Ivan Levkivskyi,2019-02-03 14:05:35+00:00,Bump version to 0.4.0 and add Python 3.7 to supported versions (#29),False,3,2,1,,,,688,327,395,17,3.125,64.71432177184832,51.0,76.33333333333333,520.009663548776,2.7566153846153845,3067.013005942017,170.3896114412232,0.17333655451625865
16,fd81278cc440b6003f8298bcb22d5bc0f82ee3cd,mattHawthorn,2019-04-02 17:23:47+00:00,"made _eval_args recurse in the instance that any of the args is a Callable, and added test for this case (#32)",False,9,6,3,0.0,0.6666666666666666,1.0,691,330,398,17,3.125,64.66133831834925,51.0,76.33333333333333,520.009663548776,2.7566153846153845,3067.013005942017,170.3896114412232,0.17333655451625865
17,3b0859a0a192f4d464babb3e9c724e7fb366bca7,Ivan Levkivskyi,2019-07-03 08:17:51+00:00,Fix flake8 (#41),False,53,29,24,1.0,0.0,0.0,692,332,399,19,3.125,64.68978194854752,51.0,76.33333333333333,520.009663548776,2.7566153846153845,3067.013005942017,170.3896114412232,0.17333655451625865
18,526680203bc8fea5d24c2dd94c9bbcbf4f6b8bc3,Benjamin Woodruff,2019-07-03 08:32:02+00:00,"Support Literal (PEP 586) (#39)

Adds an `is_literal_type` API, and fixes `get_args` for literal types on 3.6 and 2.7 (provided by `typing_extensions`).

[This feature is in 3.8](https://www.python.org/dev/peps/pep-0586/), but it's available as a backport to 3.7 and below as part of [`typing_extensions`](https://github.com/python/typing/tree/master/typing_extensions), so this adds `typing_extensions` as a dependency.",False,48,43,5,0.9166666666666666,0.9166666666666666,1.0,728,351,430,22,3.142857142857143,64.14697768144711,54.666666666666664,82.33333333333333,570.9875565330918,2.7534879336349927,3373.705042786753,187.4280579325974,0.19032918551103062
19,08587dd8620810c7a542385996c3db3d70ae0558,Benjamin Woodruff,2019-07-03 08:48:52+00:00,"Fix get_args for unparameterized ClassVar on <3.7 (#40)

In 3.7, `get_args(ClassVar)` (no parameter specified) would return an
empty tuple. In 3.6 it would return `(None,)` because `__type__` is
`None` in that case.

This copies the logic that already existed in `get_last_args` to
normalize that case to an empty tuple.",False,6,5,1,1.0,1.0,1.0,732,353,432,23,3.1666666666666665,64.177353700658,55.0,83.33333333333333,578.9338467984288,2.7653939734231705,3441.886451994194,191.21591399967744,0.19297794893280962
20,45efedf7ea3c0debbed3a38ba0b43aefa346ff9a,Ivan Levkivskyi,2019-10-13 18:31:05+00:00,Bump version to 0.5.0 (#46),False,2,1,1,,,,732,353,432,23,3.1666666666666665,64.177353700658,55.0,83.33333333333333,578.9338467984288,2.7653939734231705,3441.886451994194,191.21591399967744,0.19297794893280962
21,63dfddfbbfd303242f201df7d446f680df75967c,Tomasz Trębski,2020-01-06 12:40:24+00:00,"Account for Py 3.8 in ""get_args"" ValueError (#48)

With introduction of Python 3.8 `get_args` `ValueError` message omits mentioning that `evaluate` can be `True` for `Python >= (3, 7, 0)` as derived from `NEW_TYPING` const.",False,2,1,1,,,,732,353,432,23,3.1666666666666665,64.177353700658,55.0,83.33333333333333,578.9338467984288,2.7653939734231705,3441.886451994194,191.21591399967744,0.19297794893280962
22,e23e28daf93b2a3bd54b0924b1abf2b562f8022c,smarie,2020-01-22 11:32:48+00:00,"Support for very old versions of python typing <= 3.5.3. Fixes #44 (#45)

Fixes #44
Fixes #5",False,538,469,69,0.19008264462809918,0.34297520661157027,0.7851239669421488,1130,650,722,78,4.886792452830188,55.1653094676959,91.33333333333333,151.0,1119.5950762983512,4.328230409963674,9257.995300759003,514.333072264389,0.3731983587661171
23,8a3bcb7bb6aaa2dbada51dad1018cee81a6eafac,Tomasz Trębski,2020-01-22 12:37:28+00:00,"Add `is_new_type` API (#53)

Closes: #51",False,34,33,1,0.09090909090909091,1.0,1.0,1162,658,745,78,4.7272727272727275,54.83800536305046,92.0,152.0,1129.0041030641148,4.323517319354507,9328.593124168683,518.2551735649268,0.37633470102137156
24,e1a845a26173c5a1d4f16df65a803f185585696f,smarie,2020-01-22 14:43:33+00:00,Add Python <3.5.2 to Travis build matrix (#56),False,38,28,10,,,,1171,664,750,80,4.7272727272727275,54.75960829123992,92.33333333333333,153.0,1135.5090365548454,4.344202898550724,9364.916476780189,520.2731375988993,0.3785030121849484
25,ccb7b406a6d63b2e689838a7bf0eeb509af74fc9,Rodrigo Martins de Oliveira,2020-04-18 21:16:38+00:00,"Adding function `is_forward_ref` (#57)

- Adds function ``is_forward_ref`` which tests if ``tp`` is a :class:`typing.ForwardRef`.
- Adds function ``get_forward_arg`` which returns the string representation of the forward reference.",False,65,59,6,1.0,1.0,1.0,1223,687,780,80,4.52542372881356,54.09882404703532,92.66666666666667,153.66666666666666,1141.5179793398768,4.3418803418803416,9411.879780331177,522.8822100183987,0.3805059931132923
26,8e1a73f3cf0dab287460752bc5c4e4d888397af9,Ivan Levkivskyi,2020-05-02 10:04:06+00:00,"Bump version to 0.6.0 (#59)

Co-authored-by: Ivan Levkivskyi <ilevkivskyi@dropbox.com>",False,2,1,1,,,,1223,687,780,80,4.52542372881356,54.09882404703532,92.66666666666667,153.66666666666666,1141.5179793398768,4.3418803418803416,9411.879780331177,522.8822100183987,0.3805059931132923
27,0950ff8bf27472add2ab637bbf700e0e01494e2b,Tomasz Trębski,2020-07-13 05:52:31+00:00,Respect TypedDict from typing_extensions (#54),False,32,23,9,1.0,1.0,1.0,1237,700,793,80,4.466666666666667,53.8160321896953,92.66666666666667,153.66666666666666,1141.5179793398768,4.3418803418803416,9411.879780331177,522.8822100183987,0.3805059931132923
28,9f0c4ff1e774c35a660f46abe36b17d0db2bcf01,Ivan Levkivskyi,2021-01-17 09:27:18+00:00,Remove now unneded dummy names,False,2,0,2,,,,1235,698,791,79,4.466666666666667,53.79251773513001,92.66666666666667,153.66666666666666,1141.5179793398768,4.3418803418803416,9411.879780331177,522.8822100183987,0.3805059931132923
29,0b35025358b182661a4a633932ecf8134e0ee4ee,Ivan Levkivskyi,2021-01-17 09:36:06+00:00,Fix _TypedDictMeta import,False,7,6,1,,,,1240,702,795,80,4.466666666666667,53.64222252131688,94.66666666666667,156.66666666666666,1169.8363446889732,4.328400830737279,9624.42889222244,534.6904940123578,0.38994544822965777
30,69ead789813fcd716b1babac8d212974cb6f6e95,Ivan Levkivskyi,2021-01-17 09:43:28+00:00,Fix Python 3.4,False,2,1,1,,,,1240,702,795,80,4.466666666666667,53.64222252131688,94.66666666666667,156.66666666666666,1169.8363446889732,4.328400830737279,9624.42889222244,534.6904940123578,0.38994544822965777
31,ced752d786f67254dc2fde2d423e4972bffe40be,Sigurd Spieckermann,2021-02-25 19:35:19+00:00,"Support Final (PEP 591) (#62)

Adds an `is_final_type` function and extends `get_args` to support `Final` type. Supported Python versions are 2.7 and 3.6+ (via `typing_extensions` before 3.8).",False,58,52,6,0.8636363636363636,0.8636363636363636,1.0,1284,724,827,83,4.451612903225806,52.89545156634162,99.0,163.66666666666666,1235.4913499943607,4.312652961331376,10158.250838090325,564.3472687827959,0.4118304499981202
32,6bc521b9ba9fd22d2d3f219fcc99dedc3fb4c2f7,Ben Greiner,2021-03-21 17:12:40+00:00,"Handle Python 3.9 _SpecialGenericAlias (#69)

Another take at #66 which keeps compatibility with older Python versions.

Fixes #60",False,23,14,9,,,,1289,729,832,83,4.451612903225806,52.802283614648104,99.66666666666667,164.66666666666666,1245.0290489042723,4.30870936438622,10229.911857253806,568.3284365141004,0.4150096829680907
33,6dd6b38bc12bcbaf814fb0c69a801365b81e3611,Ben Greiner,2021-03-21 17:20:26+00:00,"import typing._TypedDictMeta in Python 3.9 (#68)

`typing_extensions` just re-exports `typing` in Python3.9. `type(typing.TypedDict)` is just a function in Python3.9, just as in `typing_extensions`.

Fixes #65",False,3,3,0,,,,1292,731,834,84,4.451612903225806,52.73371374502826,100.33333333333333,165.66666666666666,1254.5771839497877,4.304834054834054,10301.662818440123,572.3146010244513,0.41819239464992913
34,ff110fb9ceb62607a5409a7f0b53447d573da843,Ivan Levkivskyi,2021-06-05 22:17:29+00:00,"Try adding basic support for builtin geenrics (#71)

This also fixes a minor `TypedDict` glitch and adds some basic testing.

Closes #65",False,29,24,5,0.5,0.6666666666666666,1.0,1310,746,848,85,4.548387096774194,52.27442413286733,100.33333333333333,165.33333333333334,1249.6783849907185,4.49953216374269,10874.942341329055,604.1634634071697,0.4165594616635728
35,d1d46f4c2429dd0a60f902fa7b728d67bb2d1582,Ivan Levkivskyi,2021-06-05 22:25:14+00:00,"Bump version to 0.7.0 (#72)

Also add Python 3.9 to officially supported versions.",False,4,3,1,,,,1312,746,850,85,4.548387096774194,52.27442413286733,100.33333333333333,165.33333333333334,1249.6783849907185,4.49953216374269,10874.942341329055,604.1634634071697,0.4165594616635728
36,4647fd7f65063406594d27cbef6da199a6f2c4db,Ivan Levkivskyi,2021-06-07 16:01:07+00:00,"Correctly support special aliases on Python 3.9 (#74)

Fixes #73",False,5,4,1,0.0,0.0,1.0,1315,747,851,87,4.564516129032258,52.26331860196793,101.0,166.33333333333334,1259.2225943136416,4.49536231884058,10951.414350918114,608.4119083843397,0.4197408647712139
37,16000a1907f82c4d1cc39b8a24a1a09f3dbe0050,Ivan Levkivskyi,2021-06-07 16:07:29+00:00,Bump version to 0.7.1 (#75),False,2,1,1,,,,1315,747,851,87,4.564516129032258,52.26331860196793,101.0,166.33333333333334,1259.2225943136416,4.49536231884058,10951.414350918114,608.4119083843397,0.4197408647712139
38,8f6aa2075ba448ab322def454137e7c59b9b302d,Fabian Raab,2021-10-25 15:19:53+00:00,"Making the is_new_type check more robust then just checking __supertype__ existance (#78)

Before this commit everthing which has an attribute called __supertype__
will be accepted as ‚NewType‘ which is wrong.

Now it is additionally checked that the __qualname__ must be
'NewType.<locals>.new_type', and that the module where the symbol is
defined has the name 'typing'. A user could still fullfill all those
conditions in a custom class, but the probability bacame quite low.

Furtheremore support for python 3.10¹, where NewType is not a function
any more but a class, is added. This check is implemented by
isincance() and should work always correctly.

The symbol ‚NewType‘ (i.e. not the call of it) is now also cosidered as
a NewType by doing a `tp is NewType` check. This is in alignment with
other functions, such as `is_classvar()` which does an `tp is ClassVar`
or `is_union_type()` which do a `tp is Union`.

¹ To be specific, the first RC of python 3.10, i.e. in all bata
versions, NewType is still a function. Please also note that the class
NewType in python 3.10.0rc has a different __qualname__ then the
function NewType before.",False,91,70,21,0.65625,0.5625,1.0,1360,769,888,91,4.666666666666667,51.43722275625337,110.33333333333333,182.33333333333334,1412.4480452870837,4.6828165374677,13197.690693761326,733.2050385422959,0.4708160150956946
39,c6adf8150c8a0242c15d86066372673489eb6c77,Anton Agestam,2022-06-02 11:24:33+00:00,"Support PEP 604 unions, types.UnionType (#83)",False,20,19,1,1.0,0.14285714285714285,1.0,1378,781,901,91,4.625,50.892161665193065,113.33333333333333,188.66666666666666,1459.6153903092807,4.973180076628353,13620.390971437,756.6883873020556,0.4865384634364269
40,768e931b60fc9a3eca8050481a6dbdc086d9ab54,Antony Lee,2022-06-19 15:32:37+00:00,"Make `get_origin(Literal[...]) == Literal`. (#80)

See https://github.com/ilevkivskyi/typing_inspect/pull/39#issuecomment-907637313.",False,10,7,3,0.0,0.3333333333333333,1.0,1382,784,904,92,4.640625,50.87136004347294,113.33333333333333,188.66666666666666,1459.6153903092807,4.973180076628353,13620.390971437,756.6883873020556,0.4865384634364269
41,f052816d56faf026e59a4297bede247bc436fbc0,Ivan Levkivskyi,2022-06-19 17:07:28+00:00,Fix TypedDict on new Python and typing_extensions (#86),False,9,7,2,,,,1387,787,907,94,4.640625,50.80640825198839,113.33333333333333,188.66666666666666,1459.6153903092807,4.973180076628353,13620.390971437,756.6883873020556,0.4865384634364269
42,0f45982a46190e550e48ffb313add3b61d70a959,Voldemar,2022-07-18 18:29:20+00:00,Add support for UnionType in get_args (#87),False,8,8,0,0.0,0.0,1.0,1395,792,912,94,4.6875,50.497030397593676,115.66666666666667,192.66666666666666,1491.2791522356954,4.966789113015832,13808.797196720721,767.1553998178179,0.4970930507452318
43,82687ff741a5843eda29a4284782b0ba6c7ec65b,Ivan Levkivskyi,2022-08-17 13:57:27+00:00,Bump version (#90),False,2,1,1,,,,1395,792,912,94,4.6875,50.497030397593676,115.66666666666667,192.66666666666666,1491.2791522356954,4.966789113015832,13808.797196720721,767.1553998178179,0.4970930507452318
44,b24da20b0f137e00cd8c511843ff52cb92dcf470,Ivan Levkivskyi,2022-08-17 14:05:06+00:00,Update classifiers in setup.py,False,2,1,1,,,,1395,792,912,94,4.6875,50.497030397593676,115.66666666666667,192.66666666666666,1491.2791522356954,4.966789113015832,13808.797196720721,767.1553998178179,0.4970930507452318
45,beaa4a4a0e10cc4f2b3657e8ad7c772cf4d03a7b,jamesrobson-secondmind,2022-11-21 22:08:41+00:00,"Handle non-indexed generics >= py3.9 (#94)

Closes #93
This prevents `get_parameters` throwing an exception on python >= 3.9.
This does lead to a difference in behaviour between different python versions, but the new class based alias introduced in 3.9 doesn't store the required info. So to maintaining the same behaviour would require a dictionary of the generic types to the correct output.

Example of change in behaviour:
**python <=3.8**
```
>>> from typing import List
>>> from typing_inspect import get_parameters
>>> get_parameters(List)
(~T,)
```

**python >=3.9**
```
>>> from typing import List
>>> from typing_inspect import get_parameters
>>> get_parameters(List)
()
```",False,11,10,1,0.0,0.5,1.0,1404,797,921,94,4.71875,50.31548980004209,116.33333333333333,193.66666666666666,1501.023986697376,4.9629677006715704,13891.74944163912,771.7638578688401,0.5003413288991253
46,69370b2b93788afb3287c2c5a0d2b3d99eb177a4,Ivan Levkivskyi,2023-05-24 13:44:36+00:00,Fix new version of typing_extensions (#101),False,38,34,4,0.0,0.0,1.0,1434,820,949,94,4.875,49.59040244436222,117.66666666666667,195.66666666666666,1518.4282069746266,4.949571232680461,14005.54434549967,778.0857969722038,0.5061427356582088
47,c014abf73c165dda826e4c25504f9250bbca9045,Ivan Levkivskyi,2023-05-24 20:24:04+00:00,"Bump version (#103)

Also update supported Python versions.",False,4,2,2,,,,1434,820,949,94,4.875,49.59040244436222,117.66666666666667,195.66666666666666,1518.4282069746266,4.949571232680461,14005.54434549967,778.0857969722038,0.5061427356582088
